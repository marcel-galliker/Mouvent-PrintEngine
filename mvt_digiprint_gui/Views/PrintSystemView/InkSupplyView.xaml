<UserControl x:Class="RX_DigiPrint.Views.PrintSystemView.InkSupplyView"
             xmlns      ="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x    ="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc   ="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d    ="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:rxuc ="clr-namespace:RX_DigiPrint.Views.UserControls"
             xmlns:rx   ="clr-namespace:RX_DigiPrint.Helpers"
             xmlns:common="clr-namespace:RX_Common;assembly=rx_common_lib_cs"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             mc:Ignorable="d"
             d:DesignHeight="400"
             d:DesignWidth="100"
             Loaded="UserControl_Loaded"
             Unloaded="UserControl_Unloaded"
             >
    <UserControl.Resources>
        <Style x:Key="CheckBoxStyle_ON" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                            </Trigger>

                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource OptionMark.Pressed.Background}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CheckBoxStyle_OFF" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <!--    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource OptionMark.MouseOver.Background}"/> -->
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource OptionMark.Pressed.Background}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="InkSupplyColorEllipseStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="Transparent">
                            <Ellipse HorizontalAlignment="Center" VerticalAlignment="Center" 
                                     Name="InkSupplyColorIconEllipse" Width ="15" Height ="15" Fill ="{TemplateBinding BorderBrush}"
                                     Stroke="{TemplateBinding Foreground}"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="InkSupplyColorDropStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="Transparent">
                            <iconPacks:PackIconMaterial Kind="Water" HorizontalAlignment="Center" VerticalAlignment="Center"
                                               Width ="15" Height ="15"
                                               Foreground ="{TemplateBinding BorderBrush}"></iconPacks:PackIconMaterial>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



    </UserControl.Resources>

    <!--    <CheckBox x:Name="CheckBox" Checked="CheckBox_Checked" IsChecked="{Binding IsChecked}" Style="{StaticResource CheckBoxStyle_OFF}"> -->
    <CheckBox x:Name="CheckBox" Click="CheckBox_Clicked" IsChecked="{Binding IsChecked}" Style="{StaticResource CheckBoxStyle_OFF}">
        <Grid x:Name="SettingsGrid" Width="100"  Margin="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="26"/>
                <RowDefinition Height="{Binding HasSideSelection, Converter={StaticResource BooleanToSideSelectionHeightConverter}}"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>


            <Button Grid.Column="0" Style="{StaticResource InkSupplyColorEllipseStyle}" HorizontalAlignment="Center"
                    BorderBrush="{Binding InkType, Converter={StaticResource InkType_ColorBG}}"
                    Foreground="{Binding InkType, Converter={StaticResource InkType_ColorBG_Stroke}}"></Button>

            <!--            <Button Grid.Column="0" Style="{StaticResource InkSupplyColorDropStyle}" HorizontalAlignment="Center"
                    BorderBrush="{Binding InkType, Converter={StaticResource InkType_ColorBG}}"
                    Foreground="{Binding InkType, Converter={StaticResource InkType_ColorBG_Stroke}}"></Button>
            -->

            <Border Grid.Row="0" Grid.Column="0" BorderBrush="{Binding StateBrush}" BorderThickness="2" Grid.RowSpan="9" Panel.ZIndex="99" Margin="1,0"/>

            <rxuc:RxComboBoxTree Margin="2,0,2,0" x:Name="InkType" Grid.Row="1"/>

            <rx:RxComboBox Margin="2,0,2,0" Grid.Row="2" x:Name="CB_RectoVerso" SelectedValue="{Binding RectoVerso}"/>

            <Button x:Name="CmdButton" 
                       Grid.Row="3"
                       Style="{StaticResource Mouvent.CmdButtonStyle}"
                       Content="{Binding CtrlMode, Converter={StaticResource CtrlMode_Str}}"
                        Margin="2,0,2,0"
                       Click="Cmd_Clicked" HorizontalAlignment="Stretch" 
                       IsEnabled="False"
                       />
            <rx:RxPopup x:Name="CmdPopup" 
                   PlacementTarget="{Binding ElementName=CmdButton}"
                   Width="auto"
                   MinWidth="100" 
                   IsHitTestVisible="False"
                   OpacityMask="White"
                   >
                <Grid Background="White">
                    <GroupBox Width="150" Style="{StaticResource MvtGroupBox}" Header="^">
                        <StackPanel Margin="10,2">

                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40"  x:Name="Button_OnOff" Content="OFF"  Margin="5"      Click="OnOff_Clicked"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}"  Height="40" Content="Print"       Click="Print_Clicked" Margin="5"    Padding="10" Visibility="{Binding Flushed, Converter={StaticResource BoolToInVisible_Converter}}"/>
                            <Rectangle Fill="{StaticResource Mouvent.MainColorBrush}" HorizontalAlignment="Stretch" Height="1" Margin="-16, 8"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}"  Height="40"  x:Name="FlushButton"  Content="Flush"  Margin="5"     Click="Flush_Clicked"     Padding="10" Visibility="{Binding CanFlush, Converter={StaticResource BoolToVisible_Converter}}"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40"                      Content="Purge" Margin="5"      Click="Purge_Clicked"     Padding="10"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40"   Content="Prg+Vac"  Margin="5"     Click="PurgeVacc_Clicked" Padding="10" x:Name="Button_PurgeVacc"/>
                            <Button  Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40"                     Content="Prg+Wpe"  Margin="5"   Click="PurgeWipe_Clicked" Padding="10" x:Name="Button_PurgeWipe"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40" Content="Prg+Wash" Margin="5" Click="PurgeWash_Clicked" Padding="10" x:Name="Button_PurgeWash"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40" Content="Wipe" Margin="5" Click="Wipe_Clicked" Padding="10" x:Name="Button_Wipe"/>
                            <Rectangle Fill="{StaticResource Mouvent.MainColorBrush}" HorizontalAlignment="Stretch" Height="1" Margin="-16, 8"/>
                            <Button    Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40"                   Content="Fill"    Margin="5"    Click="Fill_Clicked"      Padding="10" />
                            <Button   Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40"                    Content="Empty"    Margin="5"   Click="Empty_Clicked"     Padding="10" Visibility="{Binding Running, Converter={StaticResource BoolToInVisible_Converter}}"/>
                            <Rectangle x:Name="Line_Calibrate"  Fill="{StaticResource Mouvent.MainColorBrush}" HorizontalAlignment="Stretch" Height="1" Margin="-16, 8"/>
                            <!--<Button Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40" x:Name="Button_Calibrate" Content="Calibrate" Margin="5"   Click="Calibrate_Clicked" Padding="10"/>-->
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40"  Content="Check"                     Margin="5"           Click="Check_Clicked" Padding="10"/>
                        </StackPanel>
                    </GroupBox>
                </Grid>
            </rx:RxPopup>

            <rx:RxPopup x:Name="FlushPopup"
                   PlacementTarget="{Binding ElementName=FlushButton}"
                   Width="auto"
                   MinWidth="100"
                   IsHitTestVisible="False"
                   OpacityMask="White"
                   >
                <Grid Background="White">
                    <GroupBox Width="150" Style="{StaticResource MvtGroupBox}" Header="^">
                        <StackPanel Margin="10,2">
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}"  Height="40" Content="Night"      Click="Flush_Clicked_0"   Margin="5"  Padding="10"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}"  Height="40" Content="Weekend"    Click="Flush_Clicked_1"   Margin="5"  Padding="10"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}"  Height="40" Content="Week"       Click="Flush_Clicked_2"   Margin="5"  Padding="10"/>
                        </StackPanel>
                    </GroupBox>
                </Grid>
            </rx:RxPopup>

            <rx:RxPopup x:Name="MsgPopup"
                   PlacementTarget="{Binding ElementName=CmdButton}"
                   Width="auto"
                   MinWidth="100" IsHitTestVisible="False"
                   OpacityMask="White"
                   >
                <Grid Background="White">
                    <GroupBox Width="150" Style="{StaticResource MvtGroupBox}" Header="^">
                        <StackPanel Margin="10,2">
                            <TextBlock x:Name="MsgText" TextWrapping="Wrap"/>
                            <Button Style="{StaticResource Mouvent.CmdButtonStyle}" Height="40" Content="Done" Click="Done_Clicked"/>
                        </StackPanel>
                    </GroupBox>
                </Grid>
            </rx:RxPopup>

            <TextBlock Grid.Row="4"  Margin="2,0,4,0" HorizontalAlignment="Right" Text="{Binding PresLung, Converter={StaticResource HeadVal_Converter}}" x:Name="TX_LungPressure"/>
            <Rectangle  Margin="2,0,2,0" Grid.Row="5" Fill="{StaticResource RX.Warn}" Visibility="{Binding TempReady, Converter={StaticResource BoolToInVisible_Converter}}"/>
            <StackPanel  Margin="2,0,2,0" Grid.Row="5" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                <TextBlock VerticalAlignment="Center" Text="{Binding Temp,  Converter={StaticResource HeadVal_ConverterTemp}}"/>
                <TextBlock Text=" (" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding TempMaxSetpoint, Converter={StaticResource HeadVal_ConverterTemp}}" VerticalAlignment="Center"/>
                <TextBlock Margin="0,0,2,0" Text=")" VerticalAlignment="Center"/>
            </StackPanel>

            <Rectangle Margin="2,0,2,0" Grid.Row="6" Fill="{StaticResource RX.Warn}" Visibility="{Binding CondTempReady, Converter={StaticResource BoolToInVisible_Converter}}"/>
            <StackPanel  Margin="2,0,2,0" Grid.Row="6" Orientation="Horizontal" HorizontalAlignment="Right">
                <TextBlock Text="{Binding CondTemp,      Converter={StaticResource HeadVal_ConverterTemp}}" />
                <TextBlock Text=" (" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding TempSetpoint, Converter={StaticResource HeadVal_ConverterTemp}}" VerticalAlignment="Center"/>
                <TextBlock Margin="0,0,2,0" Text=")" VerticalAlignment="Center"/>
            </StackPanel>

            <Grid x:Name="ServiceGrid" Grid.Row="7"  Margin="2,0,2,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>

                <StackPanel Margin="2,0,2,0" Grid.Row="1" HorizontalAlignment="Right" Orientation="Horizontal">
                    <TextBlock  Text="{Binding CondPresIn, Converter={StaticResource HeadVal_Converter10}}" VerticalAlignment="Center" Padding="3,0"/>
                    <common:MvtNumBox Margin="0" Text="{Binding CylinderPresSet, Converter={StaticResource HeadVal_Converter10}}"
                                      MinWidth="40" LostFocus="Pressure_LostFocus" HorizontalContentAlignment="Right"/>
                </StackPanel>

                <StackPanel Margin="2,0,2,0" Grid.Row="2" HorizontalAlignment="Right" Orientation="Horizontal">
                    <TextBlock  Text="{Binding CondPumpSpeed, Converter={StaticResource HeadVal_Converter10}}" VerticalAlignment="Center" Padding="3,0"/>
                </StackPanel>

                <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right">
                    <TextBlock Text="{Binding CylinderPres,      Converter={StaticResource HeadVal_Converter}}" />
                    <TextBlock Text=" ("/>
                    <TextBlock Text="{Binding CylinderSetpoint,      Converter={StaticResource HeadVal_Converter}}"/>
                    <TextBlock Margin="0,0,2,0"  Text=")"/>
                </StackPanel>
                <StackPanel Grid.Row="4" Orientation="Horizontal" HorizontalAlignment="Right">
                    <TextBlock Text="{Binding PumpSpeed,      Converter={StaticResource HeadVal_Converter}}" />
                    <TextBlock Text=" ("/>
                    <TextBlock Text="{Binding PumpSpeedSet,      Converter={StaticResource HeadVal_Converter}}"/>
                    <TextBlock Margin="0,0,2,0"  Text=")"/>
                </StackPanel>
                <TextBlock  Margin="0,0,2,0"  Grid.Row="5" HorizontalAlignment="Right" Text="{Binding BleedValve}" />
                <TextBlock  Margin="0,0,2,0"  Grid.Row="6" HorizontalAlignment="Right" Text="{Binding AirCusionValve}" />
            </Grid>

            <!-- NO Connection _______________________________________________________________________-->
            <TextBlock x:Name="NotConnected"
                    Grid.RowSpan="100"
                    Text="NOT CONNECTED" 
                    FontSize="15" 
                    HorizontalAlignment="Center" 
                    VerticalAlignment="Center" 
                    Foreground="{StaticResource RX.Error}" 
                    FontWeight="Bold"
                    Visibility="{Binding Connected, Converter={StaticResource BoolToInVisible_Converter}}"
                    RenderTransformOrigin="0.5,0.5" >
                <TextBlock.LayoutTransform>
                    <RotateTransform Angle="-70"/>
                </TextBlock.LayoutTransform>
            </TextBlock>

            <TextBlock x:Name="Flushed"
                    Grid.RowSpan="100"
                    Text="FLUSHED" 
                    FontSize="15" 
                    HorizontalAlignment="Center" 
                    VerticalAlignment="Center" 
                    Foreground="Orange" 
                    FontWeight="Bold"
                    Visibility="{Binding Flushed, Converter={StaticResource BoolToVisible_Converter}}"
                    RenderTransformOrigin="0.5,0.5" >
                <TextBlock.LayoutTransform>
                    <RotateTransform Angle="-70"/>
                </TextBlock.LayoutTransform>
            </TextBlock>

        </Grid>
    </CheckBox>
</UserControl>
