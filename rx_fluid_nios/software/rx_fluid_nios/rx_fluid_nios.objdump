
rx_fluid_nios.elf:     file format elf32-littlenios2
rx_fluid_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0001018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00009dbc memsz 0x00009dbc flags r-x
    LOAD off    0x0000addc vaddr 0x00019ddc paddr 0x0001b0fc align 2**12
         filesz 0x00001320 memsz 0x00001320 flags rw-
    LOAD off    0x0000c41c vaddr 0x0001c41c paddr 0x0001c41c align 2**12
         filesz 0x00000000 memsz 0x00001508 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000099cc  0001018c  0001018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000284  00019b58  00019b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001320  00019ddc  0001b0fc  0000addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001508  0001c41c  0001c41c  0000c41c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory_nios_cpu 00000000  0001d924  0001d924  0000c0fc  2**0
                  CONTENTS
  7 .onchip_memory_nios_arm 00000000  00050000  00050000  0000c0fc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000c0fc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000758  00000000  00000000  0000c120  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000eb96  00000000  00000000  0000c878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003f99  00000000  00000000  0001b40e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000446f  00000000  00000000  0001f3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000011f4  00000000  00000000  00023818  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000033cb  00000000  00000000  00024a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003a0e  00000000  00000000  00027dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0002b7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000570  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0002e57e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0002e581  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0002e58d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002e58e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0002e58f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0002e593  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0002e597  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0002e59b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0002e5a4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0002e5ad  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0002e5b6  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002a  00000000  00000000  0002e5c5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00358b0a  00000000  00000000  0002e5ef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
0001018c l    d  .text	00000000 .text
00019b58 l    d  .rodata	00000000 .rodata
00019ddc l    d  .rwdata	00000000 .rwdata
0001c41c l    d  .bss	00000000 .bss
0001d924 l    d  .onchip_memory_nios_cpu	00000000 .onchip_memory_nios_cpu
00050000 l    d  .onchip_memory_nios_arm	00000000 .onchip_memory_nios_arm
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../rx_fluid_nios_bsp//obj/HAL/src/crt0.o
000101c4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 AMC7891.c
00000000 l    df *ABS*	00000000 MAX31865.c
00000000 l    df *ABS*	00000000 adc_thermistor.c
000104fc l     F .text	000001cc _dsp_lookup_f
00000000 l    df *ABS*	00000000 average.c
00000000 l    df *ABS*	00000000 comm.c
0001c494 l     O .bss	00000830 _Comm
00000000 l    df *ABS*	00000000 fifo.c
00000000 l    df *ABS*	00000000 heater.c
0001ccc4 l     O .bss	00000010 _DutyTemp_Count
0001ccd4 l     O .bss	00000640 _Temp_Tab
0001d314 l     O .bss	00000010 _Temp_Average
0001d324 l     O .bss	00000010 _Temp_Inc
0001d334 l     O .bss	00000010 _Temp_Pre
0001d344 l     O .bss	00000010 _Heater_Pre
0001d354 l     O .bss	00000010 _TimeTempFrozen
000119c0 l     F .text	00000134 _set_heater_out
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 ink_ctrl.c
0001d364 l     O .bss	000001f0 _InkSupply
0001c41c l     O .bss	00000004 _LungVacc
0001c420 l     O .bss	00000004 _PressureTimer
0001c424 l     O .bss	00000004 _ValveOut
0001c428 l     O .bss	00000004 _FlushPump
0001c42c l     O .bss	00000004 _AirPressureTime
0001d554 l     O .bss	00000010 _TestBleedLine_Timer
0001d564 l     O .bss	00000010 _OldPumpSpeed
0001c430 l     O .bss	00000004 _FillPressure
0001d574 l     O .bss	00000010 _PressureSetpoint
0001d584 l     O .bss	00000010 _MaxPrintPressure
0001d594 l     O .bss	00000010 _LastPumpTicks
0001d5a4 l     O .bss	00000010 _PumpSpeed1000
0001d5b4 l     O .bss	00000010 _FlushTimeISPresStable
0001d5c4 l     O .bss	00000010 _FlushISPressureStable
0001d5d4 l     O .bss	00000010 _TimeEmpty
0001d5e4 l     O .bss	00000010 _EmptyDetecTEndState
0001d5f4 l     O .bss	00000010 _EmptyPressureStored
0001d604 l     O .bss	00000010 _StartModePRINT
0001d614 l     O .bss	00000010 _ShutdownPrint
0001d624 l     O .bss	00000010 _ShutdownTimeStability
0001d634 l     O .bss	00000010 _ShutdownTimeOut
000158f4 l     F .text	00000040 _get_pump_ticks
000157c8 l     F .text	0000012c _set_pump_speed
00014ddc l     F .text	000000f4 _set_air_valve
00015b6c l     F .text	0000007c _set_air_pump
00015050 l     F .text	00000778 _pump_ctrl
00014ed0 l     F .text	000000bc _set_bleed_valve
00014f8c l     F .text	000000a0 _set_pressure_value
00015934 l     F .text	00000238 _set_flush_pump
000148e8 l     F .text	00000268 _init_purge
00014b50 l     F .text	0000028c _degass_ctrl
0001502c l     F .text	00000024 _trace_pump_ctrl
0001c434 l     O .bss	00000004 cnt.3228
00000000 l    df *ABS*	00000000 log.c
0001c440 l     O .bss	00000004 _cnt
00015c24 l     F .text	00000068 valstr
00000000 l    df *ABS*	00000000 main.c
0001c444 l     O .bss	00000004 _StaticErrors
0001c448 l     O .bss	00000004 _Watchdog_ok
00016140 l     F .text	0000003c _delay
0001b0d4 l     O .rwdata	00000004 RETRY.3433
00000000 l    df *ABS*	00000000 pid.c
00000000 l    df *ABS*	00000000 pres.c
0001d644 l     O .bss	00000150 _Sensor
00016b08 l     F .text	00000044 _sensor_reset
00016954 l     F .text	000001b4 _set_power
0001c454 l     O .bss	00000004 _on.2263
00016b4c l     F .text	000002e8 _sensor_read
0001b0d8 l     O .rwdata	00000004 init.2293
0001703c l     F .text	00000218 _read_Sensor_ID
00017254 l     F .text	0000003c _i2c_wait_time
00000000 l    df *ABS*	00000000 timer.c
0001d794 l     O .bss	00000010 _Alive
0001c458 l     O .bss	00000004 Timer_10_in
0001c45c l     O .bss	00000004 Timer_10_out
0001c460 l     O .bss	00000004 Timer_1000_in
0001c464 l     O .bss	00000004 Timer_1000_out
000172f4 l     F .text	00000034 _do_10ms_timer
00017328 l     F .text	000002fc _do_1000ms_timer
00017624 l     F .text	00000054 handle_timer_0_interrupt
00017678 l     F .text	00000054 handle_timer_1_interrupt
0001b0dc l     O .rwdata	00000004 period_timer_0.3410
0001b0e0 l     O .rwdata	00000004 period_timer_1.3411
00000000 l    df *ABS*	00000000 trprintf.c
0001c468 l     O .bss	00000004 _DEBUG
00000000 l    df *ABS*	00000000 version.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00017fcc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001821c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00019fbc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000189e4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00019294 l     F .text	00000050 altera_avalon_jtag_uart_timeout
000192e4 l     F .text	000000e8 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sysid_qsys.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001963c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 i2c_master.c
0001c484 l     O .bss	00000004 count.1500
0001c480 l     O .bss	00000004 count.1509
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
0001c490 g     O .bss	00000004 alt_instruction_exception_handler
000191a4 g     F .text	0000002c alt_main
00010458 g     F .text	000000a4 Main_adc_polling
0001d824 g     O .bss	00000100 alt_irq
00016e34 g     F .text	0000003c pres_valid
00015c8c g     F .text	000004b4 log_tick_10ms
0001b0fc g       *ABS*	00000000 __flash_rwdata_start
000179ac g     F .text	00000620 .hidden __divdi3
00018968 g     F .text	00000060 memmove
00015be8 g     F .text	0000003c log_init
00010944 g     F .text	0000004c comm_init
0001a09c g     O .rwdata	00001038 jtag_uart
00019aa4 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
000188cc g     F .text	0000009c __sfvwrite_small_str
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000166e8 g     F .text	0000026c pres_init
0001c46c g     O .bss	00000004 errno
00011b1c g     F .text	00000058 init_I2C
0001c478 g     O .bss	00000004 alt_argv
000230d4 g       *ABS*	00000000 _gp
00019cbc g     O .rodata	00000020 version
00016e70 g     F .text	000001cc pres_tick_10ms
00010804 g     F .text	00000140 average
00016578 g     F .text	00000028 pid_reset
00010e30 g     F .text	000000c8 fifo_put
000180f8 g     F .text	00000028 memcpy
00019ae4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0001971c g     F .text	0000004c I2C_start
000180e8 g     F .text	00000008 .hidden __udivsi3
00010df8 g     F .text	00000038 fifo_init
00019aac g     F .text	00000038 alt_icache_flush
00019010 g     F .text	0000009c alt_irq_register
000101c8 g     F .text	000001e4 init_AMC7891
00014704 g     F .text	000001e4 ink_tick_1000ms
0001b0e4 g     O .rwdata	00000004 _global_impure_ptr
0001d924 g       *ABS*	00000000 __bss_end
00019950 g     F .text	00000068 alt_iic_isr_register
000199ec g     F .text	000000b8 alt_tick
00019938 g     F .text	00000018 alt_ic_irq_enabled
000199b8 g     F .text	00000034 alt_alarm_stop
0001c470 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000064 alt_irq_handler
000198a4 g     F .text	00000004 alt_dcache_flush_all
000195f0 g     F .text	0000004c alt_avalon_sysid_qsys_test
0001b0fc g       *ABS*	00000000 __ram_rwdata_end
000176cc g     F .text	000000cc timer_init
000191d0 g     F .text	0000006c write
00010f94 g     F .text	0000005c heater_init
00019ddc g       *ABS*	00000000 __ram_rodata_end
00011e80 g     F .text	00002884 ink_tick_10ms
000180f0 g     F .text	00000008 .hidden __umodsi3
00050000 g       *ABS*	00000000 __alt_mem_onchip_memory_nios_arm
000187f0 g     F .text	00000030 vprintf
00010d4c g     F .text	000000ac comm_get_data
0001d924 g       *ABS*	00000000 end
000165a0 g     F .text	00000148 pid_calc
000193cc g     F .text	00000080 altera_avalon_jtag_uart_init
00010160 g     F .exceptions	0000002c alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00019678 g     F .text	00000050 alt_avalon_timer_sc_init
0001947c g     F .text	00000174 altera_avalon_jtag_uart_write
00018a50 g     F .text	00000544 ___vfprintf_internal_r
00018140 g     F .text	00000064 _sprintf_r
0001018c g     F .text	0000003c _start
00011bac g     F .text	000002d4 ink_init
0001c48c g     O .bss	00000004 _alt_tick_rate
0001c488 g     O .bss	00000004 _alt_nticks
0001925c g     F .text	00000038 alt_sys_init
0001617c g     F .text	00000080 main_error_reset
0001944c g     F .text	00000030 altera_avalon_jtag_uart_close
00019ddc g       *ABS*	00000000 __ram_rwdata_start
00019b58 g       *ABS*	00000000 __ram_rodata_start
0001d924 g       *ABS*	00000000 __alt_stack_base
00010ff0 g     F .text	000009d0 heater_tick_10ms
00011af4 g     F .text	00000028 heater_tick_1000ms
0001c438 g     O .bss	00000004 _PumpOFFTime
00018288 g     F .text	00000544 ___svfprintf_internal_r
00018820 g     F .text	000000ac __sfvwrite_small_dev
0001c41c g       *ABS*	00000000 __bss_start
00018120 g     F .text	00000020 memset
000161fc g     F .text	0000037c main
0001c474 g     O .bss	00000004 alt_envp
000103ac g     F .text	000000ac init_MAX31865
0001c43c g     O .bss	00000004 _PumpBeforeOFF
0001b0f0 g     O .rwdata	00000004 alt_errno
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory_nios_cpu
00018038 g     F .text	00000054 .hidden __divsi3
00019768 g     F .text	00000050 I2C_read
00019b58 g       *ABS*	00000000 __flash_rodata_start
000177bc g     F .text	00000020 tr_debug_on
00010ef8 g     F .text	0000009c fifo_get
0001923c g     F .text	00000020 alt_irq_init
000181a4 g     F .text	00000078 sprintf
00019cdc g     O .rodata	00000100 .hidden __clz_tab
00018fb8 g     F .text	00000058 _write_r
0001b0e8 g     O .rwdata	00000004 _impure_ptr
0001c47c g     O .bss	00000004 alt_argc
00010990 g     F .text	000001c4 comm_encode
000106c8 g     F .text	0000013c selection_sort
00010020 g       .exceptions	00000000 alt_irq_entry
000177dc g     F .text	00000064 trprintf
000187cc g     F .text	00000024 __vfprintf_internal_unused
000196c8 g     F .text	00000054 I2C_init
00010020 g       *ABS*	00000000 __ram_exceptions_start
00017798 g     F .text	00000024 tr_debug
000198b4 g     F .text	00000004 alt_ic_isr_register
00010b54 g     F .text	000001f8 comm_received
0001b0fc g       *ABS*	00000000 _edata
0001d924 g       *ABS*	00000000 _end
0001018c g       *ABS*	00000000 __ram_exceptions_end
0001c44c g     O .bss	00000004 pRX_Status
000198f8 g     F .text	00000040 alt_ic_irq_disable
0001808c g     F .text	0000005c .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00017840 g     F .text	0000016c get_version
0001c450 g     O .bss	00000004 pRX_Config
0001001c g       .entry	00000000 _exit
00019810 g     F .text	00000094 alt_alarm_start
000189c8 g     F .text	0000001c strlen
00017290 g     F .text	00000064 timer_main
00011b74 g     F .text	00000038 abs
000198a8 g     F .text	0000000c alt_icache_flush_all
00019ddc g     O .rwdata	000001e0 my_table
0001b0ec g     O .rwdata	00000004 alt_priority_mask
000198b8 g     F .text	00000040 alt_ic_irq_enable
00018f94 g     F .text	00000024 __vfprintf_internal
0001b0f4 g     O .rwdata	00000008 alt_alarm_list
0001d7a4 g     O .bss	00000080 _pid_Temp
000190ac g     F .text	000000f8 alt_load
000197b8 g     F .text	00000058 I2C_write



Disassembly of section .entry:

00010000 <__reset>:
   10000:	00808014 	movui	r2,512
   10004:	1001483a 	initi	r2
   10008:	10bff804 	addi	r2,r2,-32
   1000c:	00bffd16 	blt	zero,r2,10004 <__alt_mem_onchip_memory_nios_arm+0xfffc0004>
   10010:	00400074 	movhi	at,1
   10014:	08406314 	ori	at,at,396
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory_nios_cpu-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
   10020:	deffed04 	addi	sp,sp,-76
   10024:	dfc00015 	stw	ra,0(sp)
   10028:	d8400215 	stw	at,8(sp)
   1002c:	d8800315 	stw	r2,12(sp)
   10030:	d8c00415 	stw	r3,16(sp)
   10034:	d9000515 	stw	r4,20(sp)
   10038:	d9400615 	stw	r5,24(sp)
   1003c:	d9800715 	stw	r6,28(sp)
   10040:	d9c00815 	stw	r7,32(sp)
   10044:	000b307a 	rdctl	r5,estatus
   10048:	da000915 	stw	r8,36(sp)
   1004c:	da400a15 	stw	r9,40(sp)
   10050:	da800b15 	stw	r10,44(sp)
   10054:	dac00c15 	stw	r11,48(sp)
   10058:	db000d15 	stw	r12,52(sp)
   1005c:	db400e15 	stw	r13,56(sp)
   10060:	db800f15 	stw	r14,60(sp)
   10064:	dbc01015 	stw	r15,64(sp)
   10068:	d9401115 	stw	r5,68(sp)
   1006c:	ebffff04 	addi	r15,ea,-4
   10070:	dbc01215 	stw	r15,72(sp)
   10074:	0009313a 	rdctl	r4,ipending
   10078:	2880004c 	andi	r2,r5,1
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
   10084:	00100fc0 	call	100fc <alt_irq_handler>
   10088:	00000706 	br	100a8 <alt_exception+0x88>
   1008c:	df401215 	stw	ea,72(sp)
   10090:	e8bfff17 	ldw	r2,-4(ea)
   10094:	e93fff04 	addi	r4,ea,-4
   10098:	00101600 	call	10160 <alt_instruction_exception_entry>
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>
   100a0:	ebffff04 	addi	r15,ea,-4
   100a4:	dbc01215 	stw	r15,72(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
   100ac:	df401217 	ldw	ea,72(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)
   100b4:	2801707a 	wrctl	estatus,r5
   100b8:	d8400217 	ldw	at,8(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)
   100d4:	da000917 	ldw	r8,36(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
   100f4:	dec01304 	addi	sp,sp,76
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
   10108:	0009313a 	rdctl	r4,ipending
   1010c:	040000b4 	movhi	r16,2
   10110:	84360904 	addi	r16,r16,-10204
   10114:	0005883a 	mov	r2,zero
   10118:	00c00044 	movi	r3,1
   1011c:	190a703a 	and	r5,r3,r4
   10120:	28000c26 	beq	r5,zero,10154 <alt_irq_handler+0x58>
   10124:	100490fa 	slli	r2,r2,3
   10128:	8087883a 	add	r3,r16,r2
   1012c:	1805883a 	mov	r2,r3
   10130:	11000117 	ldw	r4,4(r2)
   10134:	18c00017 	ldw	r3,0(r3)
   10138:	183ee83a 	callr	r3
   1013c:	0009313a 	rdctl	r4,ipending
   10140:	203ff41e 	bne	r4,zero,10114 <__alt_mem_onchip_memory_nios_arm+0xfffc0114>
   10144:	dfc00117 	ldw	ra,4(sp)
   10148:	dc000017 	ldw	r16,0(sp)
   1014c:	dec00204 	addi	sp,sp,8
   10150:	f800283a 	ret
   10154:	18c7883a 	add	r3,r3,r3
   10158:	10800044 	addi	r2,r2,1
   1015c:	003fef06 	br	1011c <__alt_mem_onchip_memory_nios_arm+0xfffc011c>

00010160 <alt_instruction_exception_entry>:
   10160:	200b883a 	mov	r5,r4
   10164:	000531fa 	rdctl	r2,exception
   10168:	000d333a 	rdctl	r6,badaddr
   1016c:	d0e4ef17 	ldw	r3,-27716(gp)
   10170:	18000326 	beq	r3,zero,10180 <alt_instruction_exception_entry+0x20>
   10174:	11001f0c 	andi	r4,r2,124
   10178:	2008d0ba 	srli	r4,r4,2
   1017c:	1800683a 	jmp	r3
   10180:	003da03a 	break	0
   10184:	0005883a 	mov	r2,zero
   10188:	f800283a 	ret

Disassembly of section .text:

0001018c <_start>:
   1018c:	06c000b4 	movhi	sp,2
   10190:	dec00014 	ori	sp,sp,0
   10194:	068000b4 	movhi	gp,2
   10198:	d68c3514 	ori	gp,gp,12500
   1019c:	00800074 	movhi	r2,1
   101a0:	10b10714 	ori	r2,r2,50204
   101a4:	00c00074 	movhi	r3,1
   101a8:	18f64914 	ori	r3,r3,55588
   101ac:	10c00326 	beq	r2,r3,101bc <_start+0x30>
   101b0:	10000015 	stw	zero,0(r2)
   101b4:	10800104 	addi	r2,r2,4
   101b8:	10fffd36 	bltu	r2,r3,101b0 <__alt_mem_onchip_memory_nios_arm+0xfffc01b0>
   101bc:	00190ac0 	call	190ac <alt_load>
   101c0:	00191a40 	call	191a4 <alt_main>

000101c4 <alt_after_alt_main>:
   101c4:	003fff06 	br	101c4 <__alt_mem_onchip_memory_nios_arm+0xfffc01c4>

000101c8 <init_AMC7891>:
#include "sys/alt_alarm.h"
#include "AMC7891.h"
#include "fpga_def_fluid.h"

int init_AMC7891(int base)
{
   101c8:	defffc04 	addi	sp,sp,-16
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13fff15 	stw	r4,-4(fp)
	int i;
	int readback=0;
   101d8:	e03ffe15 	stw	zero,-8(fp)

	// OLD: FluidBoard (AVALON_SPI_AMC7891_0_BASE) + HeaterBoard (AVALON_SPI_AMC7891_1_BASE)
	// NEW: FluidBoard (AVALON2FPGA_SLAVE_0_BASE)  + HeaterBoard (AVALON_SPI_AMC7891_1_BASE)

	if (base == AVALON2FPGA_SLAVE_0_BASE) {
   101dc:	e0bfff17 	ldw	r2,-4(fp)
   101e0:	10808018 	cmpnei	r2,r2,512
   101e4:	10000c1e 	bne	r2,zero,10218 <init_AMC7891+0x50>
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ENABLE_RDWR, 0);
   101e8:	0007883a 	mov	r3,zero
   101ec:	008000b4 	movhi	r2,2
   101f0:	10840004 	addi	r2,r2,4096
   101f4:	10c0002d 	sthio	r3,0(r2)

		// delay to make sure bit is set correctly
		for (i = 0; i < 100; i++)
   101f8:	e03ffd15 	stw	zero,-12(fp)
   101fc:	00000306 	br	1020c <init_AMC7891+0x44>
   10200:	e0bffd17 	ldw	r2,-12(fp)
   10204:	10800044 	addi	r2,r2,1
   10208:	e0bffd15 	stw	r2,-12(fp)
   1020c:	e0bffd17 	ldw	r2,-12(fp)
   10210:	10801910 	cmplti	r2,r2,100
   10214:	103ffa1e 	bne	r2,zero,10200 <__alt_mem_onchip_memory_nios_arm+0xfffc0200>
	}

	// Writing 0x6600 to this register forces a reset operation.
	// During reset, all SPI communication is blocked.
	// After issuing the reset, there is a wait of at least 30 us before communication can be resumed.
	IOWR_16DIRECT(base,AMC7891_AMC_RESET,0x6600);
   10218:	e0bfff17 	ldw	r2,-4(fp)
   1021c:	10801e04 	addi	r2,r2,120
   10220:	1007883a 	mov	r3,r2
   10224:	00998004 	movi	r2,26112
   10228:	1880002d 	sthio	r2,0(r3)

	readback=IORD_16DIRECT(base, AMC7891_AMC_ID);	//first call is not valid
   1022c:	e0bfff17 	ldw	r2,-4(fp)
   10230:	10802004 	addi	r2,r2,128
   10234:	1080002b 	ldhuio	r2,0(r2)
   10238:	10bfffcc 	andi	r2,r2,65535
   1023c:	e0bffe15 	stw	r2,-8(fp)
	readback=IORD_16DIRECT(base, AMC7891_AMC_ID);
   10240:	e0bfff17 	ldw	r2,-4(fp)
   10244:	10802004 	addi	r2,r2,128
   10248:	1080002b 	ldhuio	r2,0(r2)
   1024c:	10bfffcc 	andi	r2,r2,65535
   10250:	e0bffe15 	stw	r2,-8(fp)

	if(readback!=AMC_ID_VALUE)	//check AMC7891 ID
   10254:	e0bffe17 	ldw	r2,-8(fp)
   10258:	10801120 	cmpeqi	r2,r2,68
   1025c:	1000021e 	bne	r2,zero,10268 <init_AMC7891+0xa0>
	{
		return (1);				// AMC SPI COMMUNICATION ERROR
   10260:	00800044 	movi	r2,1
   10264:	00004d06 	br	1039c <init_AMC7891+0x1d4>
		IOWR_16DIRECT(AVALON_SPI_AMC7891_0_BASE,AMC7891_GPIO_CONFIG,0x00FF);	// I/O definition 0->In / 1->Out
		IOWR_16DIRECT(AVALON_SPI_AMC7891_0_BASE,AMC7891_ADC_ENABLE,0x6D00);		// ADC 0-4 enabled
		IOWR_16DIRECT(AVALON_SPI_AMC7891_0_BASE,AMC7891_ADC_GAIN,0xF800);		// ADC 0-4 gain x 2
		IOWR_16DIRECT(AVALON_SPI_AMC7891_0_BASE,AMC7891_AMC_CONFIG,0x3000);		// ADC Trigger
	}*/
	if(base == AVALON2FPGA_SLAVE_0_BASE)			//FluidBoard
   10268:	e0bfff17 	ldw	r2,-4(fp)
   1026c:	10808018 	cmpnei	r2,r2,512
   10270:	1000341e 	bne	r2,zero,10344 <init_AMC7891+0x17c>
	{
		IOWR_16DIRECT(AVALON2FPGA_SLAVE_0_BASE, AMC7891_AMC_POWER,   0x7E00); // ADC On / Ref On / DAC 0-3 On
   10274:	00df8004 	movi	r3,32256
   10278:	00809d84 	movi	r2,630
   1027c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AVALON2FPGA_SLAVE_0_BASE, AMC7891_GPIO_CONFIG, 0x00FF); // I/O definition 0->In / 1->Out
   10280:	00c03fc4 	movi	r3,255
   10284:	00809984 	movi	r2,614
   10288:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AVALON2FPGA_SLAVE_0_BASE, AMC7891_ADC_ENABLE,  0x6D00); // ADC 0-4 enabled
   1028c:	00db4004 	movi	r3,27904
   10290:	00809b84 	movi	r2,622
   10294:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AVALON2FPGA_SLAVE_0_BASE, AMC7891_ADC_GAIN,    0xF800); // ADC 0-4 gain x 2
   10298:	00fe0004 	movi	r3,-2048
   1029c:	00809c04 	movi	r2,624
   102a0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AVALON2FPGA_SLAVE_0_BASE, AMC7891_AMC_CONFIG,  0x3000); // ADC Trigger
   102a4:	00cc0004 	movi	r3,12288
   102a8:	00809b04 	movi	r2,620
   102ac:	10c0002d 	sthio	r3,0(r2)

		// Give control of AMC7891 to FPGA
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ENABLE_RDWR, 1);
   102b0:	00c00044 	movi	r3,1
   102b4:	008000b4 	movhi	r2,2
   102b8:	10840004 	addi	r2,r2,4096
   102bc:	10c0002d 	sthio	r3,0(r2)

		// Set threshold values for
		IOWR_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_THRESH_0, 400);
   102c0:	00c06404 	movi	r3,400
   102c4:	008000b4 	movhi	r2,2
   102c8:	10840604 	addi	r2,r2,4120
   102cc:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_THRESH_1, 400);
   102d0:	00c06404 	movi	r3,400
   102d4:	008000b4 	movhi	r2,2
   102d8:	10840704 	addi	r2,r2,4124
   102dc:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_THRESH_2, 400);
   102e0:	00c06404 	movi	r3,400
   102e4:	008000b4 	movhi	r2,2
   102e8:	10840804 	addi	r2,r2,4128
   102ec:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_THRESH_3, 400);
   102f0:	00c06404 	movi	r3,400
   102f4:	008000b4 	movhi	r2,2
   102f8:	10840904 	addi	r2,r2,4132
   102fc:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_THRESH_4, 400);
   10300:	00c06404 	movi	r3,400
   10304:	008000b4 	movhi	r2,2
   10308:	10840a04 	addi	r2,r2,4136
   1030c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_THRESH_5, 400);
   10310:	00c06404 	movi	r3,400
   10314:	008000b4 	movhi	r2,2
   10318:	10840b04 	addi	r2,r2,4140
   1031c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_THRESH_6, 400);
   10320:	00c06404 	movi	r3,400
   10324:	008000b4 	movhi	r2,2
   10328:	10840c04 	addi	r2,r2,4144
   1032c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_THRESH_7, 400);
   10330:	00c06404 	movi	r3,400
   10334:	008000b4 	movhi	r2,2
   10338:	10840d04 	addi	r2,r2,4148
   1033c:	10c0002d 	sthio	r3,0(r2)
   10340:	00001506 	br	10398 <init_AMC7891+0x1d0>

	}
	else if(base==AVALON_SPI_AMC7891_1_BASE)	//HeaterBoard
   10344:	e0bfff17 	ldw	r2,-4(fp)
   10348:	10804018 	cmpnei	r2,r2,256
   1034c:	1000101e 	bne	r2,zero,10390 <init_AMC7891+0x1c8>
	{
		IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_AMC_POWER,	0x6000);	// ADC On / Ref On / DAC Off
   10350:	00d80004 	movi	r3,24576
   10354:	00805d84 	movi	r2,374
   10358:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_GPIO_CONFIG,0x0FF);		// I/O definition  0->In / 1->Out
   1035c:	00c03fc4 	movi	r3,255
   10360:	00805984 	movi	r2,358
   10364:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_ADC_ENABLE,	0x6DE0);	// ADC 0 - 7 enabled
   10368:	00db7804 	movi	r3,28128
   1036c:	00805b84 	movi	r2,366
   10370:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_ADC_GAIN,	0xFF00);	// ADC 0 - 7 gain x 2
   10374:	00ffc004 	movi	r3,-256
   10378:	00805c04 	movi	r2,368
   1037c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_AMC_CONFIG,	0x3000);	// ADC Trigger
   10380:	00cc0004 	movi	r3,12288
   10384:	00805b04 	movi	r2,364
   10388:	10c0002d 	sthio	r3,0(r2)
   1038c:	00000206 	br	10398 <init_AMC7891+0x1d0>
	}
	else
	{
		return (2);				//not supported AMC BASE ADR.
   10390:	00800084 	movi	r2,2
   10394:	00000106 	br	1039c <init_AMC7891+0x1d4>
	}

	return 0;
   10398:	0005883a 	mov	r2,zero
}
   1039c:	e037883a 	mov	sp,fp
   103a0:	df000017 	ldw	fp,0(sp)
   103a4:	dec00104 	addi	sp,sp,4
   103a8:	f800283a 	ret

000103ac <init_MAX31865>:
#include "io.h"
#include "sys/alt_alarm.h"
#include "MAX31865.h"

void init_MAX31865(void)
{
   103ac:	defffe04 	addi	sp,sp,-8
   103b0:	df000115 	stw	fp,4(sp)
   103b4:	df000104 	addi	fp,sp,4
	int		count;

	for(count = 0 ; count < MAX_PT100 ; count++)
   103b8:	e03fff15 	stw	zero,-4(fp)
   103bc:	00001f06 	br	1043c <init_MAX31865+0x90>
	{
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_CONFIG, 0xC1);				// Configuration vbias='1'; conversion auto ='1'; 50Hz='1'; => 1100 0001
   103c0:	e0bfff17 	ldw	r2,-4(fp)
   103c4:	10800c04 	addi	r2,r2,48
   103c8:	1004913a 	slli	r2,r2,4
   103cc:	1007883a 	mov	r3,r2
   103d0:	00bff044 	movi	r2,-63
   103d4:	18800025 	stbio	r2,0(r3)
//		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_CONFIG, 0xD1);				// Configuration vbias='1'; conversion auto ='1'; two_wires='1'; 50Hz='1'; => 1101 0001
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_FAULT_HTHR_MSB, 0xFF);		// High Fault Threshold
   103d8:	e0bfff17 	ldw	r2,-4(fp)
   103dc:	1004913a 	slli	r2,r2,4
   103e0:	1080c0c4 	addi	r2,r2,771
   103e4:	1007883a 	mov	r3,r2
   103e8:	00bfffc4 	movi	r2,-1
   103ec:	18800025 	stbio	r2,0(r3)
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_FAULT_HTHR_LSB, 0xFF);		// High Fault Threshold
   103f0:	e0bfff17 	ldw	r2,-4(fp)
   103f4:	1004913a 	slli	r2,r2,4
   103f8:	1080c104 	addi	r2,r2,772
   103fc:	1007883a 	mov	r3,r2
   10400:	00bfffc4 	movi	r2,-1
   10404:	18800025 	stbio	r2,0(r3)
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_FAULT_LTHR_MSB, 0x00);		// Low Fault Threshold
   10408:	e0bfff17 	ldw	r2,-4(fp)
   1040c:	1004913a 	slli	r2,r2,4
   10410:	1080c144 	addi	r2,r2,773
   10414:	0007883a 	mov	r3,zero
   10418:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_FAULT_LTHR_LSB, 0x00);		// Low Fault Threshold
   1041c:	e0bfff17 	ldw	r2,-4(fp)
   10420:	1004913a 	slli	r2,r2,4
   10424:	1080c184 	addi	r2,r2,774
   10428:	0007883a 	mov	r3,zero
   1042c:	10c00025 	stbio	r3,0(r2)

void init_MAX31865(void)
{
	int		count;

	for(count = 0 ; count < MAX_PT100 ; count++)
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	10800044 	addi	r2,r2,1
   10438:	e0bfff15 	stw	r2,-4(fp)
   1043c:	e0bfff17 	ldw	r2,-4(fp)
   10440:	10800190 	cmplti	r2,r2,6
   10444:	103fde1e 	bne	r2,zero,103c0 <__alt_mem_onchip_memory_nios_arm+0xfffc03c0>
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_FAULT_HTHR_MSB, 0xFF);		// High Fault Threshold
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_FAULT_HTHR_LSB, 0xFF);		// High Fault Threshold
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_FAULT_LTHR_MSB, 0x00);		// Low Fault Threshold
		IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_FAULT_LTHR_LSB, 0x00);		// Low Fault Threshold
	}
}
   10448:	e037883a 	mov	sp,fp
   1044c:	df000017 	ldw	fp,0(sp)
   10450:	dec00104 	addi	sp,sp,4
   10454:	f800283a 	ret

00010458 <Main_adc_polling>:
 ** \brief  ADC0 single conversion start
 **
 ** \return  uint32_t   ADC result
 ******************************************************************************/
alt_u32 Main_adc_polling(alt_u32 value)
{
   10458:	defffb04 	addi	sp,sp,-20
   1045c:	dfc00415 	stw	ra,16(sp)
   10460:	df000315 	stw	fp,12(sp)
   10464:	df000304 	addi	fp,sp,12
   10468:	e13fff15 	stw	r4,-4(fp)
	int result=0;
   1046c:	e03ffd15 	stw	zero,-12(fp)
	int tableSize=SIZEOF(my_table);
   10470:	00800f04 	movi	r2,60
   10474:	e0bffe15 	stw	r2,-8(fp)

	result=_dsp_lookup_f(my_table, value, 0, tableSize-1);
   10478:	e0bffe17 	ldw	r2,-8(fp)
   1047c:	10bfffc4 	addi	r2,r2,-1
   10480:	010000b4 	movhi	r4,2
   10484:	21277704 	addi	r4,r4,-25124
   10488:	e17fff17 	ldw	r5,-4(fp)
   1048c:	000d883a 	mov	r6,zero
   10490:	100f883a 	mov	r7,r2
   10494:	00104fc0 	call	104fc <_dsp_lookup_f>
   10498:	e0bffd15 	stw	r2,-12(fp)
	if((result==my_table[0].y)||(result==my_table[tableSize-1].y))
   1049c:	e0fffd17 	ldw	r3,-12(fp)
   104a0:	008000b4 	movhi	r2,2
   104a4:	10a77704 	addi	r2,r2,-25124
   104a8:	10800117 	ldw	r2,4(r2)
   104ac:	18800a26 	beq	r3,r2,104d8 <Main_adc_polling+0x80>
   104b0:	e0fffd17 	ldw	r3,-12(fp)
   104b4:	e0bffe17 	ldw	r2,-8(fp)
   104b8:	113fffc4 	addi	r4,r2,-1
   104bc:	008000b4 	movhi	r2,2
   104c0:	10a77704 	addi	r2,r2,-25124
   104c4:	200890fa 	slli	r4,r4,3
   104c8:	21000104 	addi	r4,r4,4
   104cc:	1105883a 	add	r2,r2,r4
   104d0:	10800017 	ldw	r2,0(r2)
   104d4:	1880031e 	bne	r3,r2,104e4 <Main_adc_polling+0x8c>
	{
		return INVALID_VALUE;
   104d8:	009555b4 	movhi	r2,21846
   104dc:	10aaaa84 	addi	r2,r2,-21846
   104e0:	00000106 	br	104e8 <Main_adc_polling+0x90>
	}
	else
	{
		return result;
   104e4:	e0bffd17 	ldw	r2,-12(fp)
	}
}
   104e8:	e037883a 	mov	sp,fp
   104ec:	dfc00117 	ldw	ra,4(sp)
   104f0:	df000017 	ldw	fp,0(sp)
   104f4:	dec00204 	addi	sp,sp,8
   104f8:	f800283a 	ret

000104fc <_dsp_lookup_f>:
 ** \brief  thermistor lookup table
 **
 ** \return  uint32_t   ADC result
 ******************************************************************************/
static alt_u32 _dsp_lookup_f(const dsp_lookup_f_t * table, alt_u32 x, alt_u32 min_y, alt_u32 max_y)
{
   104fc:	defff604 	addi	sp,sp,-40
   10500:	dfc00915 	stw	ra,36(sp)
   10504:	df000815 	stw	fp,32(sp)
   10508:	df000804 	addi	fp,sp,32
   1050c:	e13ffc15 	stw	r4,-16(fp)
   10510:	e17ffd15 	stw	r5,-12(fp)
   10514:	e1bffe15 	stw	r6,-8(fp)
   10518:	e1ffff15 	stw	r7,-4(fp)
	alt_u32 i=0;
   1051c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 m, delta_x, delta_y;

	for(i=min_y; (x<table[i].x)&&(i<max_y);)			//find the two points in the table to use
   10520:	e0bffe17 	ldw	r2,-8(fp)
   10524:	e0bff815 	stw	r2,-32(fp)
   10528:	00000306 	br	10538 <_dsp_lookup_f+0x3c>
	{
		i++;
   1052c:	e0bff817 	ldw	r2,-32(fp)
   10530:	10800044 	addi	r2,r2,1
   10534:	e0bff815 	stw	r2,-32(fp)
static alt_u32 _dsp_lookup_f(const dsp_lookup_f_t * table, alt_u32 x, alt_u32 min_y, alt_u32 max_y)
{
	alt_u32 i=0;
	alt_u32 m, delta_x, delta_y;

	for(i=min_y; (x<table[i].x)&&(i<max_y);)			//find the two points in the table to use
   10538:	e0bff817 	ldw	r2,-32(fp)
   1053c:	100490fa 	slli	r2,r2,3
   10540:	e0fffc17 	ldw	r3,-16(fp)
   10544:	1885883a 	add	r2,r3,r2
   10548:	10800017 	ldw	r2,0(r2)
   1054c:	e0fffd17 	ldw	r3,-12(fp)
   10550:	1880032e 	bgeu	r3,r2,10560 <_dsp_lookup_f+0x64>
   10554:	e0fff817 	ldw	r3,-32(fp)
   10558:	e0bfff17 	ldw	r2,-4(fp)
   1055c:	18bff336 	bltu	r3,r2,1052c <__alt_mem_onchip_memory_nios_arm+0xfffc052c>
	{
		i++;
	}
	if ( i >= max_y )									//make sure the point isn't past the end of the table
   10560:	e0fff817 	ldw	r3,-32(fp)
   10564:	e0bfff17 	ldw	r2,-4(fp)
   10568:	18800636 	bltu	r3,r2,10584 <_dsp_lookup_f+0x88>
	{
		return table[max_y].y;
   1056c:	e0bfff17 	ldw	r2,-4(fp)
   10570:	100490fa 	slli	r2,r2,3
   10574:	e0fffc17 	ldw	r3,-16(fp)
   10578:	1885883a 	add	r2,r3,r2
   1057c:	10800117 	ldw	r2,4(r2)
   10580:	00004c06 	br	106b4 <_dsp_lookup_f+0x1b8>
	}

	if ( i <= min_y )									//make sure the point isn't before the beginning of the table
   10584:	e0bff817 	ldw	r2,-32(fp)
   10588:	e0fffe17 	ldw	r3,-8(fp)
   1058c:	18800636 	bltu	r3,r2,105a8 <_dsp_lookup_f+0xac>
	{
		return table[min_y].y;
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	100490fa 	slli	r2,r2,3
   10598:	e0fffc17 	ldw	r3,-16(fp)
   1059c:	1885883a 	add	r2,r3,r2
   105a0:	10800117 	ldw	r2,4(r2)
   105a4:	00004306 	br	106b4 <_dsp_lookup_f+0x1b8>
	}

	delta_x =table[i-1].x - table[i].x;
   105a8:	e0bff817 	ldw	r2,-32(fp)
   105ac:	100490fa 	slli	r2,r2,3
   105b0:	10bffe04 	addi	r2,r2,-8
   105b4:	e0fffc17 	ldw	r3,-16(fp)
   105b8:	1885883a 	add	r2,r3,r2
   105bc:	10c00017 	ldw	r3,0(r2)
   105c0:	e0bff817 	ldw	r2,-32(fp)
   105c4:	100490fa 	slli	r2,r2,3
   105c8:	e13ffc17 	ldw	r4,-16(fp)
   105cc:	2085883a 	add	r2,r4,r2
   105d0:	10800017 	ldw	r2,0(r2)
   105d4:	1885c83a 	sub	r2,r3,r2
   105d8:	e0bffa15 	stw	r2,-24(fp)
	delta_y =table[i].y - table[i-1].y;
   105dc:	e0bff817 	ldw	r2,-32(fp)
   105e0:	100490fa 	slli	r2,r2,3
   105e4:	e0fffc17 	ldw	r3,-16(fp)
   105e8:	1885883a 	add	r2,r3,r2
   105ec:	10c00117 	ldw	r3,4(r2)
   105f0:	e0bff817 	ldw	r2,-32(fp)
   105f4:	100490fa 	slli	r2,r2,3
   105f8:	10bffe04 	addi	r2,r2,-8
   105fc:	e13ffc17 	ldw	r4,-16(fp)
   10600:	2085883a 	add	r2,r4,r2
   10604:	10800117 	ldw	r2,4(r2)
   10608:	1885c83a 	sub	r2,r3,r2
   1060c:	e0bffb15 	stw	r2,-20(fp)
	if (delta_x==0) return INVALID_VALUE;
   10610:	e0bffa17 	ldw	r2,-24(fp)
   10614:	1000031e 	bne	r2,zero,10624 <_dsp_lookup_f+0x128>
   10618:	009555b4 	movhi	r2,21846
   1061c:	10aaaa84 	addi	r2,r2,-21846
   10620:	00002406 	br	106b4 <_dsp_lookup_f+0x1b8>
	m= (delta_y/delta_x);
   10624:	e13ffb17 	ldw	r4,-20(fp)
   10628:	e17ffa17 	ldw	r5,-24(fp)
   1062c:	00180e80 	call	180e8 <__udivsi3>
   10630:	e0bff915 	stw	r2,-28(fp)
	m=table[i-1].y-(x - table[i-1].x)*m;
   10634:	e0bff817 	ldw	r2,-32(fp)
   10638:	100490fa 	slli	r2,r2,3
   1063c:	10bffe04 	addi	r2,r2,-8
   10640:	e0fffc17 	ldw	r3,-16(fp)
   10644:	1885883a 	add	r2,r3,r2
   10648:	10c00117 	ldw	r3,4(r2)
   1064c:	e0bff817 	ldw	r2,-32(fp)
   10650:	100490fa 	slli	r2,r2,3
   10654:	10bffe04 	addi	r2,r2,-8
   10658:	e13ffc17 	ldw	r4,-16(fp)
   1065c:	2085883a 	add	r2,r4,r2
   10660:	10800017 	ldw	r2,0(r2)
   10664:	e13ffd17 	ldw	r4,-12(fp)
   10668:	2089c83a 	sub	r4,r4,r2
   1066c:	e0bff917 	ldw	r2,-28(fp)
   10670:	2085383a 	mul	r2,r4,r2
   10674:	1885c83a 	sub	r2,r3,r2
   10678:	e0bff915 	stw	r2,-28(fp)
	if(m>table[max_y].y)
   1067c:	e0bfff17 	ldw	r2,-4(fp)
   10680:	100490fa 	slli	r2,r2,3
   10684:	e0fffc17 	ldw	r3,-16(fp)
   10688:	1885883a 	add	r2,r3,r2
   1068c:	10c00117 	ldw	r3,4(r2)
   10690:	e0bff917 	ldw	r2,-28(fp)
   10694:	1880062e 	bgeu	r3,r2,106b0 <_dsp_lookup_f+0x1b4>
	{
		m=table[max_y].y;
   10698:	e0bfff17 	ldw	r2,-4(fp)
   1069c:	100490fa 	slli	r2,r2,3
   106a0:	e0fffc17 	ldw	r3,-16(fp)
   106a4:	1885883a 	add	r2,r3,r2
   106a8:	10800117 	ldw	r2,4(r2)
   106ac:	e0bff915 	stw	r2,-28(fp)
	}
	return m;
   106b0:	e0bff917 	ldw	r2,-28(fp)
	// y = y0 + (x - x0) * ((y1 - y0)/(x1-x0)) where x0, x1 are nearest values of input x
  // y0, y1 are nearest values to output y
}
   106b4:	e037883a 	mov	sp,fp
   106b8:	dfc00117 	ldw	ra,4(sp)
   106bc:	df000017 	ldw	fp,0(sp)
   106c0:	dec00204 	addi	sp,sp,8
   106c4:	f800283a 	ret

000106c8 <selection_sort>:
 *
 * \param array     Pointer to array to sort
 * \param len       Length of array
 **/
void selection_sort(INT32 *array, int len)
{
   106c8:	defff904 	addi	sp,sp,-28
   106cc:	df000615 	stw	fp,24(sp)
   106d0:	df000604 	addi	fp,sp,24
   106d4:	e13ffe15 	stw	r4,-8(fp)
   106d8:	e17fff15 	stw	r5,-4(fp)
    int x = 0;
   106dc:	e03ffa15 	stw	zero,-24(fp)
    int y = 0;
   106e0:	e03ffb15 	stw	zero,-20(fp)
    int min = 0;
   106e4:	e03ffc15 	stw	zero,-16(fp)
    int temp = 0;
   106e8:	e03ffd15 	stw	zero,-12(fp)
    
	for(x = 0; x < len; x++) {
   106ec:	e03ffa15 	stw	zero,-24(fp)
   106f0:	00003d06 	br	107e8 <selection_sort+0x120>
		min = x;
   106f4:	e0bffa17 	ldw	r2,-24(fp)
   106f8:	e0bffc15 	stw	r2,-16(fp)

		for(y = x; y < len; y++) {
   106fc:	e0bffa17 	ldw	r2,-24(fp)
   10700:	e0bffb15 	stw	r2,-20(fp)
   10704:	00001406 	br	10758 <selection_sort+0x90>
			if(array[min] > array[y]) {
   10708:	e0bffc17 	ldw	r2,-16(fp)
   1070c:	1085883a 	add	r2,r2,r2
   10710:	1085883a 	add	r2,r2,r2
   10714:	1007883a 	mov	r3,r2
   10718:	e0bffe17 	ldw	r2,-8(fp)
   1071c:	10c5883a 	add	r2,r2,r3
   10720:	10c00017 	ldw	r3,0(r2)
   10724:	e0bffb17 	ldw	r2,-20(fp)
   10728:	1085883a 	add	r2,r2,r2
   1072c:	1085883a 	add	r2,r2,r2
   10730:	1009883a 	mov	r4,r2
   10734:	e0bffe17 	ldw	r2,-8(fp)
   10738:	1105883a 	add	r2,r2,r4
   1073c:	10800017 	ldw	r2,0(r2)
   10740:	10c0020e 	bge	r2,r3,1074c <selection_sort+0x84>
				min = y;
   10744:	e0bffb17 	ldw	r2,-20(fp)
   10748:	e0bffc15 	stw	r2,-16(fp)
    int temp = 0;
    
	for(x = 0; x < len; x++) {
		min = x;

		for(y = x; y < len; y++) {
   1074c:	e0bffb17 	ldw	r2,-20(fp)
   10750:	10800044 	addi	r2,r2,1
   10754:	e0bffb15 	stw	r2,-20(fp)
   10758:	e0fffb17 	ldw	r3,-20(fp)
   1075c:	e0bfff17 	ldw	r2,-4(fp)
   10760:	18bfe916 	blt	r3,r2,10708 <__alt_mem_onchip_memory_nios_arm+0xfffc0708>
			if(array[min] > array[y]) {
				min = y;
			}
		}
		// swap
		temp = array[x];
   10764:	e0bffa17 	ldw	r2,-24(fp)
   10768:	1085883a 	add	r2,r2,r2
   1076c:	1085883a 	add	r2,r2,r2
   10770:	1007883a 	mov	r3,r2
   10774:	e0bffe17 	ldw	r2,-8(fp)
   10778:	10c5883a 	add	r2,r2,r3
   1077c:	10800017 	ldw	r2,0(r2)
   10780:	e0bffd15 	stw	r2,-12(fp)
		array[x] = array[min];
   10784:	e0bffa17 	ldw	r2,-24(fp)
   10788:	1085883a 	add	r2,r2,r2
   1078c:	1085883a 	add	r2,r2,r2
   10790:	1007883a 	mov	r3,r2
   10794:	e0bffe17 	ldw	r2,-8(fp)
   10798:	10c7883a 	add	r3,r2,r3
   1079c:	e0bffc17 	ldw	r2,-16(fp)
   107a0:	1085883a 	add	r2,r2,r2
   107a4:	1085883a 	add	r2,r2,r2
   107a8:	1009883a 	mov	r4,r2
   107ac:	e0bffe17 	ldw	r2,-8(fp)
   107b0:	1105883a 	add	r2,r2,r4
   107b4:	10800017 	ldw	r2,0(r2)
   107b8:	18800015 	stw	r2,0(r3)
		array[min] = temp;
   107bc:	e0bffc17 	ldw	r2,-16(fp)
   107c0:	1085883a 	add	r2,r2,r2
   107c4:	1085883a 	add	r2,r2,r2
   107c8:	1007883a 	mov	r3,r2
   107cc:	e0bffe17 	ldw	r2,-8(fp)
   107d0:	10c5883a 	add	r2,r2,r3
   107d4:	e0fffd17 	ldw	r3,-12(fp)
   107d8:	10c00015 	stw	r3,0(r2)
    int x = 0;
    int y = 0;
    int min = 0;
    int temp = 0;
    
	for(x = 0; x < len; x++) {
   107dc:	e0bffa17 	ldw	r2,-24(fp)
   107e0:	10800044 	addi	r2,r2,1
   107e4:	e0bffa15 	stw	r2,-24(fp)
   107e8:	e0fffa17 	ldw	r3,-24(fp)
   107ec:	e0bfff17 	ldw	r2,-4(fp)
   107f0:	18bfc016 	blt	r3,r2,106f4 <__alt_mem_onchip_memory_nios_arm+0xfffc06f4>
		// swap
		temp = array[x];
		array[x] = array[min];
		array[min] = temp;
	}
}
   107f4:	e037883a 	mov	sp,fp
   107f8:	df000017 	ldw	fp,0(sp)
   107fc:	dec00104 	addi	sp,sp,4
   10800:	f800283a 	ret

00010804 <average>:
 * \param cut       Number of array items to cut from beginning and end
 *
 * \return calculated average value
 **/
INT32 average (INT32 *buffer, unsigned int len, unsigned int cut)
{
   10804:	defff404 	addi	sp,sp,-48
   10808:	dfc00b15 	stw	ra,44(sp)
   1080c:	df000a15 	stw	fp,40(sp)
   10810:	dcc00915 	stw	r19,36(sp)
   10814:	dc800815 	stw	r18,32(sp)
   10818:	dc400715 	stw	r17,28(sp)
   1081c:	dc000615 	stw	r16,24(sp)
   10820:	df000a04 	addi	fp,sp,40
   10824:	e13ff915 	stw	r4,-28(fp)
   10828:	e17ffa15 	stw	r5,-24(fp)
   1082c:	e1bffb15 	stw	r6,-20(fp)
    int i = 0;
   10830:	e03ff615 	stw	zero,-40(fp)
	INT64 sum = 0;
   10834:	e03ff715 	stw	zero,-36(fp)
   10838:	e03ff815 	stw	zero,-32(fp)
	
	if (cut >= len / 2)
   1083c:	e0bffa17 	ldw	r2,-24(fp)
   10840:	1004d07a 	srli	r2,r2,1
   10844:	e0fffb17 	ldw	r3,-20(fp)
   10848:	18800236 	bltu	r3,r2,10854 <average+0x50>
		cut = 0;
   1084c:	e03ffb15 	stw	zero,-20(fp)
   10850:	00000406 	br	10864 <average+0x60>
    else
        selection_sort(buffer, len);
   10854:	e0bffa17 	ldw	r2,-24(fp)
   10858:	e13ff917 	ldw	r4,-28(fp)
   1085c:	100b883a 	mov	r5,r2
   10860:	00106c80 	call	106c8 <selection_sort>
	
	for (i = cut; i < (len - cut); i++)
   10864:	e0bffb17 	ldw	r2,-20(fp)
   10868:	e0bff615 	stw	r2,-40(fp)
   1086c:	00001606 	br	108c8 <average+0xc4>
		sum += buffer[i];
   10870:	e0bff617 	ldw	r2,-40(fp)
   10874:	1085883a 	add	r2,r2,r2
   10878:	1085883a 	add	r2,r2,r2
   1087c:	1007883a 	mov	r3,r2
   10880:	e0bff917 	ldw	r2,-28(fp)
   10884:	10c5883a 	add	r2,r2,r3
   10888:	10800017 	ldw	r2,0(r2)
   1088c:	1021883a 	mov	r16,r2
   10890:	1005d7fa 	srai	r2,r2,31
   10894:	1023883a 	mov	r17,r2
   10898:	e13ff717 	ldw	r4,-36(fp)
   1089c:	e17ff817 	ldw	r5,-32(fp)
   108a0:	2405883a 	add	r2,r4,r16
   108a4:	110d803a 	cmpltu	r6,r2,r4
   108a8:	2c47883a 	add	r3,r5,r17
   108ac:	30c9883a 	add	r4,r6,r3
   108b0:	2007883a 	mov	r3,r4
   108b4:	e0bff715 	stw	r2,-36(fp)
   108b8:	e0fff815 	stw	r3,-32(fp)
	if (cut >= len / 2)
		cut = 0;
    else
        selection_sort(buffer, len);
	
	for (i = cut; i < (len - cut); i++)
   108bc:	e0bff617 	ldw	r2,-40(fp)
   108c0:	10800044 	addi	r2,r2,1
   108c4:	e0bff615 	stw	r2,-40(fp)
   108c8:	e0fff617 	ldw	r3,-40(fp)
   108cc:	e13ffa17 	ldw	r4,-24(fp)
   108d0:	e0bffb17 	ldw	r2,-20(fp)
   108d4:	2085c83a 	sub	r2,r4,r2
   108d8:	18bfe536 	bltu	r3,r2,10870 <__alt_mem_onchip_memory_nios_arm+0xfffc0870>
		sum += buffer[i];

	sum /= (len - (cut << 1));
   108dc:	e0bffb17 	ldw	r2,-20(fp)
   108e0:	1085883a 	add	r2,r2,r2
   108e4:	1007883a 	mov	r3,r2
   108e8:	e0bffa17 	ldw	r2,-24(fp)
   108ec:	10c5c83a 	sub	r2,r2,r3
   108f0:	1025883a 	mov	r18,r2
   108f4:	0027883a 	mov	r19,zero
   108f8:	e13ff717 	ldw	r4,-36(fp)
   108fc:	e17ff817 	ldw	r5,-32(fp)
   10900:	900d883a 	mov	r6,r18
   10904:	980f883a 	mov	r7,r19
   10908:	00179ac0 	call	179ac <__divdi3>
   1090c:	1009883a 	mov	r4,r2
   10910:	180b883a 	mov	r5,r3
   10914:	e13ff715 	stw	r4,-36(fp)
   10918:	e17ff815 	stw	r5,-32(fp)
	
	return (INT32)sum;
   1091c:	e0bff717 	ldw	r2,-36(fp)
}
   10920:	e6fffc04 	addi	sp,fp,-16
   10924:	dfc00517 	ldw	ra,20(sp)
   10928:	df000417 	ldw	fp,16(sp)
   1092c:	dcc00317 	ldw	r19,12(sp)
   10930:	dc800217 	ldw	r18,8(sp)
   10934:	dc400117 	ldw	r17,4(sp)
   10938:	dc000017 	ldw	r16,0(sp)
   1093c:	dec00604 	addi	sp,sp,24
   10940:	f800283a 	ret

00010944 <comm_init>:

//--- prototypes -------------------------------------------

//--- comm_init ----------------------------------------------
void comm_init(int commNo)
{
   10944:	defffd04 	addi	sp,sp,-12
   10948:	dfc00215 	stw	ra,8(sp)
   1094c:	df000115 	stw	fp,4(sp)
   10950:	df000104 	addi	fp,sp,4
   10954:	e13fff15 	stw	r4,-4(fp)
	memset(&_Comm[commNo], 0, sizeof(_Comm[commNo]));
   10958:	e0bfff17 	ldw	r2,-4(fp)
   1095c:	10c08324 	muli	r3,r2,524
   10960:	008000b4 	movhi	r2,2
   10964:	10b12504 	addi	r2,r2,-15212
   10968:	1885883a 	add	r2,r3,r2
   1096c:	1009883a 	mov	r4,r2
   10970:	000b883a 	mov	r5,zero
   10974:	01808304 	movi	r6,524
   10978:	00181200 	call	18120 <memset>
}
   1097c:	e037883a 	mov	sp,fp
   10980:	dfc00117 	ldw	ra,4(sp)
   10984:	df000017 	ldw	fp,0(sp)
   10988:	dec00204 	addi	sp,sp,8
   1098c:	f800283a 	ret

00010990 <comm_encode>:

//--- comm_encode --------------------------------------------
int comm_encode(void *pin, int inlen, UCHAR *pbuf, int bufsize, int *pbuflen)
{
   10990:	defff704 	addi	sp,sp,-36
   10994:	df000815 	stw	fp,32(sp)
   10998:	df000804 	addi	fp,sp,32
   1099c:	e13ffc15 	stw	r4,-16(fp)
   109a0:	e17ffd15 	stw	r5,-12(fp)
   109a4:	e1bffe15 	stw	r6,-8(fp)
   109a8:	e1ffff15 	stw	r7,-4(fp)
	char *in;
	char crc=0;
   109ac:	e03ff905 	stb	zero,-28(fp)
	int len=0;
   109b0:	e03ffa15 	stw	zero,-24(fp)
	int pos=0;
   109b4:	e03ffb15 	stw	zero,-20(fp)

	if (bufsize<2*inlen + 3 + 2) return FALSE;
   109b8:	e0bffd17 	ldw	r2,-12(fp)
   109bc:	1085883a 	add	r2,r2,r2
   109c0:	10800144 	addi	r2,r2,5
   109c4:	e0ffff17 	ldw	r3,-4(fp)
   109c8:	1880020e 	bge	r3,r2,109d4 <comm_encode+0x44>
   109cc:	0005883a 	mov	r2,zero
   109d0:	00005c06 	br	10b44 <comm_encode+0x1b4>

	pbuf[len++]=STX;
   109d4:	e0bffa17 	ldw	r2,-24(fp)
   109d8:	10c00044 	addi	r3,r2,1
   109dc:	e0fffa15 	stw	r3,-24(fp)
   109e0:	1007883a 	mov	r3,r2
   109e4:	e0bffe17 	ldw	r2,-8(fp)
   109e8:	10c5883a 	add	r2,r2,r3
   109ec:	00c00084 	movi	r3,2
   109f0:	10c00005 	stb	r3,0(r2)
	for (in=pin; inlen; inlen--, in++)
   109f4:	e0bffc17 	ldw	r2,-16(fp)
   109f8:	e0bff815 	stw	r2,-32(fp)
   109fc:	00002e06 	br	10ab8 <comm_encode+0x128>
	{
		crc += ((*in)+(++pos));
   10a00:	e0bff817 	ldw	r2,-32(fp)
   10a04:	10800003 	ldbu	r2,0(r2)
   10a08:	10c03fcc 	andi	r3,r2,255
   10a0c:	18c0201c 	xori	r3,r3,128
   10a10:	18ffe004 	addi	r3,r3,-128
   10a14:	e0bffb17 	ldw	r2,-20(fp)
   10a18:	10800044 	addi	r2,r2,1
   10a1c:	e0bffb15 	stw	r2,-20(fp)
   10a20:	e0bffb17 	ldw	r2,-20(fp)
   10a24:	1885883a 	add	r2,r3,r2
   10a28:	1007883a 	mov	r3,r2
   10a2c:	e0bff903 	ldbu	r2,-28(fp)
   10a30:	1885883a 	add	r2,r3,r2
   10a34:	e0bff905 	stb	r2,-28(fp)
		pbuf[len++] = 'A' + (((*in)&0xf0)>>4);
   10a38:	e0bffa17 	ldw	r2,-24(fp)
   10a3c:	10c00044 	addi	r3,r2,1
   10a40:	e0fffa15 	stw	r3,-24(fp)
   10a44:	1007883a 	mov	r3,r2
   10a48:	e0bffe17 	ldw	r2,-8(fp)
   10a4c:	10c5883a 	add	r2,r2,r3
   10a50:	e0fff817 	ldw	r3,-32(fp)
   10a54:	18c00003 	ldbu	r3,0(r3)
   10a58:	18c03fcc 	andi	r3,r3,255
   10a5c:	18c0201c 	xori	r3,r3,128
   10a60:	18ffe004 	addi	r3,r3,-128
   10a64:	18c03c0c 	andi	r3,r3,240
   10a68:	1807d13a 	srai	r3,r3,4
   10a6c:	18c01044 	addi	r3,r3,65
   10a70:	10c00005 	stb	r3,0(r2)
		pbuf[len++] = 'a' + ((*in)&0x0f);
   10a74:	e0bffa17 	ldw	r2,-24(fp)
   10a78:	10c00044 	addi	r3,r2,1
   10a7c:	e0fffa15 	stw	r3,-24(fp)
   10a80:	1007883a 	mov	r3,r2
   10a84:	e0bffe17 	ldw	r2,-8(fp)
   10a88:	10c5883a 	add	r2,r2,r3
   10a8c:	e0fff817 	ldw	r3,-32(fp)
   10a90:	18c00003 	ldbu	r3,0(r3)
   10a94:	18c003cc 	andi	r3,r3,15
   10a98:	18c01844 	addi	r3,r3,97
   10a9c:	10c00005 	stb	r3,0(r2)
	int pos=0;

	if (bufsize<2*inlen + 3 + 2) return FALSE;

	pbuf[len++]=STX;
	for (in=pin; inlen; inlen--, in++)
   10aa0:	e0bffd17 	ldw	r2,-12(fp)
   10aa4:	10bfffc4 	addi	r2,r2,-1
   10aa8:	e0bffd15 	stw	r2,-12(fp)
   10aac:	e0bff817 	ldw	r2,-32(fp)
   10ab0:	10800044 	addi	r2,r2,1
   10ab4:	e0bff815 	stw	r2,-32(fp)
   10ab8:	e0bffd17 	ldw	r2,-12(fp)
   10abc:	103fd01e 	bne	r2,zero,10a00 <__alt_mem_onchip_memory_nios_arm+0xfffc0a00>
	{
		crc += ((*in)+(++pos));
		pbuf[len++] = 'A' + (((*in)&0xf0)>>4);
		pbuf[len++] = 'a' + ((*in)&0x0f);
	}
	pbuf[len++] = 'A' + ((crc&0xf0)>>4);
   10ac0:	e0bffa17 	ldw	r2,-24(fp)
   10ac4:	10c00044 	addi	r3,r2,1
   10ac8:	e0fffa15 	stw	r3,-24(fp)
   10acc:	1007883a 	mov	r3,r2
   10ad0:	e0bffe17 	ldw	r2,-8(fp)
   10ad4:	10c5883a 	add	r2,r2,r3
   10ad8:	e0fff907 	ldb	r3,-28(fp)
   10adc:	18c03c0c 	andi	r3,r3,240
   10ae0:	1807d13a 	srai	r3,r3,4
   10ae4:	18c01044 	addi	r3,r3,65
   10ae8:	10c00005 	stb	r3,0(r2)
	pbuf[len++] = 'a' + (crc&0x0f);
   10aec:	e0bffa17 	ldw	r2,-24(fp)
   10af0:	10c00044 	addi	r3,r2,1
   10af4:	e0fffa15 	stw	r3,-24(fp)
   10af8:	1007883a 	mov	r3,r2
   10afc:	e0bffe17 	ldw	r2,-8(fp)
   10b00:	10c5883a 	add	r2,r2,r3
   10b04:	e0fff903 	ldbu	r3,-28(fp)
   10b08:	18c003cc 	andi	r3,r3,15
   10b0c:	18c01844 	addi	r3,r3,97
   10b10:	10c00005 	stb	r3,0(r2)
	pbuf[len++] = ETX;
   10b14:	e0bffa17 	ldw	r2,-24(fp)
   10b18:	10c00044 	addi	r3,r2,1
   10b1c:	e0fffa15 	stw	r3,-24(fp)
   10b20:	1007883a 	mov	r3,r2
   10b24:	e0bffe17 	ldw	r2,-8(fp)
   10b28:	10c5883a 	add	r2,r2,r3
   10b2c:	00c000c4 	movi	r3,3
   10b30:	10c00005 	stb	r3,0(r2)

	*pbuflen = len;
   10b34:	e0800117 	ldw	r2,4(fp)
   10b38:	e0fffa17 	ldw	r3,-24(fp)
   10b3c:	10c00015 	stw	r3,0(r2)
	return TRUE;
   10b40:	00800044 	movi	r2,1
}
   10b44:	e037883a 	mov	sp,fp
   10b48:	df000017 	ldw	fp,0(sp)
   10b4c:	dec00104 	addi	sp,sp,4
   10b50:	f800283a 	ret

00010b54 <comm_received>:

//--- comm_received --------------------------------------------
int  comm_received(int commNo, char ch)
{
   10b54:	defffb04 	addi	sp,sp,-20
   10b58:	dfc00415 	stw	ra,16(sp)
   10b5c:	df000315 	stw	fp,12(sp)
   10b60:	df000304 	addi	fp,sp,12
   10b64:	e13ffe15 	stw	r4,-8(fp)
   10b68:	2805883a 	mov	r2,r5
   10b6c:	e0bfff05 	stb	r2,-4(fp)
	SComm *comm = &_Comm[commNo];
   10b70:	e0bffe17 	ldw	r2,-8(fp)
   10b74:	10c08324 	muli	r3,r2,524
   10b78:	008000b4 	movhi	r2,2
   10b7c:	10b12504 	addi	r2,r2,-15212
   10b80:	1885883a 	add	r2,r3,r2
   10b84:	e0bffd15 	stw	r2,-12(fp)
	if (ch==STX)
   10b88:	e0bfff07 	ldb	r2,-4(fp)
   10b8c:	10800098 	cmpnei	r2,r2,2
   10b90:	1000061e 	bne	r2,zero,10bac <comm_received+0x58>
	{
		memset(comm, 0, sizeof(SComm));
   10b94:	e13ffd17 	ldw	r4,-12(fp)
   10b98:	000b883a 	mov	r5,zero
   10b9c:	01808304 	movi	r6,524
   10ba0:	00181200 	call	18120 <memset>
		return FALSE;
   10ba4:	0005883a 	mov	r2,zero
   10ba8:	00006306 	br	10d38 <comm_received+0x1e4>
	}

	if (ch==ETX)
   10bac:	e0bfff07 	ldb	r2,-4(fp)
   10bb0:	108000d8 	cmpnei	r2,r2,3
   10bb4:	1000201e 	bne	r2,zero,10c38 <comm_received+0xe4>
	{
		if (comm->commBufLen>0)
   10bb8:	e0bffd17 	ldw	r2,-12(fp)
   10bbc:	10800017 	ldw	r2,0(r2)
   10bc0:	00801b0e 	bge	zero,r2,10c30 <comm_received+0xdc>
		{
			if (comm->data==comm->crc)
   10bc4:	e0bffd17 	ldw	r2,-12(fp)
   10bc8:	10c08243 	ldbu	r3,521(r2)
   10bcc:	e0bffd17 	ldw	r2,-12(fp)
   10bd0:	10808203 	ldbu	r2,520(r2)
   10bd4:	18c03fcc 	andi	r3,r3,255
   10bd8:	18c0201c 	xori	r3,r3,128
   10bdc:	18ffe004 	addi	r3,r3,-128
   10be0:	10803fcc 	andi	r2,r2,255
   10be4:	1080201c 	xori	r2,r2,128
   10be8:	10bfe004 	addi	r2,r2,-128
   10bec:	18800a1e 	bne	r3,r2,10c18 <comm_received+0xc4>
			{
				comm->commBufLen--; // crc was counted!
   10bf0:	e0bffd17 	ldw	r2,-12(fp)
   10bf4:	10800017 	ldw	r2,0(r2)
   10bf8:	10ffffc4 	addi	r3,r2,-1
   10bfc:	e0bffd17 	ldw	r2,-12(fp)
   10c00:	10c00015 	stw	r3,0(r2)
				comm->bufOk = TRUE;
   10c04:	e0bffd17 	ldw	r2,-12(fp)
   10c08:	00c00044 	movi	r3,1
   10c0c:	10c00115 	stw	r3,4(r2)
				//	arm_ptr->stat.cond[commNo].error.uart_read_error=0;
				return TRUE;
   10c10:	00800044 	movi	r2,1
   10c14:	00004806 	br	10d38 <comm_received+0x1e4>
			else
			{
				//	printf("Checksum Error\n");
				//	arm_ptr->stat.cond[commNo].error.uart_read_error+=1;
				//	arm_ptr->stat.cond[commNo].error.checksum_error+=1;
				memset(comm, 0, sizeof(SComm));
   10c18:	e13ffd17 	ldw	r4,-12(fp)
   10c1c:	000b883a 	mov	r5,zero
   10c20:	01808304 	movi	r6,524
   10c24:	00181200 	call	18120 <memset>
				return FALSE;
   10c28:	0005883a 	mov	r2,zero
   10c2c:	00004206 	br	10d38 <comm_received+0x1e4>
			}
		}
		return FALSE;
   10c30:	0005883a 	mov	r2,zero
   10c34:	00004006 	br	10d38 <comm_received+0x1e4>
	}

	if (comm->commBufLen>=COMM_BUF_SIZE)
   10c38:	e0bffd17 	ldw	r2,-12(fp)
   10c3c:	10800017 	ldw	r2,0(r2)
   10c40:	10808010 	cmplti	r2,r2,512
   10c44:	1000041e 	bne	r2,zero,10c58 <comm_received+0x104>
	{
		//printf("buffer overflow\n");
		comm_init(commNo);
   10c48:	e13ffe17 	ldw	r4,-8(fp)
   10c4c:	00109440 	call	10944 <comm_init>
		//	arm_ptr->stat.cond[commNo].error.uart_read_error+=1;
		//	arm_ptr->stat.cond[commNo].error.buffer_overflow+=1;
		return FALSE;
   10c50:	0005883a 	mov	r2,zero
   10c54:	00003806 	br	10d38 <comm_received+0x1e4>
	}

	if (ch>='A' && ch<'Z')
   10c58:	e0bfff07 	ldb	r2,-4(fp)
   10c5c:	10801050 	cmplti	r2,r2,65
   10c60:	10001a1e 	bne	r2,zero,10ccc <comm_received+0x178>
   10c64:	e0bfff07 	ldb	r2,-4(fp)
   10c68:	10801688 	cmpgei	r2,r2,90
   10c6c:	1000171e 	bne	r2,zero,10ccc <comm_received+0x178>
	{
		if (comm->commBufLen) comm->crc += (comm->data+comm->commBufLen);		
   10c70:	e0bffd17 	ldw	r2,-12(fp)
   10c74:	10800017 	ldw	r2,0(r2)
   10c78:	10000d26 	beq	r2,zero,10cb0 <comm_received+0x15c>
   10c7c:	e0bffd17 	ldw	r2,-12(fp)
   10c80:	10808203 	ldbu	r2,520(r2)
   10c84:	1007883a 	mov	r3,r2
   10c88:	e0bffd17 	ldw	r2,-12(fp)
   10c8c:	10808243 	ldbu	r2,521(r2)
   10c90:	1009883a 	mov	r4,r2
   10c94:	e0bffd17 	ldw	r2,-12(fp)
   10c98:	10800017 	ldw	r2,0(r2)
   10c9c:	2085883a 	add	r2,r4,r2
   10ca0:	1885883a 	add	r2,r3,r2
   10ca4:	1007883a 	mov	r3,r2
   10ca8:	e0bffd17 	ldw	r2,-12(fp)
   10cac:	10c08205 	stb	r3,520(r2)
		comm->data=((ch-'A')&0x0f)<<4;
   10cb0:	e0bfff07 	ldb	r2,-4(fp)
   10cb4:	10bfefc4 	addi	r2,r2,-65
   10cb8:	1004913a 	slli	r2,r2,4
   10cbc:	1007883a 	mov	r3,r2
   10cc0:	e0bffd17 	ldw	r2,-12(fp)
   10cc4:	10c08245 	stb	r3,521(r2)
   10cc8:	00001a06 	br	10d34 <comm_received+0x1e0>
	}
	else if (ch>='a' && ch<'z')
   10ccc:	e0bfff07 	ldb	r2,-4(fp)
   10cd0:	10801850 	cmplti	r2,r2,97
   10cd4:	1000171e 	bne	r2,zero,10d34 <comm_received+0x1e0>
   10cd8:	e0bfff07 	ldb	r2,-4(fp)
   10cdc:	10801e88 	cmpgei	r2,r2,122
   10ce0:	1000141e 	bne	r2,zero,10d34 <comm_received+0x1e0>
	{
		comm->data |= ((ch-'a') & 0x0f);
   10ce4:	e0bffd17 	ldw	r2,-12(fp)
   10ce8:	10808243 	ldbu	r2,521(r2)
   10cec:	e0ffff03 	ldbu	r3,-4(fp)
   10cf0:	18ffe7c4 	addi	r3,r3,-97
   10cf4:	18c003cc 	andi	r3,r3,15
   10cf8:	10c4b03a 	or	r2,r2,r3
   10cfc:	1007883a 	mov	r3,r2
   10d00:	e0bffd17 	ldw	r2,-12(fp)
   10d04:	10c08245 	stb	r3,521(r2)
		comm->commBuf[comm->commBufLen++] = comm->data;
   10d08:	e0bffd17 	ldw	r2,-12(fp)
   10d0c:	10800017 	ldw	r2,0(r2)
   10d10:	11000044 	addi	r4,r2,1
   10d14:	e0fffd17 	ldw	r3,-12(fp)
   10d18:	19000015 	stw	r4,0(r3)
   10d1c:	e0fffd17 	ldw	r3,-12(fp)
   10d20:	18c08243 	ldbu	r3,521(r3)
   10d24:	e13ffd17 	ldw	r4,-12(fp)
   10d28:	2085883a 	add	r2,r4,r2
   10d2c:	10800204 	addi	r2,r2,8
   10d30:	10c00005 	stb	r3,0(r2)
	}
	return FALSE;
   10d34:	0005883a 	mov	r2,zero
}
   10d38:	e037883a 	mov	sp,fp
   10d3c:	dfc00117 	ldw	ra,4(sp)
   10d40:	df000017 	ldw	fp,0(sp)
   10d44:	dec00204 	addi	sp,sp,8
   10d48:	f800283a 	ret

00010d4c <comm_get_data>:

//--- comm_get_data -----------------------------------
int	 comm_get_data(int commNo, UCHAR *pbuf, int bufsize, int *pbuflen)
{
   10d4c:	defff904 	addi	sp,sp,-28
   10d50:	dfc00615 	stw	ra,24(sp)
   10d54:	df000515 	stw	fp,20(sp)
   10d58:	df000504 	addi	fp,sp,20
   10d5c:	e13ffc15 	stw	r4,-16(fp)
   10d60:	e17ffd15 	stw	r5,-12(fp)
   10d64:	e1bffe15 	stw	r6,-8(fp)
   10d68:	e1ffff15 	stw	r7,-4(fp)
	SComm *comm = &_Comm[commNo];
   10d6c:	e0bffc17 	ldw	r2,-16(fp)
   10d70:	10c08324 	muli	r3,r2,524
   10d74:	008000b4 	movhi	r2,2
   10d78:	10b12504 	addi	r2,r2,-15212
   10d7c:	1885883a 	add	r2,r3,r2
   10d80:	e0bffb15 	stw	r2,-20(fp)
	if (!comm->bufOk)  return FALSE;
   10d84:	e0bffb17 	ldw	r2,-20(fp)
   10d88:	10800117 	ldw	r2,4(r2)
   10d8c:	1000021e 	bne	r2,zero,10d98 <comm_get_data+0x4c>
   10d90:	0005883a 	mov	r2,zero
   10d94:	00001306 	br	10de4 <comm_get_data+0x98>
	if (bufsize<comm->commBufLen) return FALSE;
   10d98:	e0bffb17 	ldw	r2,-20(fp)
   10d9c:	10800017 	ldw	r2,0(r2)
   10da0:	e0fffe17 	ldw	r3,-8(fp)
   10da4:	1880020e 	bge	r3,r2,10db0 <comm_get_data+0x64>
   10da8:	0005883a 	mov	r2,zero
   10dac:	00000d06 	br	10de4 <comm_get_data+0x98>
	memcpy(pbuf, comm->commBuf, comm->commBufLen);
   10db0:	e0bffb17 	ldw	r2,-20(fp)
   10db4:	10c00204 	addi	r3,r2,8
   10db8:	e0bffb17 	ldw	r2,-20(fp)
   10dbc:	10800017 	ldw	r2,0(r2)
   10dc0:	e13ffd17 	ldw	r4,-12(fp)
   10dc4:	180b883a 	mov	r5,r3
   10dc8:	100d883a 	mov	r6,r2
   10dcc:	00180f80 	call	180f8 <memcpy>
	(*pbuflen) = comm->commBufLen;
   10dd0:	e0bffb17 	ldw	r2,-20(fp)
   10dd4:	10c00017 	ldw	r3,0(r2)
   10dd8:	e0bfff17 	ldw	r2,-4(fp)
   10ddc:	10c00015 	stw	r3,0(r2)
	return TRUE;
   10de0:	00800044 	movi	r2,1
}
   10de4:	e037883a 	mov	sp,fp
   10de8:	dfc00117 	ldw	ra,4(sp)
   10dec:	df000017 	ldw	fp,0(sp)
   10df0:	dec00204 	addi	sp,sp,8
   10df4:	f800283a 	ret

00010df8 <fifo_init>:

//--- prototypes --------------------------------------------------------------static void InitMfs0(UINT32 baudrate);

//--- fifo_init ---------------------------------
void fifo_init(SFifo *pfifo)
{
   10df8:	defffd04 	addi	sp,sp,-12
   10dfc:	dfc00215 	stw	ra,8(sp)
   10e00:	df000115 	stw	fp,4(sp)
   10e04:	df000104 	addi	fp,sp,4
   10e08:	e13fff15 	stw	r4,-4(fp)
	memset(pfifo, 0, sizeof(SFifo));
   10e0c:	e13fff17 	ldw	r4,-4(fp)
   10e10:	000b883a 	mov	r5,zero
   10e14:	01810204 	movi	r6,1032
   10e18:	00181200 	call	18120 <memset>
}
   10e1c:	e037883a 	mov	sp,fp
   10e20:	dfc00117 	ldw	ra,4(sp)
   10e24:	df000017 	ldw	fp,0(sp)
   10e28:	dec00204 	addi	sp,sp,8
   10e2c:	f800283a 	ret

00010e30 <fifo_put>:

//--- fifo_put -------------------------------------
int fifo_put(SFifo *pfifo, UCHAR *data, int count)
{
   10e30:	defffb04 	addi	sp,sp,-20
   10e34:	df000415 	stw	fp,16(sp)
   10e38:	df000404 	addi	fp,sp,16
   10e3c:	e13ffd15 	stw	r4,-12(fp)
   10e40:	e17ffe15 	stw	r5,-8(fp)
   10e44:	e1bfff15 	stw	r6,-4(fp)
	int idx;
	if (!count) return FALSE;
   10e48:	e0bfff17 	ldw	r2,-4(fp)
   10e4c:	1000021e 	bne	r2,zero,10e58 <fifo_put+0x28>
   10e50:	0005883a 	mov	r2,zero
   10e54:	00002406 	br	10ee8 <fifo_put+0xb8>
	for(idx = pfifo->wrIdx; count; count--, data++)
   10e58:	e0bffd17 	ldw	r2,-12(fp)
   10e5c:	10800017 	ldw	r2,0(r2)
   10e60:	e0bffc15 	stw	r2,-16(fp)
   10e64:	00001a06 	br	10ed0 <fifo_put+0xa0>
	{
		pfifo->data[idx++] = *data;
   10e68:	e0bffc17 	ldw	r2,-16(fp)
   10e6c:	10c00044 	addi	r3,r2,1
   10e70:	e0fffc15 	stw	r3,-16(fp)
   10e74:	e0fffe17 	ldw	r3,-8(fp)
   10e78:	18c00003 	ldbu	r3,0(r3)
   10e7c:	1809883a 	mov	r4,r3
   10e80:	e0fffd17 	ldw	r3,-12(fp)
   10e84:	1885883a 	add	r2,r3,r2
   10e88:	10800204 	addi	r2,r2,8
   10e8c:	11000005 	stb	r4,0(r2)
		if (idx>=FIFO_SIZE) idx=0;
   10e90:	e0bffc17 	ldw	r2,-16(fp)
   10e94:	10810010 	cmplti	r2,r2,1024
   10e98:	1000011e 	bne	r2,zero,10ea0 <fifo_put+0x70>
   10e9c:	e03ffc15 	stw	zero,-16(fp)
		if (idx==pfifo->rdIdx) 
   10ea0:	e0bffd17 	ldw	r2,-12(fp)
   10ea4:	10c00117 	ldw	r3,4(r2)
   10ea8:	e0bffc17 	ldw	r2,-16(fp)
   10eac:	1880021e 	bne	r3,r2,10eb8 <fifo_put+0x88>
			return FALSE;
   10eb0:	0005883a 	mov	r2,zero
   10eb4:	00000c06 	br	10ee8 <fifo_put+0xb8>
//--- fifo_put -------------------------------------
int fifo_put(SFifo *pfifo, UCHAR *data, int count)
{
	int idx;
	if (!count) return FALSE;
	for(idx = pfifo->wrIdx; count; count--, data++)
   10eb8:	e0bfff17 	ldw	r2,-4(fp)
   10ebc:	10bfffc4 	addi	r2,r2,-1
   10ec0:	e0bfff15 	stw	r2,-4(fp)
   10ec4:	e0bffe17 	ldw	r2,-8(fp)
   10ec8:	10800044 	addi	r2,r2,1
   10ecc:	e0bffe15 	stw	r2,-8(fp)
   10ed0:	e0bfff17 	ldw	r2,-4(fp)
   10ed4:	103fe41e 	bne	r2,zero,10e68 <__alt_mem_onchip_memory_nios_arm+0xfffc0e68>
		pfifo->data[idx++] = *data;
		if (idx>=FIFO_SIZE) idx=0;
		if (idx==pfifo->rdIdx) 
			return FALSE;
	}
	pfifo->wrIdx = idx;
   10ed8:	e0bffd17 	ldw	r2,-12(fp)
   10edc:	e0fffc17 	ldw	r3,-16(fp)
   10ee0:	10c00015 	stw	r3,0(r2)
	return TRUE;
   10ee4:	00800044 	movi	r2,1
}
   10ee8:	e037883a 	mov	sp,fp
   10eec:	df000017 	ldw	fp,0(sp)
   10ef0:	dec00104 	addi	sp,sp,4
   10ef4:	f800283a 	ret

00010ef8 <fifo_get>:

//--- fifo_get -----------------------------------
int fifo_get(SFifo *pfifo, UCHAR *data)
{
   10ef8:	defffc04 	addi	sp,sp,-16
   10efc:	df000315 	stw	fp,12(sp)
   10f00:	df000304 	addi	fp,sp,12
   10f04:	e13ffe15 	stw	r4,-8(fp)
   10f08:	e17fff15 	stw	r5,-4(fp)
	if (pfifo->rdIdx!=pfifo->wrIdx)
   10f0c:	e0bffe17 	ldw	r2,-8(fp)
   10f10:	10c00117 	ldw	r3,4(r2)
   10f14:	e0bffe17 	ldw	r2,-8(fp)
   10f18:	10800017 	ldw	r2,0(r2)
   10f1c:	18801826 	beq	r3,r2,10f80 <fifo_get+0x88>
	{
		int idx = pfifo->rdIdx+1;
   10f20:	e0bffe17 	ldw	r2,-8(fp)
   10f24:	10800117 	ldw	r2,4(r2)
   10f28:	10800044 	addi	r2,r2,1
   10f2c:	e0bffd15 	stw	r2,-12(fp)
		*data = pfifo->data[pfifo->rdIdx];
   10f30:	e0bffe17 	ldw	r2,-8(fp)
   10f34:	10800117 	ldw	r2,4(r2)
   10f38:	e0fffe17 	ldw	r3,-8(fp)
   10f3c:	1885883a 	add	r2,r3,r2
   10f40:	10800204 	addi	r2,r2,8
   10f44:	10800003 	ldbu	r2,0(r2)
   10f48:	1007883a 	mov	r3,r2
   10f4c:	e0bfff17 	ldw	r2,-4(fp)
   10f50:	10c00005 	stb	r3,0(r2)
		if (idx<FIFO_SIZE)
   10f54:	e0bffd17 	ldw	r2,-12(fp)
   10f58:	10810008 	cmpgei	r2,r2,1024
   10f5c:	1000041e 	bne	r2,zero,10f70 <fifo_get+0x78>
            pfifo->rdIdx = idx;
   10f60:	e0bffe17 	ldw	r2,-8(fp)
   10f64:	e0fffd17 	ldw	r3,-12(fp)
   10f68:	10c00115 	stw	r3,4(r2)
   10f6c:	00000206 	br	10f78 <fifo_get+0x80>
		else			   
            pfifo->rdIdx = 0;
   10f70:	e0bffe17 	ldw	r2,-8(fp)
   10f74:	10000115 	stw	zero,4(r2)
		return TRUE; 
   10f78:	00800044 	movi	r2,1
   10f7c:	00000106 	br	10f84 <fifo_get+0x8c>
	}
	return FALSE;
   10f80:	0005883a 	mov	r2,zero
}
   10f84:	e037883a 	mov	sp,fp
   10f88:	df000017 	ldw	fp,0(sp)
   10f8c:	dec00104 	addi	sp,sp,4
   10f90:	f800283a 	ret

00010f94 <heater_init>:
static void _set_heater_out(int i, int newState);


//--- init_heater --------------------------------------------
void heater_init(void)
{
   10f94:	defffd04 	addi	sp,sp,-12
   10f98:	dfc00215 	stw	ra,8(sp)
   10f9c:	df000115 	stw	fp,4(sp)
   10fa0:	df000104 	addi	fp,sp,4
	//int count, temp[HEATER_ANALOG_COUNT];
	IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_GPIO_OUT, HEATER_LED_ON); // All Heater off, LED on
   10fa4:	00c00404 	movi	r3,16
   10fa8:	00805a04 	movi	r2,360
   10fac:	10c0002d 	sthio	r3,0(r2)
	{
		temp[count] = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_ADC0_DATA + count) & 0x3ff;
		temp[count] = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_ADC0_DATA + count) & 0x3ff;
	}*/
	int i;
	for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   10fb0:	e03fff15 	stw	zero,-4(fp)
   10fb4:	00000606 	br	10fd0 <heater_init+0x3c>
	{
		_set_heater_out(i, FALSE);
   10fb8:	e13fff17 	ldw	r4,-4(fp)
   10fbc:	000b883a 	mov	r5,zero
   10fc0:	00119c00 	call	119c0 <_set_heater_out>
	{
		temp[count] = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_ADC0_DATA + count) & 0x3ff;
		temp[count] = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_ADC0_DATA + count) & 0x3ff;
	}*/
	int i;
	for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   10fc4:	e0bfff17 	ldw	r2,-4(fp)
   10fc8:	10800044 	addi	r2,r2,1
   10fcc:	e0bfff15 	stw	r2,-4(fp)
   10fd0:	e0bfff17 	ldw	r2,-4(fp)
   10fd4:	10800110 	cmplti	r2,r2,4
   10fd8:	103ff71e 	bne	r2,zero,10fb8 <__alt_mem_onchip_memory_nios_arm+0xfffc0fb8>
	{
		_set_heater_out(i, FALSE);
	}
}
   10fdc:	e037883a 	mov	sp,fp
   10fe0:	dfc00117 	ldw	ra,4(sp)
   10fe4:	df000017 	ldw	fp,0(sp)
   10fe8:	dec00204 	addi	sp,sp,8
   10fec:	f800283a 	ret

00010ff0 <heater_tick_10ms>:

//--- heater_tick_10ms ---------------------------------------------------------------
void heater_tick_10ms(void)
{
   10ff0:	defffa04 	addi	sp,sp,-24
   10ff4:	dfc00515 	stw	ra,20(sp)
   10ff8:	df000415 	stw	fp,16(sp)
   10ffc:	dc000315 	stw	r16,12(sp)
   11000:	df000404 	addi	fp,sp,16
	int 		i,j;
	alt_u16		temp;
	alt_u16 	heater_gpio_in;

	heater_gpio_in = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_GPIO_IN) & 0xfff;
   11004:	00805a84 	movi	r2,362
   11008:	1080002b 	ldhuio	r2,0(r2)
   1100c:	10bfffcc 	andi	r2,r2,65535
   11010:	1083ffcc 	andi	r2,r2,4095
   11014:	e0bffe0d 	sth	r2,-8(fp)
	heater_gpio_in = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_GPIO_IN) & 0xfff;
   11018:	00805a84 	movi	r2,362
   1101c:	1080002b 	ldhuio	r2,0(r2)
   11020:	10bfffcc 	andi	r2,r2,65535
   11024:	1083ffcc 	andi	r2,r2,4095
   11028:	e0bffe0d 	sth	r2,-8(fp)

	pRX_Status->heater_amc_temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_TEMP_DATA) & 0x3ff;
   1102c:	008000b4 	movhi	r2,2
   11030:	10b11304 	addi	r2,r2,-15284
   11034:	10800017 	ldw	r2,0(r2)
   11038:	00c04004 	movi	r3,256
   1103c:	18c0002b 	ldhuio	r3,0(r3)
   11040:	18ffffcc 	andi	r3,r3,65535
   11044:	18c0ffcc 	andi	r3,r3,1023
   11048:	10c01f15 	stw	r3,124(r2)
	pRX_Status->heater_amc_temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_TEMP_DATA) & 0x3ff;
   1104c:	008000b4 	movhi	r2,2
   11050:	10b11304 	addi	r2,r2,-15284
   11054:	10800017 	ldw	r2,0(r2)
   11058:	00c04004 	movi	r3,256
   1105c:	18c0002b 	ldhuio	r3,0(r3)
   11060:	18ffffcc 	andi	r3,r3,65535
   11064:	18c0ffcc 	andi	r3,r3,1023
   11068:	10c01f15 	stw	r3,124(r2)

	if (pRX_Status->info.is_shutdown)
   1106c:	008000b4 	movhi	r2,2
   11070:	10b11304 	addi	r2,r2,-15284
   11074:	10800017 	ldw	r2,0(r2)
   11078:	10800817 	ldw	r2,32(r2)
   1107c:	1080004c 	andi	r2,r2,1
   11080:	10000c26 	beq	r2,zero,110b4 <heater_tick_10ms+0xc4>
	{
		for(i=0 ; i<NIOS_INK_SUPPLY_CNT ; i++) _set_heater_out(i, FALSE);
   11084:	e03ffc15 	stw	zero,-16(fp)
   11088:	00000606 	br	110a4 <heater_tick_10ms+0xb4>
   1108c:	e13ffc17 	ldw	r4,-16(fp)
   11090:	000b883a 	mov	r5,zero
   11094:	00119c00 	call	119c0 <_set_heater_out>
   11098:	e0bffc17 	ldw	r2,-16(fp)
   1109c:	10800044 	addi	r2,r2,1
   110a0:	e0bffc15 	stw	r2,-16(fp)
   110a4:	e0bffc17 	ldw	r2,-16(fp)
   110a8:	10800110 	cmplti	r2,r2,4
   110ac:	103ff71e 	bne	r2,zero,1108c <__alt_mem_onchip_memory_nios_arm+0xfffc108c>
		return;
   110b0:	00023d06 	br	119a8 <heater_tick_10ms+0x9b8>
	}

	// Vsupply HeaterBoard
	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA) & 0x3ff;
   110b4:	00805184 	movi	r2,326
   110b8:	1080002b 	ldhuio	r2,0(r2)
   110bc:	10bfffcc 	andi	r2,r2,65535
   110c0:	1080ffcc 	andi	r2,r2,1023
   110c4:	e0bffe8d 	sth	r2,-6(fp)
	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA) & 0x3ff;
   110c8:	00805184 	movi	r2,326
   110cc:	1080002b 	ldhuio	r2,0(r2)
   110d0:	10bfffcc 	andi	r2,r2,65535
   110d4:	1080ffcc 	andi	r2,r2,1023
   110d8:	e0bffe8d 	sth	r2,-6(fp)
	pRX_Status->HeaterBoard_Vsupply_3V = temp * 5000 / 1024;
   110dc:	008000b4 	movhi	r2,2
   110e0:	10b11304 	addi	r2,r2,-15284
   110e4:	10c00017 	ldw	r3,0(r2)
   110e8:	e0bffe8b 	ldhu	r2,-6(fp)
   110ec:	1084e224 	muli	r2,r2,5000
   110f0:	1000010e 	bge	r2,zero,110f8 <heater_tick_10ms+0x108>
   110f4:	1080ffc4 	addi	r2,r2,1023
   110f8:	1005d2ba 	srai	r2,r2,10
   110fc:	188d1715 	stw	r2,13404(r3)

	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA + 2) & 0x3ff;
   11100:	00805204 	movi	r2,328
   11104:	1080002b 	ldhuio	r2,0(r2)
   11108:	10bfffcc 	andi	r2,r2,65535
   1110c:	1080ffcc 	andi	r2,r2,1023
   11110:	e0bffe8d 	sth	r2,-6(fp)
	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA + 2) & 0x3ff;
   11114:	00805204 	movi	r2,328
   11118:	1080002b 	ldhuio	r2,0(r2)
   1111c:	10bfffcc 	andi	r2,r2,65535
   11120:	1080ffcc 	andi	r2,r2,1023
   11124:	e0bffe8d 	sth	r2,-6(fp)
	pRX_Status->HeaterBoard_Vsupply_5V = temp * 5000 / 1024;
   11128:	008000b4 	movhi	r2,2
   1112c:	10b11304 	addi	r2,r2,-15284
   11130:	10c00017 	ldw	r3,0(r2)
   11134:	e0bffe8b 	ldhu	r2,-6(fp)
   11138:	1084e224 	muli	r2,r2,5000
   1113c:	1000010e 	bge	r2,zero,11144 <heater_tick_10ms+0x154>
   11140:	1080ffc4 	addi	r2,r2,1023
   11144:	1005d2ba 	srai	r2,r2,10
   11148:	188d1815 	stw	r2,13408(r3)

	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA + 4) & 0x3ff;
   1114c:	00805284 	movi	r2,330
   11150:	1080002b 	ldhuio	r2,0(r2)
   11154:	10bfffcc 	andi	r2,r2,65535
   11158:	1080ffcc 	andi	r2,r2,1023
   1115c:	e0bffe8d 	sth	r2,-6(fp)
	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA + 4) & 0x3ff;
   11160:	00805284 	movi	r2,330
   11164:	1080002b 	ldhuio	r2,0(r2)
   11168:	10bfffcc 	andi	r2,r2,65535
   1116c:	1080ffcc 	andi	r2,r2,1023
   11170:	e0bffe8d 	sth	r2,-6(fp)
	pRX_Status->HeaterBoard_Vsupply_24V = temp * 5000 / 1024 * 115 / 15;
   11174:	008000b4 	movhi	r2,2
   11178:	10b11304 	addi	r2,r2,-15284
   1117c:	14000017 	ldw	r16,0(r2)
   11180:	e0bffe8b 	ldhu	r2,-6(fp)
   11184:	1084e224 	muli	r2,r2,5000
   11188:	1000010e 	bge	r2,zero,11190 <heater_tick_10ms+0x1a0>
   1118c:	1080ffc4 	addi	r2,r2,1023
   11190:	1005d2ba 	srai	r2,r2,10
   11194:	10801ce4 	muli	r2,r2,115
   11198:	1009883a 	mov	r4,r2
   1119c:	014003c4 	movi	r5,15
   111a0:	00180380 	call	18038 <__divsi3>
   111a4:	808d1915 	stw	r2,13412(r16)

	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA + 6) & 0x3ff;
   111a8:	00805304 	movi	r2,332
   111ac:	1080002b 	ldhuio	r2,0(r2)
   111b0:	10bfffcc 	andi	r2,r2,65535
   111b4:	1080ffcc 	andi	r2,r2,1023
   111b8:	e0bffe8d 	sth	r2,-6(fp)
	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA + 6) & 0x3ff;
   111bc:	00805304 	movi	r2,332
   111c0:	1080002b 	ldhuio	r2,0(r2)
   111c4:	10bfffcc 	andi	r2,r2,65535
   111c8:	1080ffcc 	andi	r2,r2,1023
   111cc:	e0bffe8d 	sth	r2,-6(fp)
	pRX_Status->HeaterBoard_Vsupply_24VP = temp * 5000 / 1024 * 115 / 15;
   111d0:	008000b4 	movhi	r2,2
   111d4:	10b11304 	addi	r2,r2,-15284
   111d8:	14000017 	ldw	r16,0(r2)
   111dc:	e0bffe8b 	ldhu	r2,-6(fp)
   111e0:	1084e224 	muli	r2,r2,5000
   111e4:	1000010e 	bge	r2,zero,111ec <heater_tick_10ms+0x1fc>
   111e8:	1080ffc4 	addi	r2,r2,1023
   111ec:	1005d2ba 	srai	r2,r2,10
   111f0:	10801ce4 	muli	r2,r2,115
   111f4:	1009883a 	mov	r4,r2
   111f8:	014003c4 	movi	r5,15
   111fc:	00180380 	call	18038 <__divsi3>
   11200:	808d1a15 	stw	r2,13416(r16)

	// Thermistor Heaterboard
	for(i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   11204:	e03ffc15 	stw	zero,-16(fp)
   11208:	0001e406 	br	1199c <heater_tick_10ms+0x9ac>
	{
		if (((~heater_gpio_in)>>(8+i)) & 0x01)
   1120c:	e0bffe0b 	ldhu	r2,-8(fp)
   11210:	0086303a 	nor	r3,zero,r2
   11214:	e0bffc17 	ldw	r2,-16(fp)
   11218:	10800204 	addi	r2,r2,8
   1121c:	1885d83a 	sra	r2,r3,r2
   11220:	1080004c 	andi	r2,r2,1
   11224:	10002626 	beq	r2,zero,112c0 <heater_tick_10ms+0x2d0>
		{
			if(pRX_Config->ink_supply[i].heaterTempMax > 39000) pRX_Status->ink_supply[i].error |= err_heater_board;
   11228:	008000b4 	movhi	r2,2
   1122c:	10b11404 	addi	r2,r2,-15280
   11230:	10c00017 	ldw	r3,0(r2)
   11234:	e0bffc17 	ldw	r2,-16(fp)
   11238:	10801724 	muli	r2,r2,92
   1123c:	10801104 	addi	r2,r2,68
   11240:	1885883a 	add	r2,r3,r2
   11244:	10800017 	ldw	r2,0(r2)
   11248:	10a61670 	cmpltui	r2,r2,39001
   1124c:	1000111e 	bne	r2,zero,11294 <heater_tick_10ms+0x2a4>
   11250:	008000b4 	movhi	r2,2
   11254:	10b11304 	addi	r2,r2,-15284
   11258:	11000017 	ldw	r4,0(r2)
   1125c:	008000b4 	movhi	r2,2
   11260:	10b11304 	addi	r2,r2,-15284
   11264:	10c00017 	ldw	r3,0(r2)
   11268:	e0bffc17 	ldw	r2,-16(fp)
   1126c:	10801b24 	muli	r2,r2,108
   11270:	10802904 	addi	r2,r2,164
   11274:	1885883a 	add	r2,r3,r2
   11278:	10800017 	ldw	r2,0(r2)
   1127c:	10c00114 	ori	r3,r2,4
   11280:	e0bffc17 	ldw	r2,-16(fp)
   11284:	10801b24 	muli	r2,r2,108
   11288:	10802904 	addi	r2,r2,164
   1128c:	2085883a 	add	r2,r4,r2
   11290:	10c00015 	stw	r3,0(r2)
			pRX_Status->ink_supply[i].heaterTemp = INVALID_VALUE;
   11294:	008000b4 	movhi	r2,2
   11298:	10b11304 	addi	r2,r2,-15284
   1129c:	10c00017 	ldw	r3,0(r2)
   112a0:	e0bffc17 	ldw	r2,-16(fp)
   112a4:	10801b24 	muli	r2,r2,108
   112a8:	10803704 	addi	r2,r2,220
   112ac:	1887883a 	add	r3,r3,r2
   112b0:	009555b4 	movhi	r2,21846
   112b4:	10aaaa84 	addi	r2,r2,-21846
   112b8:	18800015 	stw	r2,0(r3)
   112bc:	00010d06 	br	116f4 <heater_tick_10ms+0x704>
		}
		else
		{
			// Read Thermistor
			temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC7_DATA -(2*i)) & 0x3ff;
   112c0:	00c00a84 	movi	r3,42
   112c4:	e0bffc17 	ldw	r2,-16(fp)
   112c8:	1885c83a 	sub	r2,r3,r2
   112cc:	1085883a 	add	r2,r2,r2
   112d0:	10804004 	addi	r2,r2,256
   112d4:	1080002b 	ldhuio	r2,0(r2)
   112d8:	10bfffcc 	andi	r2,r2,65535
   112dc:	1080ffcc 	andi	r2,r2,1023
   112e0:	e0bffe8d 	sth	r2,-6(fp)
			temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC7_DATA -(2*i)) & 0x3ff;
   112e4:	00c00a84 	movi	r3,42
   112e8:	e0bffc17 	ldw	r2,-16(fp)
   112ec:	1885c83a 	sub	r2,r3,r2
   112f0:	1085883a 	add	r2,r2,r2
   112f4:	10804004 	addi	r2,r2,256
   112f8:	1080002b 	ldhuio	r2,0(r2)
   112fc:	10bfffcc 	andi	r2,r2,65535
   11300:	1080ffcc 	andi	r2,r2,1023
   11304:	e0bffe8d 	sth	r2,-6(fp)
			//temp = IORD_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, AMC7891_ADC7_DATA -(2*i)) & 0x3ff;

			// Convert to Temperature
			// pRX_Status->ink_supply[i].heaterTemp = Main_adc_polling(temp);

			_Temp_Tab[i][_Temp_Inc[i]] = Main_adc_polling(temp) / 100;
   11308:	008000b4 	movhi	r2,2
   1130c:	10b4c904 	addi	r2,r2,-11484
   11310:	e0fffc17 	ldw	r3,-16(fp)
   11314:	18c7883a 	add	r3,r3,r3
   11318:	18c7883a 	add	r3,r3,r3
   1131c:	10c5883a 	add	r2,r2,r3
   11320:	14000017 	ldw	r16,0(r2)
   11324:	e0bffe8b 	ldhu	r2,-6(fp)
   11328:	1009883a 	mov	r4,r2
   1132c:	00104580 	call	10458 <Main_adc_polling>
   11330:	1009883a 	mov	r4,r2
   11334:	01401904 	movi	r5,100
   11338:	00180e80 	call	180e8 <__udivsi3>
   1133c:	1009883a 	mov	r4,r2
   11340:	008000b4 	movhi	r2,2
   11344:	10b33504 	addi	r2,r2,-13100
   11348:	e0fffc17 	ldw	r3,-16(fp)
   1134c:	18c01924 	muli	r3,r3,100
   11350:	1c07883a 	add	r3,r3,r16
   11354:	18c7883a 	add	r3,r3,r3
   11358:	18c7883a 	add	r3,r3,r3
   1135c:	10c5883a 	add	r2,r2,r3
   11360:	11000015 	stw	r4,0(r2)
			_Temp_Inc[i]++;
   11364:	008000b4 	movhi	r2,2
   11368:	10b4c904 	addi	r2,r2,-11484
   1136c:	e0fffc17 	ldw	r3,-16(fp)
   11370:	18c7883a 	add	r3,r3,r3
   11374:	18c7883a 	add	r3,r3,r3
   11378:	10c5883a 	add	r2,r2,r3
   1137c:	10800017 	ldw	r2,0(r2)
   11380:	11000044 	addi	r4,r2,1
   11384:	008000b4 	movhi	r2,2
   11388:	10b4c904 	addi	r2,r2,-11484
   1138c:	e0fffc17 	ldw	r3,-16(fp)
   11390:	18c7883a 	add	r3,r3,r3
   11394:	18c7883a 	add	r3,r3,r3
   11398:	10c5883a 	add	r2,r2,r3
   1139c:	11000015 	stw	r4,0(r2)
			if(_Temp_Inc[i] > 99) _Temp_Inc[i] = 0;
   113a0:	008000b4 	movhi	r2,2
   113a4:	10b4c904 	addi	r2,r2,-11484
   113a8:	e0fffc17 	ldw	r3,-16(fp)
   113ac:	18c7883a 	add	r3,r3,r3
   113b0:	18c7883a 	add	r3,r3,r3
   113b4:	10c5883a 	add	r2,r2,r3
   113b8:	10800017 	ldw	r2,0(r2)
   113bc:	10801910 	cmplti	r2,r2,100
   113c0:	1000071e 	bne	r2,zero,113e0 <heater_tick_10ms+0x3f0>
   113c4:	008000b4 	movhi	r2,2
   113c8:	10b4c904 	addi	r2,r2,-11484
   113cc:	e0fffc17 	ldw	r3,-16(fp)
   113d0:	18c7883a 	add	r3,r3,r3
   113d4:	18c7883a 	add	r3,r3,r3
   113d8:	10c5883a 	add	r2,r2,r3
   113dc:	10000015 	stw	zero,0(r2)

			_Temp_Average[i] = 0;
   113e0:	008000b4 	movhi	r2,2
   113e4:	10b4c504 	addi	r2,r2,-11500
   113e8:	e0fffc17 	ldw	r3,-16(fp)
   113ec:	18c7883a 	add	r3,r3,r3
   113f0:	18c7883a 	add	r3,r3,r3
   113f4:	10c5883a 	add	r2,r2,r3
   113f8:	10000015 	stw	zero,0(r2)
			for(j=0;j<100;j++) _Temp_Average[i] += _Temp_Tab[i][j];
   113fc:	e03ffd15 	stw	zero,-12(fp)
   11400:	00001c06 	br	11474 <heater_tick_10ms+0x484>
   11404:	008000b4 	movhi	r2,2
   11408:	10b4c504 	addi	r2,r2,-11500
   1140c:	e0fffc17 	ldw	r3,-16(fp)
   11410:	18c7883a 	add	r3,r3,r3
   11414:	18c7883a 	add	r3,r3,r3
   11418:	10c5883a 	add	r2,r2,r3
   1141c:	11000017 	ldw	r4,0(r2)
   11420:	008000b4 	movhi	r2,2
   11424:	10b33504 	addi	r2,r2,-13100
   11428:	e0fffc17 	ldw	r3,-16(fp)
   1142c:	19401924 	muli	r5,r3,100
   11430:	e0fffd17 	ldw	r3,-12(fp)
   11434:	28c7883a 	add	r3,r5,r3
   11438:	18c7883a 	add	r3,r3,r3
   1143c:	18c7883a 	add	r3,r3,r3
   11440:	10c5883a 	add	r2,r2,r3
   11444:	10800017 	ldw	r2,0(r2)
   11448:	2089883a 	add	r4,r4,r2
   1144c:	008000b4 	movhi	r2,2
   11450:	10b4c504 	addi	r2,r2,-11500
   11454:	e0fffc17 	ldw	r3,-16(fp)
   11458:	18c7883a 	add	r3,r3,r3
   1145c:	18c7883a 	add	r3,r3,r3
   11460:	10c5883a 	add	r2,r2,r3
   11464:	11000015 	stw	r4,0(r2)
   11468:	e0bffd17 	ldw	r2,-12(fp)
   1146c:	10800044 	addi	r2,r2,1
   11470:	e0bffd15 	stw	r2,-12(fp)
   11474:	e0bffd17 	ldw	r2,-12(fp)
   11478:	10801910 	cmplti	r2,r2,100
   1147c:	103fe11e 	bne	r2,zero,11404 <__alt_mem_onchip_memory_nios_arm+0xfffc1404>
			pRX_Status->ink_supply[i].heaterTemp = _Temp_Average[i];
   11480:	008000b4 	movhi	r2,2
   11484:	10b11304 	addi	r2,r2,-15284
   11488:	11000017 	ldw	r4,0(r2)
   1148c:	008000b4 	movhi	r2,2
   11490:	10b4c504 	addi	r2,r2,-11500
   11494:	e0fffc17 	ldw	r3,-16(fp)
   11498:	18c7883a 	add	r3,r3,r3
   1149c:	18c7883a 	add	r3,r3,r3
   114a0:	10c5883a 	add	r2,r2,r3
   114a4:	10c00017 	ldw	r3,0(r2)
   114a8:	e0bffc17 	ldw	r2,-16(fp)
   114ac:	10801b24 	muli	r2,r2,108
   114b0:	10803704 	addi	r2,r2,220
   114b4:	2085883a 	add	r2,r4,r2
   114b8:	10c00015 	stw	r3,0(r2)
			pRX_Status->ink_supply[i].heaterTempReady = pRX_Status->ink_supply[i].heaterTemp > (pRX_Config->ink_supply[i].heaterTemp-HEATER_TEMP_TOLERANCE);
   114bc:	008000b4 	movhi	r2,2
   114c0:	10b11304 	addi	r2,r2,-15284
   114c4:	10c00017 	ldw	r3,0(r2)
   114c8:	008000b4 	movhi	r2,2
   114cc:	10b11304 	addi	r2,r2,-15284
   114d0:	11000017 	ldw	r4,0(r2)
   114d4:	e0bffc17 	ldw	r2,-16(fp)
   114d8:	10801b24 	muli	r2,r2,108
   114dc:	10803704 	addi	r2,r2,220
   114e0:	2085883a 	add	r2,r4,r2
   114e4:	10800017 	ldw	r2,0(r2)
   114e8:	100b883a 	mov	r5,r2
   114ec:	008000b4 	movhi	r2,2
   114f0:	10b11404 	addi	r2,r2,-15280
   114f4:	11000017 	ldw	r4,0(r2)
   114f8:	e0bffc17 	ldw	r2,-16(fp)
   114fc:	10801724 	muli	r2,r2,92
   11500:	10801004 	addi	r2,r2,64
   11504:	2085883a 	add	r2,r4,r2
   11508:	10800017 	ldw	r2,0(r2)
   1150c:	10bf0604 	addi	r2,r2,-1000
   11510:	1145803a 	cmpltu	r2,r2,r5
   11514:	1009883a 	mov	r4,r2
   11518:	e0bffc17 	ldw	r2,-16(fp)
   1151c:	10801b24 	muli	r2,r2,108
   11520:	10803904 	addi	r2,r2,228
   11524:	1885883a 	add	r2,r3,r2
   11528:	20c0004c 	andi	r3,r4,1
   1152c:	180a90fa 	slli	r5,r3,3
   11530:	11000003 	ldbu	r4,0(r2)
   11534:	00fffdc4 	movi	r3,-9
   11538:	20c6703a 	and	r3,r4,r3
   1153c:	1809883a 	mov	r4,r3
   11540:	2807883a 	mov	r3,r5
   11544:	20c6b03a 	or	r3,r4,r3
   11548:	10c00005 	stb	r3,0(r2)

			//--- CEDRIC --- Error Temperature frozen : Auto-reset + EVENT message
			if(pRX_Config->ink_supply[i].ctrl_mode > ctrl_off)
   1154c:	008000b4 	movhi	r2,2
   11550:	10b11404 	addi	r2,r2,-15280
   11554:	10c00017 	ldw	r3,0(r2)
   11558:	e0bffc17 	ldw	r2,-16(fp)
   1155c:	10801724 	muli	r2,r2,92
   11560:	10800904 	addi	r2,r2,36
   11564:	1885883a 	add	r2,r3,r2
   11568:	10800017 	ldw	r2,0(r2)
   1156c:	10800170 	cmpltui	r2,r2,5
   11570:	1000601e 	bne	r2,zero,116f4 <heater_tick_10ms+0x704>
			{
				if(pRX_Status->ink_supply[i].heaterTemp == _Temp_Pre[i]) // temperature frozen
   11574:	008000b4 	movhi	r2,2
   11578:	10b11304 	addi	r2,r2,-15284
   1157c:	10c00017 	ldw	r3,0(r2)
   11580:	e0bffc17 	ldw	r2,-16(fp)
   11584:	10801b24 	muli	r2,r2,108
   11588:	10803704 	addi	r2,r2,220
   1158c:	1885883a 	add	r2,r3,r2
   11590:	11000017 	ldw	r4,0(r2)
   11594:	008000b4 	movhi	r2,2
   11598:	10b4cd04 	addi	r2,r2,-11468
   1159c:	e0fffc17 	ldw	r3,-16(fp)
   115a0:	18c7883a 	add	r3,r3,r3
   115a4:	18c7883a 	add	r3,r3,r3
   115a8:	10c5883a 	add	r2,r2,r3
   115ac:	10800017 	ldw	r2,0(r2)
   115b0:	20802c1e 	bne	r4,r2,11664 <heater_tick_10ms+0x674>
				{
					_TimeTempFrozen[i]++;
   115b4:	008000b4 	movhi	r2,2
   115b8:	10b4d504 	addi	r2,r2,-11436
   115bc:	e0fffc17 	ldw	r3,-16(fp)
   115c0:	18c7883a 	add	r3,r3,r3
   115c4:	18c7883a 	add	r3,r3,r3
   115c8:	10c5883a 	add	r2,r2,r3
   115cc:	10800017 	ldw	r2,0(r2)
   115d0:	11000044 	addi	r4,r2,1
   115d4:	008000b4 	movhi	r2,2
   115d8:	10b4d504 	addi	r2,r2,-11436
   115dc:	e0fffc17 	ldw	r3,-16(fp)
   115e0:	18c7883a 	add	r3,r3,r3
   115e4:	18c7883a 	add	r3,r3,r3
   115e8:	10c5883a 	add	r2,r2,r3
   115ec:	11000015 	stw	r4,0(r2)
					if(_TimeTempFrozen[i] > 6000)	// during 20 seconds
   115f0:	008000b4 	movhi	r2,2
   115f4:	10b4d504 	addi	r2,r2,-11436
   115f8:	e0fffc17 	ldw	r3,-16(fp)
   115fc:	18c7883a 	add	r3,r3,r3
   11600:	18c7883a 	add	r3,r3,r3
   11604:	10c5883a 	add	r2,r2,r3
   11608:	10800017 	ldw	r2,0(r2)
   1160c:	1085dc50 	cmplti	r2,r2,6001
   11610:	1000381e 	bne	r2,zero,116f4 <heater_tick_10ms+0x704>
					{
						init_AMC7891(AVALON_SPI_AMC7891_1_BASE);
   11614:	01004004 	movi	r4,256
   11618:	00101c80 	call	101c8 <init_AMC7891>
						pRX_Status->ink_supply[i].error |= err_heater_temp_frozen;
   1161c:	008000b4 	movhi	r2,2
   11620:	10b11304 	addi	r2,r2,-15284
   11624:	11000017 	ldw	r4,0(r2)
   11628:	008000b4 	movhi	r2,2
   1162c:	10b11304 	addi	r2,r2,-15284
   11630:	10c00017 	ldw	r3,0(r2)
   11634:	e0bffc17 	ldw	r2,-16(fp)
   11638:	10801b24 	muli	r2,r2,108
   1163c:	10802904 	addi	r2,r2,164
   11640:	1885883a 	add	r2,r3,r2
   11644:	10800017 	ldw	r2,0(r2)
   11648:	10c00214 	ori	r3,r2,8
   1164c:	e0bffc17 	ldw	r2,-16(fp)
   11650:	10801b24 	muli	r2,r2,108
   11654:	10802904 	addi	r2,r2,164
   11658:	2085883a 	add	r2,r4,r2
   1165c:	10c00015 	stw	r3,0(r2)
   11660:	00002406 	br	116f4 <heater_tick_10ms+0x704>
					}
				}
				else
				{
					_TimeTempFrozen[i] = 0;
   11664:	008000b4 	movhi	r2,2
   11668:	10b4d504 	addi	r2,r2,-11436
   1166c:	e0fffc17 	ldw	r3,-16(fp)
   11670:	18c7883a 	add	r3,r3,r3
   11674:	18c7883a 	add	r3,r3,r3
   11678:	10c5883a 	add	r2,r2,r3
   1167c:	10000015 	stw	zero,0(r2)
					_Heater_Pre[i] = _pid_Temp[i].val;
   11680:	008000b4 	movhi	r2,2
   11684:	10b5e904 	addi	r2,r2,-10332
   11688:	e0fffc17 	ldw	r3,-16(fp)
   1168c:	1806917a 	slli	r3,r3,5
   11690:	18c00304 	addi	r3,r3,12
   11694:	10c5883a 	add	r2,r2,r3
   11698:	11000017 	ldw	r4,0(r2)
   1169c:	008000b4 	movhi	r2,2
   116a0:	10b4d104 	addi	r2,r2,-11452
   116a4:	e0fffc17 	ldw	r3,-16(fp)
   116a8:	18c7883a 	add	r3,r3,r3
   116ac:	18c7883a 	add	r3,r3,r3
   116b0:	10c5883a 	add	r2,r2,r3
   116b4:	11000015 	stw	r4,0(r2)
					_Temp_Pre[i] = pRX_Status->ink_supply[i].heaterTemp;
   116b8:	008000b4 	movhi	r2,2
   116bc:	10b11304 	addi	r2,r2,-15284
   116c0:	10c00017 	ldw	r3,0(r2)
   116c4:	e0bffc17 	ldw	r2,-16(fp)
   116c8:	10801b24 	muli	r2,r2,108
   116cc:	10803704 	addi	r2,r2,220
   116d0:	1885883a 	add	r2,r3,r2
   116d4:	11000017 	ldw	r4,0(r2)
   116d8:	008000b4 	movhi	r2,2
   116dc:	10b4cd04 	addi	r2,r2,-11468
   116e0:	e0fffc17 	ldw	r3,-16(fp)
   116e4:	18c7883a 	add	r3,r3,r3
   116e8:	18c7883a 	add	r3,r3,r3
   116ec:	10c5883a 	add	r2,r2,r3
   116f0:	11000015 	stw	r4,0(r2)
				}
			}
		}

		if(pRX_Status->ink_supply[i].heaterTemp != INVALID_VALUE && pRX_Config->ink_supply[i].ctrl_mode > ctrl_off)
   116f4:	008000b4 	movhi	r2,2
   116f8:	10b11304 	addi	r2,r2,-15284
   116fc:	10c00017 	ldw	r3,0(r2)
   11700:	e0bffc17 	ldw	r2,-16(fp)
   11704:	10801b24 	muli	r2,r2,108
   11708:	10803704 	addi	r2,r2,220
   1170c:	1885883a 	add	r2,r3,r2
   11710:	10c00017 	ldw	r3,0(r2)
   11714:	009555b4 	movhi	r2,21846
   11718:	10aaaa84 	addi	r2,r2,-21846
   1171c:	18809226 	beq	r3,r2,11968 <heater_tick_10ms+0x978>
   11720:	008000b4 	movhi	r2,2
   11724:	10b11404 	addi	r2,r2,-15280
   11728:	10c00017 	ldw	r3,0(r2)
   1172c:	e0bffc17 	ldw	r2,-16(fp)
   11730:	10801724 	muli	r2,r2,92
   11734:	10800904 	addi	r2,r2,36
   11738:	1885883a 	add	r2,r3,r2
   1173c:	10800017 	ldw	r2,0(r2)
   11740:	10800170 	cmpltui	r2,r2,5
   11744:	1000881e 	bne	r2,zero,11968 <heater_tick_10ms+0x978>
				_set_heater_out(i, TRUE);
			else
				_set_heater_out(i, FALSE);*/

			// PID parameters
			_pid_Temp[i].P 					= 20;
   11748:	008000b4 	movhi	r2,2
   1174c:	10b5e904 	addi	r2,r2,-10332
   11750:	e0fffc17 	ldw	r3,-16(fp)
   11754:	1806917a 	slli	r3,r3,5
   11758:	18c00104 	addi	r3,r3,4
   1175c:	10c5883a 	add	r2,r2,r3
   11760:	00c00504 	movi	r3,20
   11764:	10c00015 	stw	r3,0(r2)
			_pid_Temp[i].I 					= 30000;
   11768:	008000b4 	movhi	r2,2
   1176c:	10b5e904 	addi	r2,r2,-10332
   11770:	e0fffc17 	ldw	r3,-16(fp)
   11774:	1806917a 	slli	r3,r3,5
   11778:	18c00204 	addi	r3,r3,8
   1177c:	10c5883a 	add	r2,r2,r3
   11780:	00dd4c04 	movi	r3,30000
   11784:	10c00015 	stw	r3,0(r2)
			_pid_Temp[i].Start_Integrator	= 1;
   11788:	008000b4 	movhi	r2,2
   1178c:	10b5e904 	addi	r2,r2,-10332
   11790:	e0fffc17 	ldw	r3,-16(fp)
   11794:	1806917a 	slli	r3,r3,5
   11798:	18c00604 	addi	r3,r3,24
   1179c:	10c5883a 	add	r2,r2,r3
   117a0:	00c00044 	movi	r3,1
   117a4:	10c00015 	stw	r3,0(r2)
			_pid_Temp[i].val_max    		= 1000;	// Duty time on 1000 ms
   117a8:	008000b4 	movhi	r2,2
   117ac:	10b5e904 	addi	r2,r2,-10332
   117b0:	e0fffc17 	ldw	r3,-16(fp)
   117b4:	1806917a 	slli	r3,r3,5
   117b8:	18c00504 	addi	r3,r3,20
   117bc:	10c5883a 	add	r2,r2,r3
   117c0:	00c0fa04 	movi	r3,1000
   117c4:	10c00015 	stw	r3,0(r2)
			_pid_Temp[i].val_min			= 0;
   117c8:	008000b4 	movhi	r2,2
   117cc:	10b5e904 	addi	r2,r2,-10332
   117d0:	e0fffc17 	ldw	r3,-16(fp)
   117d4:	1806917a 	slli	r3,r3,5
   117d8:	18c00404 	addi	r3,r3,16
   117dc:	10c5883a 	add	r2,r2,r3
   117e0:	10000015 	stw	zero,0(r2)
			_pid_Temp[i].Setpoint			= pRX_Config->ink_supply[i].heaterTempMax;
   117e4:	008000b4 	movhi	r2,2
   117e8:	10b11404 	addi	r2,r2,-15280
   117ec:	10c00017 	ldw	r3,0(r2)
   117f0:	e0bffc17 	ldw	r2,-16(fp)
   117f4:	10801724 	muli	r2,r2,92
   117f8:	10801104 	addi	r2,r2,68
   117fc:	1885883a 	add	r2,r3,r2
   11800:	10800017 	ldw	r2,0(r2)
   11804:	1009883a 	mov	r4,r2
   11808:	008000b4 	movhi	r2,2
   1180c:	10b5e904 	addi	r2,r2,-10332
   11810:	e0fffc17 	ldw	r3,-16(fp)
   11814:	1806917a 	slli	r3,r3,5
   11818:	10c5883a 	add	r2,r2,r3
   1181c:	11000015 	stw	r4,0(r2)

			if (pRX_Config->ink_supply[i].condPumpFeedback)
   11820:	008000b4 	movhi	r2,2
   11824:	10b11404 	addi	r2,r2,-15280
   11828:	10c00017 	ldw	r3,0(r2)
   1182c:	e0bffc17 	ldw	r2,-16(fp)
   11830:	10801724 	muli	r2,r2,92
   11834:	10801904 	addi	r2,r2,100
   11838:	1885883a 	add	r2,r3,r2
   1183c:	10800017 	ldw	r2,0(r2)
   11840:	10004526 	beq	r2,zero,11958 <heater_tick_10ms+0x968>
			{
				pid_calc(pRX_Status->ink_supply[i].heaterTemp, &_pid_Temp[i]);
   11844:	008000b4 	movhi	r2,2
   11848:	10b11304 	addi	r2,r2,-15284
   1184c:	10c00017 	ldw	r3,0(r2)
   11850:	e0bffc17 	ldw	r2,-16(fp)
   11854:	10801b24 	muli	r2,r2,108
   11858:	10803704 	addi	r2,r2,220
   1185c:	1885883a 	add	r2,r3,r2
   11860:	11000017 	ldw	r4,0(r2)
   11864:	e0bffc17 	ldw	r2,-16(fp)
   11868:	1006917a 	slli	r3,r2,5
   1186c:	008000b4 	movhi	r2,2
   11870:	10b5e904 	addi	r2,r2,-10332
   11874:	1885883a 	add	r2,r3,r2
   11878:	100b883a 	mov	r5,r2
   1187c:	00165a00 	call	165a0 <pid_calc>
				_DutyTemp_Count[i] += 10;
   11880:	008000b4 	movhi	r2,2
   11884:	10b33104 	addi	r2,r2,-13116
   11888:	e0fffc17 	ldw	r3,-16(fp)
   1188c:	18c7883a 	add	r3,r3,r3
   11890:	18c7883a 	add	r3,r3,r3
   11894:	10c5883a 	add	r2,r2,r3
   11898:	10800017 	ldw	r2,0(r2)
   1189c:	11000284 	addi	r4,r2,10
   118a0:	008000b4 	movhi	r2,2
   118a4:	10b33104 	addi	r2,r2,-13116
   118a8:	e0fffc17 	ldw	r3,-16(fp)
   118ac:	18c7883a 	add	r3,r3,r3
   118b0:	18c7883a 	add	r3,r3,r3
   118b4:	10c5883a 	add	r2,r2,r3
   118b8:	11000015 	stw	r4,0(r2)
				if(_DutyTemp_Count[i] > 1000) _DutyTemp_Count[i] = 0;
   118bc:	008000b4 	movhi	r2,2
   118c0:	10b33104 	addi	r2,r2,-13116
   118c4:	e0fffc17 	ldw	r3,-16(fp)
   118c8:	18c7883a 	add	r3,r3,r3
   118cc:	18c7883a 	add	r3,r3,r3
   118d0:	10c5883a 	add	r2,r2,r3
   118d4:	10800017 	ldw	r2,0(r2)
   118d8:	1080fa50 	cmplti	r2,r2,1001
   118dc:	1000071e 	bne	r2,zero,118fc <heater_tick_10ms+0x90c>
   118e0:	008000b4 	movhi	r2,2
   118e4:	10b33104 	addi	r2,r2,-13116
   118e8:	e0fffc17 	ldw	r3,-16(fp)
   118ec:	18c7883a 	add	r3,r3,r3
   118f0:	18c7883a 	add	r3,r3,r3
   118f4:	10c5883a 	add	r2,r2,r3
   118f8:	10000015 	stw	zero,0(r2)
				// duty on 1 second
				if(_pid_Temp[i].val > _DutyTemp_Count[i]) _set_heater_out(i, TRUE);
   118fc:	008000b4 	movhi	r2,2
   11900:	10b5e904 	addi	r2,r2,-10332
   11904:	e0fffc17 	ldw	r3,-16(fp)
   11908:	1806917a 	slli	r3,r3,5
   1190c:	18c00304 	addi	r3,r3,12
   11910:	10c5883a 	add	r2,r2,r3
   11914:	11000017 	ldw	r4,0(r2)
   11918:	008000b4 	movhi	r2,2
   1191c:	10b33104 	addi	r2,r2,-13116
   11920:	e0fffc17 	ldw	r3,-16(fp)
   11924:	18c7883a 	add	r3,r3,r3
   11928:	18c7883a 	add	r3,r3,r3
   1192c:	10c5883a 	add	r2,r2,r3
   11930:	10800017 	ldw	r2,0(r2)
   11934:	1100040e 	bge	r2,r4,11948 <heater_tick_10ms+0x958>
   11938:	e13ffc17 	ldw	r4,-16(fp)
   1193c:	01400044 	movi	r5,1
   11940:	00119c00 	call	119c0 <_set_heater_out>
			_pid_Temp[i].Start_Integrator	= 1;
			_pid_Temp[i].val_max    		= 1000;	// Duty time on 1000 ms
			_pid_Temp[i].val_min			= 0;
			_pid_Temp[i].Setpoint			= pRX_Config->ink_supply[i].heaterTempMax;

			if (pRX_Config->ink_supply[i].condPumpFeedback)
   11944:	00001206 	br	11990 <heater_tick_10ms+0x9a0>
				pid_calc(pRX_Status->ink_supply[i].heaterTemp, &_pid_Temp[i]);
				_DutyTemp_Count[i] += 10;
				if(_DutyTemp_Count[i] > 1000) _DutyTemp_Count[i] = 0;
				// duty on 1 second
				if(_pid_Temp[i].val > _DutyTemp_Count[i]) _set_heater_out(i, TRUE);
				else _set_heater_out(i, FALSE);
   11948:	e13ffc17 	ldw	r4,-16(fp)
   1194c:	000b883a 	mov	r5,zero
   11950:	00119c00 	call	119c0 <_set_heater_out>
			_pid_Temp[i].Start_Integrator	= 1;
			_pid_Temp[i].val_max    		= 1000;	// Duty time on 1000 ms
			_pid_Temp[i].val_min			= 0;
			_pid_Temp[i].Setpoint			= pRX_Config->ink_supply[i].heaterTempMax;

			if (pRX_Config->ink_supply[i].condPumpFeedback)
   11954:	00000e06 	br	11990 <heater_tick_10ms+0x9a0>
				if(_DutyTemp_Count[i] > 1000) _DutyTemp_Count[i] = 0;
				// duty on 1 second
				if(_pid_Temp[i].val > _DutyTemp_Count[i]) _set_heater_out(i, TRUE);
				else _set_heater_out(i, FALSE);
			}
			else _set_heater_out(i, FALSE);
   11958:	e13ffc17 	ldw	r4,-16(fp)
   1195c:	000b883a 	mov	r5,zero
   11960:	00119c00 	call	119c0 <_set_heater_out>
			_pid_Temp[i].Start_Integrator	= 1;
			_pid_Temp[i].val_max    		= 1000;	// Duty time on 1000 ms
			_pid_Temp[i].val_min			= 0;
			_pid_Temp[i].Setpoint			= pRX_Config->ink_supply[i].heaterTempMax;

			if (pRX_Config->ink_supply[i].condPumpFeedback)
   11964:	00000a06 	br	11990 <heater_tick_10ms+0x9a0>
			}
			else _set_heater_out(i, FALSE);
		}
		else
		{
			_set_heater_out(i, FALSE);
   11968:	e13ffc17 	ldw	r4,-16(fp)
   1196c:	000b883a 	mov	r5,zero
   11970:	00119c00 	call	119c0 <_set_heater_out>
			pid_reset(&_pid_Temp[i]);
   11974:	e0bffc17 	ldw	r2,-16(fp)
   11978:	1006917a 	slli	r3,r2,5
   1197c:	008000b4 	movhi	r2,2
   11980:	10b5e904 	addi	r2,r2,-10332
   11984:	1885883a 	add	r2,r3,r2
   11988:	1009883a 	mov	r4,r2
   1198c:	00165780 	call	16578 <pid_reset>
	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA + 6) & 0x3ff;
	temp = IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE, AMC7891_ADC0_DATA + 6) & 0x3ff;
	pRX_Status->HeaterBoard_Vsupply_24VP = temp * 5000 / 1024 * 115 / 15;

	// Thermistor Heaterboard
	for(i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   11990:	e0bffc17 	ldw	r2,-16(fp)
   11994:	10800044 	addi	r2,r2,1
   11998:	e0bffc15 	stw	r2,-16(fp)
   1199c:	e0bffc17 	ldw	r2,-16(fp)
   119a0:	10800110 	cmplti	r2,r2,4
   119a4:	103e191e 	bne	r2,zero,1120c <__alt_mem_onchip_memory_nios_arm+0xfffc120c>
		{
			_set_heater_out(i, FALSE);
			pid_reset(&_pid_Temp[i]);
		}
	}
}
   119a8:	e6ffff04 	addi	sp,fp,-4
   119ac:	dfc00217 	ldw	ra,8(sp)
   119b0:	df000117 	ldw	fp,4(sp)
   119b4:	dc000017 	ldw	r16,0(sp)
   119b8:	dec00304 	addi	sp,sp,12
   119bc:	f800283a 	ret

000119c0 <_set_heater_out>:

//--- _set_heater_out ----------------------------------------
static void _set_heater_out(int heaterNo, int newState)
{
   119c0:	defffb04 	addi	sp,sp,-20
   119c4:	df000415 	stw	fp,16(sp)
   119c8:	df000404 	addi	fp,sp,16
   119cc:	e13ffe15 	stw	r4,-8(fp)
   119d0:	e17fff15 	stw	r5,-4(fp)
	volatile int readin;

//	if (newState!=pRX_Status->ink_supply[heaterNo].heaterOn)
	{
		pRX_Status->ink_supply[heaterNo].heaterOn = newState;
   119d4:	008000b4 	movhi	r2,2
   119d8:	10b11304 	addi	r2,r2,-15284
   119dc:	10c00017 	ldw	r3,0(r2)
   119e0:	e0bfff17 	ldw	r2,-4(fp)
   119e4:	1080004c 	andi	r2,r2,1
   119e8:	1009883a 	mov	r4,r2
   119ec:	e0bffe17 	ldw	r2,-8(fp)
   119f0:	10801b24 	muli	r2,r2,108
   119f4:	10803904 	addi	r2,r2,228
   119f8:	1885883a 	add	r2,r3,r2
   119fc:	20c0004c 	andi	r3,r4,1
   11a00:	18c7883a 	add	r3,r3,r3
   11a04:	18cb883a 	add	r5,r3,r3
   11a08:	11000003 	ldbu	r4,0(r2)
   11a0c:	00fffec4 	movi	r3,-5
   11a10:	20c6703a 	and	r3,r4,r3
   11a14:	1809883a 	mov	r4,r3
   11a18:	2807883a 	mov	r3,r5
   11a1c:	20c6b03a 	or	r3,r4,r3
   11a20:	10c00005 	stb	r3,0(r2)
		readin=IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_GPIO_OUT) & 0xfff;
   11a24:	00805a04 	movi	r2,360
   11a28:	1080002b 	ldhuio	r2,0(r2)
   11a2c:	10bfffcc 	andi	r2,r2,65535
   11a30:	1083ffcc 	andi	r2,r2,4095
   11a34:	e0bffd15 	stw	r2,-12(fp)
		readin=IORD_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_GPIO_OUT) & 0xfff;
   11a38:	00805a04 	movi	r2,360
   11a3c:	1080002b 	ldhuio	r2,0(r2)
   11a40:	10bfffcc 	andi	r2,r2,65535
   11a44:	1083ffcc 	andi	r2,r2,4095
   11a48:	e0bffd15 	stw	r2,-12(fp)
		int out;
		switch (heaterNo)
   11a4c:	e0bffe17 	ldw	r2,-8(fp)
   11a50:	10c00060 	cmpeqi	r3,r2,1
   11a54:	18000c1e 	bne	r3,zero,11a88 <_set_heater_out+0xc8>
   11a58:	10c00088 	cmpgei	r3,r2,2
   11a5c:	1800021e 	bne	r3,zero,11a68 <_set_heater_out+0xa8>
   11a60:	10000626 	beq	r2,zero,11a7c <_set_heater_out+0xbc>
   11a64:	00001106 	br	11aac <_set_heater_out+0xec>
   11a68:	10c000a0 	cmpeqi	r3,r2,2
   11a6c:	1800091e 	bne	r3,zero,11a94 <_set_heater_out+0xd4>
   11a70:	108000e0 	cmpeqi	r2,r2,3
   11a74:	10000a1e 	bne	r2,zero,11aa0 <_set_heater_out+0xe0>
   11a78:	00000c06 	br	11aac <_set_heater_out+0xec>
		{
		case 0:	out = HEATER_0_ON; break;
   11a7c:	00800044 	movi	r2,1
   11a80:	e0bffc15 	stw	r2,-16(fp)
   11a84:	00000906 	br	11aac <_set_heater_out+0xec>
		case 1:	out = HEATER_1_ON; break;
   11a88:	00800204 	movi	r2,8
   11a8c:	e0bffc15 	stw	r2,-16(fp)
   11a90:	00000606 	br	11aac <_set_heater_out+0xec>
		case 2: out = HEATER_2_ON; break;
   11a94:	00800104 	movi	r2,4
   11a98:	e0bffc15 	stw	r2,-16(fp)
   11a9c:	00000306 	br	11aac <_set_heater_out+0xec>
		case 3: out = HEATER_3_ON; break;
   11aa0:	00800084 	movi	r2,2
   11aa4:	e0bffc15 	stw	r2,-16(fp)
   11aa8:	0001883a 	nop
		}
		if (newState) IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_GPIO_OUT,(readin | out));	// set ON
   11aac:	e0bfff17 	ldw	r2,-4(fp)
   11ab0:	10000626 	beq	r2,zero,11acc <_set_heater_out+0x10c>
   11ab4:	e0fffd17 	ldw	r3,-12(fp)
   11ab8:	e0bffc17 	ldw	r2,-16(fp)
   11abc:	1886b03a 	or	r3,r3,r2
   11ac0:	00805a04 	movi	r2,360
   11ac4:	10c0002d 	sthio	r3,0(r2)
   11ac8:	00000606 	br	11ae4 <_set_heater_out+0x124>
		else		  IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_GPIO_OUT,(readin &~out));	// set OFF
   11acc:	e0bffc17 	ldw	r2,-16(fp)
   11ad0:	0086303a 	nor	r3,zero,r2
   11ad4:	e0bffd17 	ldw	r2,-12(fp)
   11ad8:	1886703a 	and	r3,r3,r2
   11adc:	00805a04 	movi	r2,360
   11ae0:	10c0002d 	sthio	r3,0(r2)
	}
}
   11ae4:	e037883a 	mov	sp,fp
   11ae8:	df000017 	ldw	fp,0(sp)
   11aec:	dec00104 	addi	sp,sp,4
   11af0:	f800283a 	ret

00011af4 <heater_tick_1000ms>:

//--- heater_tick_1000ms -----------------------------------------------------------
void heater_tick_1000ms(void)
{
   11af4:	deffff04 	addi	sp,sp,-4
   11af8:	df000015 	stw	fp,0(sp)
   11afc:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(AVALON_SPI_AMC7891_1_BASE,AMC7891_GPIO_OUT, 0);	// set All Heaters OFF (Security)
   11b00:	0007883a 	mov	r3,zero
   11b04:	00805a04 	movi	r2,360
   11b08:	10c0002d 	sthio	r3,0(r2)
}
   11b0c:	e037883a 	mov	sp,fp
   11b10:	df000017 	ldw	fp,0(sp)
   11b14:	dec00104 	addi	sp,sp,4
   11b18:	f800283a 	ret

00011b1c <init_I2C>:
#include "sys/alt_alarm.h"
#include "i2c_master.h"
#include "i2c.h"

void init_I2C(alt_u32 base)
{
   11b1c:	defffd04 	addi	sp,sp,-12
   11b20:	dfc00215 	stw	ra,8(sp)
   11b24:	df000115 	stw	fp,4(sp)
   11b28:	df000104 	addi	fp,sp,4
   11b2c:	e13fff15 	stw	r4,-4(fp)
	I2C_init(base,ALT_CPU_FREQ,100000);
   11b30:	e13fff17 	ldw	r4,-4(fp)
   11b34:	0140bef4 	movhi	r5,763
   11b38:	297c2004 	addi	r5,r5,-3968
   11b3c:	018000b4 	movhi	r6,2
   11b40:	31a1a804 	addi	r6,r6,-31072
   11b44:	00196c80 	call	196c8 <I2C_init>
	I2C_init(base,ALT_CPU_FREQ,100000);
   11b48:	e13fff17 	ldw	r4,-4(fp)
   11b4c:	0140bef4 	movhi	r5,763
   11b50:	297c2004 	addi	r5,r5,-3968
   11b54:	018000b4 	movhi	r6,2
   11b58:	31a1a804 	addi	r6,r6,-31072
   11b5c:	00196c80 	call	196c8 <I2C_init>
}
   11b60:	e037883a 	mov	sp,fp
   11b64:	dfc00117 	ldw	ra,4(sp)
   11b68:	df000017 	ldw	fp,0(sp)
   11b6c:	dec00204 	addi	sp,sp,8
   11b70:	f800283a 	ret

00011b74 <abs>:
static void _set_pressure_value(int newState);

static void _trace_pump_ctrl(int pressure);

INT32 abs(INT32 val)
{
   11b74:	defffe04 	addi	sp,sp,-8
   11b78:	df000115 	stw	fp,4(sp)
   11b7c:	df000104 	addi	fp,sp,4
   11b80:	e13fff15 	stw	r4,-4(fp)
    if (val < 0) return (-val);
   11b84:	e0bfff17 	ldw	r2,-4(fp)
   11b88:	1000030e 	bge	r2,zero,11b98 <abs+0x24>
   11b8c:	e0bfff17 	ldw	r2,-4(fp)
   11b90:	0085c83a 	sub	r2,zero,r2
   11b94:	00000106 	br	11b9c <abs+0x28>
    else		 return (val);
   11b98:	e0bfff17 	ldw	r2,-4(fp)
}
   11b9c:	e037883a 	mov	sp,fp
   11ba0:	df000017 	ldw	fp,0(sp)
   11ba4:	dec00104 	addi	sp,sp,4
   11ba8:	f800283a 	ret

00011bac <ink_init>:

//--- ink_init ------------------------------
void ink_init(void)
{
   11bac:	defffd04 	addi	sp,sp,-12
   11bb0:	dfc00215 	stw	ra,8(sp)
   11bb4:	df000115 	stw	fp,4(sp)
   11bb8:	df000104 	addi	fp,sp,4
	int isNo;

	memset(_InkSupply, 0, sizeof(_InkSupply));
   11bbc:	010000b4 	movhi	r4,2
   11bc0:	2134d904 	addi	r4,r4,-11420
   11bc4:	000b883a 	mov	r5,zero
   11bc8:	01807c04 	movi	r6,496
   11bcc:	00181200 	call	18120 <memset>

	for (isNo=0; isNo<NIOS_INK_SUPPLY_CNT; isNo++)
   11bd0:	e03fff15 	stw	zero,-4(fp)
   11bd4:	0000a106 	br	11e5c <ink_init+0x2b0>
	{
		pid_reset(&_InkSupply[isNo].pid_Pump);
   11bd8:	e0bfff17 	ldw	r2,-4(fp)
   11bdc:	10801f24 	muli	r2,r2,124
   11be0:	10c00804 	addi	r3,r2,32
   11be4:	008000b4 	movhi	r2,2
   11be8:	10b4d904 	addi	r2,r2,-11420
   11bec:	1885883a 	add	r2,r3,r2
   11bf0:	1009883a 	mov	r4,r2
   11bf4:	00165780 	call	16578 <pid_reset>
		pid_reset(&_InkSupply[isNo].pid_Setpoint);
   11bf8:	e0bfff17 	ldw	r2,-4(fp)
   11bfc:	10c01f24 	muli	r3,r2,124
   11c00:	008000b4 	movhi	r2,2
   11c04:	10b4d904 	addi	r2,r2,-11420
   11c08:	1885883a 	add	r2,r3,r2
   11c0c:	1009883a 	mov	r4,r2
   11c10:	00165780 	call	16578 <pid_reset>

		_InkSupply[isNo].pid_Pump.P 					= 1000;
   11c14:	008000b4 	movhi	r2,2
   11c18:	10b4d904 	addi	r2,r2,-11420
   11c1c:	e0ffff17 	ldw	r3,-4(fp)
   11c20:	18c01f24 	muli	r3,r3,124
   11c24:	18c00904 	addi	r3,r3,36
   11c28:	10c5883a 	add	r2,r2,r3
   11c2c:	00c0fa04 	movi	r3,1000
   11c30:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Pump.I 					= 5000;
   11c34:	008000b4 	movhi	r2,2
   11c38:	10b4d904 	addi	r2,r2,-11420
   11c3c:	e0ffff17 	ldw	r3,-4(fp)
   11c40:	18c01f24 	muli	r3,r3,124
   11c44:	18c00a04 	addi	r3,r3,40
   11c48:	10c5883a 	add	r2,r2,r3
   11c4c:	00c4e204 	movi	r3,5000
   11c50:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Pump.Start_Integrator		= 1;
   11c54:	008000b4 	movhi	r2,2
   11c58:	10b4d904 	addi	r2,r2,-11420
   11c5c:	e0ffff17 	ldw	r3,-4(fp)
   11c60:	18c01f24 	muli	r3,r3,124
   11c64:	18c00e04 	addi	r3,r3,56
   11c68:	10c5883a 	add	r2,r2,r3
   11c6c:	00c00044 	movi	r3,1
   11c70:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Pump.val_max    			= INK_PUMP_VAL_MAX;	// according to datasheet is [0..5V], [0..10V] is allowed according to KNF
   11c74:	008000b4 	movhi	r2,2
   11c78:	10b4d904 	addi	r2,r2,-11420
   11c7c:	e0ffff17 	ldw	r3,-4(fp)
   11c80:	18c01f24 	muli	r3,r3,124
   11c84:	18c00d04 	addi	r3,r3,52
   11c88:	10c5883a 	add	r2,r2,r3
   11c8c:	00c07fc4 	movi	r3,511
   11c90:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Pump.val_min				= 0;	// Below a certain voltage the pump has not enough power to start
   11c94:	008000b4 	movhi	r2,2
   11c98:	10b4d904 	addi	r2,r2,-11420
   11c9c:	e0ffff17 	ldw	r3,-4(fp)
   11ca0:	18c01f24 	muli	r3,r3,124
   11ca4:	18c00c04 	addi	r3,r3,48
   11ca8:	10c5883a 	add	r2,r2,r3
   11cac:	10000015 	stw	zero,0(r2)

		_InkSupply[isNo].pid_Setpoint.P 				= 200;
   11cb0:	008000b4 	movhi	r2,2
   11cb4:	10b4d904 	addi	r2,r2,-11420
   11cb8:	e0ffff17 	ldw	r3,-4(fp)
   11cbc:	18c01f24 	muli	r3,r3,124
   11cc0:	18c00104 	addi	r3,r3,4
   11cc4:	10c5883a 	add	r2,r2,r3
   11cc8:	00c03204 	movi	r3,200
   11ccc:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Setpoint.I 				= 1500;
   11cd0:	008000b4 	movhi	r2,2
   11cd4:	10b4d904 	addi	r2,r2,-11420
   11cd8:	e0ffff17 	ldw	r3,-4(fp)
   11cdc:	18c01f24 	muli	r3,r3,124
   11ce0:	18c00204 	addi	r3,r3,8
   11ce4:	10c5883a 	add	r2,r2,r3
   11ce8:	00c17704 	movi	r3,1500
   11cec:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Setpoint.Start_Integrator	= 1;
   11cf0:	008000b4 	movhi	r2,2
   11cf4:	10b4d904 	addi	r2,r2,-11420
   11cf8:	e0ffff17 	ldw	r3,-4(fp)
   11cfc:	18c01f24 	muli	r3,r3,124
   11d00:	18c00604 	addi	r3,r3,24
   11d04:	10c5883a 	add	r2,r2,r3
   11d08:	00c00044 	movi	r3,1
   11d0c:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Setpoint.val_max   		= 1000;	// Max IS pressure 1200 mbar
   11d10:	008000b4 	movhi	r2,2
   11d14:	10b4d904 	addi	r2,r2,-11420
   11d18:	e0ffff17 	ldw	r3,-4(fp)
   11d1c:	18c01f24 	muli	r3,r3,124
   11d20:	18c00504 	addi	r3,r3,20
   11d24:	10c5883a 	add	r2,r2,r3
   11d28:	00c0fa04 	movi	r3,1000
   11d2c:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Setpoint.val_min			= 0;	// Min not 0, just a little more
   11d30:	008000b4 	movhi	r2,2
   11d34:	10b4d904 	addi	r2,r2,-11420
   11d38:	e0ffff17 	ldw	r3,-4(fp)
   11d3c:	18c01f24 	muli	r3,r3,124
   11d40:	18c00404 	addi	r3,r3,16
   11d44:	10c5883a 	add	r2,r2,r3
   11d48:	10000015 	stw	zero,0(r2)

		_InkSupply[isNo].pid_Calibration.val_max    	= 400;	// Max cond inlet pressure 30 mbars
   11d4c:	008000b4 	movhi	r2,2
   11d50:	10b4d904 	addi	r2,r2,-11420
   11d54:	e0ffff17 	ldw	r3,-4(fp)
   11d58:	18c01f24 	muli	r3,r3,124
   11d5c:	18c01504 	addi	r3,r3,84
   11d60:	10c5883a 	add	r2,r2,r3
   11d64:	00c06404 	movi	r3,400
   11d68:	10c00015 	stw	r3,0(r2)
		_InkSupply[isNo].pid_Calibration.val_min		= 0;	// Min not 0, just a little more : 1 mbar
   11d6c:	008000b4 	movhi	r2,2
   11d70:	10b4d904 	addi	r2,r2,-11420
   11d74:	e0ffff17 	ldw	r3,-4(fp)
   11d78:	18c01f24 	muli	r3,r3,124
   11d7c:	18c01404 	addi	r3,r3,80
   11d80:	10c5883a 	add	r2,r2,r3
   11d84:	10000015 	stw	zero,0(r2)

		_InkSupply[isNo].inkPresSetCfg = INVALID_VALUE;
   11d88:	008000b4 	movhi	r2,2
   11d8c:	10b4d904 	addi	r2,r2,-11420
   11d90:	e0ffff17 	ldw	r3,-4(fp)
   11d94:	18c01f24 	muli	r3,r3,124
   11d98:	18c01b04 	addi	r3,r3,108
   11d9c:	10c7883a 	add	r3,r2,r3
   11da0:	009555b4 	movhi	r2,21846
   11da4:	10aaaa84 	addi	r2,r2,-21846
   11da8:	18800015 	stw	r2,0(r3)
		_InkSupply[isNo].purgePressure = 0;
   11dac:	008000b4 	movhi	r2,2
   11db0:	10b4d904 	addi	r2,r2,-11420
   11db4:	e0ffff17 	ldw	r3,-4(fp)
   11db8:	18c01f24 	muli	r3,r3,124
   11dbc:	18c01d04 	addi	r3,r3,116
   11dc0:	10c5883a 	add	r2,r2,r3
   11dc4:	10000015 	stw	zero,0(r2)
		_InkSupply[isNo].purgeTime	   = 0;
   11dc8:	008000b4 	movhi	r2,2
   11dcc:	10b4d904 	addi	r2,r2,-11420
   11dd0:	e0ffff17 	ldw	r3,-4(fp)
   11dd4:	18c01f24 	muli	r3,r3,124
   11dd8:	18c01e04 	addi	r3,r3,120
   11ddc:	10c5883a 	add	r2,r2,r3
   11de0:	10000015 	stw	zero,0(r2)
		_LastPumpTicks[isNo]		   = _get_pump_ticks(isNo);
   11de4:	e13fff17 	ldw	r4,-4(fp)
   11de8:	00158f40 	call	158f4 <_get_pump_ticks>
   11dec:	1009883a 	mov	r4,r2
   11df0:	008000b4 	movhi	r2,2
   11df4:	10b56504 	addi	r2,r2,-10860
   11df8:	e0ffff17 	ldw	r3,-4(fp)
   11dfc:	18c7883a 	add	r3,r3,r3
   11e00:	18c7883a 	add	r3,r3,r3
   11e04:	10c5883a 	add	r2,r2,r3
   11e08:	11000015 	stw	r4,0(r2)
		_PumpSpeed1000[isNo]		   = 0;
   11e0c:	008000b4 	movhi	r2,2
   11e10:	10b56904 	addi	r2,r2,-10844
   11e14:	e0ffff17 	ldw	r3,-4(fp)
   11e18:	18c7883a 	add	r3,r3,r3
   11e1c:	18c7883a 	add	r3,r3,r3
   11e20:	10c5883a 	add	r2,r2,r3
   11e24:	10000015 	stw	zero,0(r2)
		pRX_Status->ink_supply[isNo].cylinderPresSet = INVALID_VALUE; // 150;
   11e28:	008000b4 	movhi	r2,2
   11e2c:	10b11304 	addi	r2,r2,-15284
   11e30:	10c00017 	ldw	r3,0(r2)
   11e34:	e0bfff17 	ldw	r2,-4(fp)
   11e38:	10801b24 	muli	r2,r2,108
   11e3c:	10802e04 	addi	r2,r2,184
   11e40:	1887883a 	add	r3,r3,r2
   11e44:	009555b4 	movhi	r2,21846
   11e48:	10aaaa84 	addi	r2,r2,-21846
   11e4c:	18800015 	stw	r2,0(r3)
{
	int isNo;

	memset(_InkSupply, 0, sizeof(_InkSupply));

	for (isNo=0; isNo<NIOS_INK_SUPPLY_CNT; isNo++)
   11e50:	e0bfff17 	ldw	r2,-4(fp)
   11e54:	10800044 	addi	r2,r2,1
   11e58:	e0bfff15 	stw	r2,-4(fp)
   11e5c:	e0bfff17 	ldw	r2,-4(fp)
   11e60:	10800110 	cmplti	r2,r2,4
   11e64:	103f5c1e 	bne	r2,zero,11bd8 <__alt_mem_onchip_memory_nios_arm+0xfffc1bd8>
		_LastPumpTicks[isNo]		   = _get_pump_ticks(isNo);
		_PumpSpeed1000[isNo]		   = 0;
		pRX_Status->ink_supply[isNo].cylinderPresSet = INVALID_VALUE; // 150;
	}
//	_PurgeNo	   = -1;
	_ValveOut      = 0;
   11e68:	d024d415 	stw	zero,-27824(gp)
}
   11e6c:	e037883a 	mov	sp,fp
   11e70:	dfc00117 	ldw	ra,4(sp)
   11e74:	df000017 	ldw	fp,0(sp)
   11e78:	dec00204 	addi	sp,sp,8
   11e7c:	f800283a 	ret

00011e80 <ink_tick_10ms>:

//--- ink_tick_10ms -------------------------
void ink_tick_10ms(void)
{
   11e80:	defff604 	addi	sp,sp,-40
   11e84:	dfc00915 	stw	ra,36(sp)
   11e88:	df000815 	stw	fp,32(sp)
   11e8c:	dc000715 	stw	r16,28(sp)
   11e90:	df000804 	addi	fp,sp,32
//	static const INT32 INK_LOW_PRESSURE    = 50; // mbar

//	static INT32 _shutdown_timeout = 0;

	const INT32 cycleTime = 10;
   11e94:	00800284 	movi	r2,10
   11e98:	e0bffe15 	stw	r2,-8(fp)
	INT32 isNo;
	INT32 i;
	INT32 empty_pressure = 800; // 100 * pRX_Config->headsPerColor;
   11e9c:	0080c804 	movi	r2,800
   11ea0:	e0bffb15 	stw	r2,-20(fp)

	_LungVacc = DEGASSING_VACCUUM_WB;
   11ea4:	0080c804 	movi	r2,800
   11ea8:	d0a4d215 	stw	r2,-27832(gp)

	for(isNo = 0 ; isNo < NIOS_INK_SUPPLY_CNT ; isNo++)
   11eac:	e03ff915 	stw	zero,-28(fp)
   11eb0:	00012106 	br	12338 <ink_tick_10ms+0x4b8>
	{
		pRX_Status->ink_supply[isNo].cylinderPresSet = pRX_Config->ink_supply[isNo].cylinderPresSet;
   11eb4:	008000b4 	movhi	r2,2
   11eb8:	10b11304 	addi	r2,r2,-15284
   11ebc:	11000017 	ldw	r4,0(r2)
   11ec0:	008000b4 	movhi	r2,2
   11ec4:	10b11404 	addi	r2,r2,-15280
   11ec8:	10c00017 	ldw	r3,0(r2)
   11ecc:	e0bff917 	ldw	r2,-28(fp)
   11ed0:	10801724 	muli	r2,r2,92
   11ed4:	10800a04 	addi	r2,r2,40
   11ed8:	1885883a 	add	r2,r3,r2
   11edc:	10c00017 	ldw	r3,0(r2)
   11ee0:	e0bff917 	ldw	r2,-28(fp)
   11ee4:	10801b24 	muli	r2,r2,108
   11ee8:	10802e04 	addi	r2,r2,184
   11eec:	2085883a 	add	r2,r4,r2
   11ef0:	10c00015 	stw	r3,0(r2)

		pRX_Status->ink_supply[isNo].fluid_PIDpump_P 		= _InkSupply[isNo].pid_Pump.P;
   11ef4:	008000b4 	movhi	r2,2
   11ef8:	10b11304 	addi	r2,r2,-15284
   11efc:	11000017 	ldw	r4,0(r2)
   11f00:	008000b4 	movhi	r2,2
   11f04:	10b4d904 	addi	r2,r2,-11420
   11f08:	e0fff917 	ldw	r3,-28(fp)
   11f0c:	18c01f24 	muli	r3,r3,124
   11f10:	18c00904 	addi	r3,r3,36
   11f14:	10c5883a 	add	r2,r2,r3
   11f18:	10c00017 	ldw	r3,0(r2)
   11f1c:	e0bff917 	ldw	r2,-28(fp)
   11f20:	10801b24 	muli	r2,r2,108
   11f24:	10803c04 	addi	r2,r2,240
   11f28:	2085883a 	add	r2,r4,r2
   11f2c:	10c00015 	stw	r3,0(r2)
		pRX_Status->ink_supply[isNo].fluid_PIDpump_I 		= _InkSupply[isNo].pid_Pump.I;
   11f30:	008000b4 	movhi	r2,2
   11f34:	10b11304 	addi	r2,r2,-15284
   11f38:	11000017 	ldw	r4,0(r2)
   11f3c:	008000b4 	movhi	r2,2
   11f40:	10b4d904 	addi	r2,r2,-11420
   11f44:	e0fff917 	ldw	r3,-28(fp)
   11f48:	18c01f24 	muli	r3,r3,124
   11f4c:	18c00a04 	addi	r3,r3,40
   11f50:	10c5883a 	add	r2,r2,r3
   11f54:	10c00017 	ldw	r3,0(r2)
   11f58:	e0bff917 	ldw	r2,-28(fp)
   11f5c:	10801b24 	muli	r2,r2,108
   11f60:	10803d04 	addi	r2,r2,244
   11f64:	2085883a 	add	r2,r4,r2
   11f68:	10c00015 	stw	r3,0(r2)

		pRX_Status->ink_supply[isNo].fluid_PIDsetpoint_P 	= _InkSupply[isNo].pid_Setpoint.P;
   11f6c:	008000b4 	movhi	r2,2
   11f70:	10b11304 	addi	r2,r2,-15284
   11f74:	11000017 	ldw	r4,0(r2)
   11f78:	008000b4 	movhi	r2,2
   11f7c:	10b4d904 	addi	r2,r2,-11420
   11f80:	e0fff917 	ldw	r3,-28(fp)
   11f84:	18c01f24 	muli	r3,r3,124
   11f88:	18c00104 	addi	r3,r3,4
   11f8c:	10c5883a 	add	r2,r2,r3
   11f90:	10c00017 	ldw	r3,0(r2)
   11f94:	e0bff917 	ldw	r2,-28(fp)
   11f98:	10801b24 	muli	r2,r2,108
   11f9c:	10803a04 	addi	r2,r2,232
   11fa0:	2085883a 	add	r2,r4,r2
   11fa4:	10c00015 	stw	r3,0(r2)
		pRX_Status->ink_supply[isNo].fluid_PIDsetpoint_I 	= _InkSupply[isNo].pid_Setpoint.I;
   11fa8:	008000b4 	movhi	r2,2
   11fac:	10b11304 	addi	r2,r2,-15284
   11fb0:	11000017 	ldw	r4,0(r2)
   11fb4:	008000b4 	movhi	r2,2
   11fb8:	10b4d904 	addi	r2,r2,-11420
   11fbc:	e0fff917 	ldw	r3,-28(fp)
   11fc0:	18c01f24 	muli	r3,r3,124
   11fc4:	18c00204 	addi	r3,r3,8
   11fc8:	10c5883a 	add	r2,r2,r3
   11fcc:	10c00017 	ldw	r3,0(r2)
   11fd0:	e0bff917 	ldw	r2,-28(fp)
   11fd4:	10801b24 	muli	r2,r2,108
   11fd8:	10803b04 	addi	r2,r2,236
   11fdc:	2085883a 	add	r2,r4,r2
   11fe0:	10c00015 	stw	r3,0(r2)

		//--- lung vacuum: UV when any heater is on ---
		if (!(pRX_Status->ink_supply[isNo].error & err_heater_board)) _LungVacc = DEGASSING_VACCUUM_UV;
   11fe4:	008000b4 	movhi	r2,2
   11fe8:	10b11304 	addi	r2,r2,-15284
   11fec:	10c00017 	ldw	r3,0(r2)
   11ff0:	e0bff917 	ldw	r2,-28(fp)
   11ff4:	10801b24 	muli	r2,r2,108
   11ff8:	10802904 	addi	r2,r2,164
   11ffc:	1885883a 	add	r2,r3,r2
   12000:	10800017 	ldw	r2,0(r2)
   12004:	1080010c 	andi	r2,r2,4
   12008:	1000021e 	bne	r2,zero,12014 <ink_tick_10ms+0x194>
   1200c:	0080c804 	movi	r2,800
   12010:	d0a4d215 	stw	r2,-27832(gp)

		//---  check if message received from printhead ---------------------
		if(pRX_Config->ink_supply[isNo].alive != _InkSupply[isNo].alive)
   12014:	008000b4 	movhi	r2,2
   12018:	10b11404 	addi	r2,r2,-15280
   1201c:	10c00017 	ldw	r3,0(r2)
   12020:	e0bff917 	ldw	r2,-28(fp)
   12024:	10801724 	muli	r2,r2,92
   12028:	10801304 	addi	r2,r2,76
   1202c:	1885883a 	add	r2,r3,r2
   12030:	10c00017 	ldw	r3,0(r2)
   12034:	008000b4 	movhi	r2,2
   12038:	10b4d904 	addi	r2,r2,-11420
   1203c:	e13ff917 	ldw	r4,-28(fp)
   12040:	21001f24 	muli	r4,r4,124
   12044:	21001804 	addi	r4,r4,96
   12048:	1105883a 	add	r2,r2,r4
   1204c:	10800017 	ldw	r2,0(r2)
   12050:	18801826 	beq	r3,r2,120b4 <ink_tick_10ms+0x234>
		{
			_InkSupply[isNo].alive = pRX_Config->ink_supply[isNo].alive;
   12054:	008000b4 	movhi	r2,2
   12058:	10b11404 	addi	r2,r2,-15280
   1205c:	10c00017 	ldw	r3,0(r2)
   12060:	e0bff917 	ldw	r2,-28(fp)
   12064:	10801724 	muli	r2,r2,92
   12068:	10801304 	addi	r2,r2,76
   1206c:	1885883a 	add	r2,r3,r2
   12070:	10c00017 	ldw	r3,0(r2)
   12074:	008000b4 	movhi	r2,2
   12078:	10b4d904 	addi	r2,r2,-11420
   1207c:	e13ff917 	ldw	r4,-28(fp)
   12080:	21001f24 	muli	r4,r4,124
   12084:	21001804 	addi	r4,r4,96
   12088:	1105883a 	add	r2,r2,r4
   1208c:	10c00015 	stw	r3,0(r2)
			_InkSupply[isNo].connected	= 1000; // timeout in ms
   12090:	008000b4 	movhi	r2,2
   12094:	10b4d904 	addi	r2,r2,-11420
   12098:	e0fff917 	ldw	r3,-28(fp)
   1209c:	18c01f24 	muli	r3,r3,124
   120a0:	18c01904 	addi	r3,r3,100
   120a4:	10c5883a 	add	r2,r2,r3
   120a8:	00c0fa04 	movi	r3,1000
   120ac:	10c00015 	stw	r3,0(r2)
   120b0:	00001806 	br	12114 <ink_tick_10ms+0x294>
		}
		else if (_InkSupply[isNo].connected>0)
   120b4:	008000b4 	movhi	r2,2
   120b8:	10b4d904 	addi	r2,r2,-11420
   120bc:	e0fff917 	ldw	r3,-28(fp)
   120c0:	18c01f24 	muli	r3,r3,124
   120c4:	18c01904 	addi	r3,r3,100
   120c8:	10c5883a 	add	r2,r2,r3
   120cc:	10800017 	ldw	r2,0(r2)
   120d0:	0080100e 	bge	zero,r2,12114 <ink_tick_10ms+0x294>
		{
			_InkSupply[isNo].connected-=cycleTime;
   120d4:	008000b4 	movhi	r2,2
   120d8:	10b4d904 	addi	r2,r2,-11420
   120dc:	e0fff917 	ldw	r3,-28(fp)
   120e0:	18c01f24 	muli	r3,r3,124
   120e4:	18c01904 	addi	r3,r3,100
   120e8:	10c5883a 	add	r2,r2,r3
   120ec:	10c00017 	ldw	r3,0(r2)
   120f0:	e0bffe17 	ldw	r2,-8(fp)
   120f4:	1887c83a 	sub	r3,r3,r2
   120f8:	008000b4 	movhi	r2,2
   120fc:	10b4d904 	addi	r2,r2,-11420
   12100:	e13ff917 	ldw	r4,-28(fp)
   12104:	21001f24 	muli	r4,r4,124
   12108:	21001904 	addi	r4,r4,100
   1210c:	1105883a 	add	r2,r2,r4
   12110:	10c00015 	stw	r3,0(r2)
		}

		// overpressure check
		if (pRX_Status->ink_supply[isNo].IS_Pressure_Actual != INVALID_VALUE
   12114:	008000b4 	movhi	r2,2
   12118:	10b11304 	addi	r2,r2,-15284
   1211c:	10c00017 	ldw	r3,0(r2)
   12120:	e0bff917 	ldw	r2,-28(fp)
   12124:	10801b24 	muli	r2,r2,108
   12128:	10802f04 	addi	r2,r2,188
   1212c:	1885883a 	add	r2,r3,r2
   12130:	10c00017 	ldw	r3,0(r2)
   12134:	009555b4 	movhi	r2,21846
   12138:	10aaaa84 	addi	r2,r2,-21846
   1213c:	18807b26 	beq	r3,r2,1232c <ink_tick_10ms+0x4ac>
		&&  pRX_Status->ink_supply[isNo].IS_Pressure_Actual > MAX_PRESSURE_FLUID
   12140:	008000b4 	movhi	r2,2
   12144:	10b11304 	addi	r2,r2,-15284
   12148:	10c00017 	ldw	r3,0(r2)
   1214c:	e0bff917 	ldw	r2,-28(fp)
   12150:	10801b24 	muli	r2,r2,108
   12154:	10802f04 	addi	r2,r2,188
   12158:	1885883a 	add	r2,r3,r2
   1215c:	10800017 	ldw	r2,0(r2)
   12160:	10812c50 	cmplti	r2,r2,1201
   12164:	1000711e 	bne	r2,zero,1232c <ink_tick_10ms+0x4ac>
		)
		{
			if (pRX_Config->ink_supply[isNo].ctrl_mode != ctrl_test
   12168:	008000b4 	movhi	r2,2
   1216c:	10b11404 	addi	r2,r2,-15280
   12170:	10c00017 	ldw	r3,0(r2)
   12174:	e0bff917 	ldw	r2,-28(fp)
   12178:	10801724 	muli	r2,r2,92
   1217c:	10800904 	addi	r2,r2,36
   12180:	1885883a 	add	r2,r3,r2
   12184:	10c00017 	ldw	r3,0(r2)
   12188:	00800074 	movhi	r2,1
   1218c:	10800044 	addi	r2,r2,1
   12190:	18806626 	beq	r3,r2,1232c <ink_tick_10ms+0x4ac>
			&& (pRX_Config->ink_supply[isNo].ctrl_mode < ctrl_check_step0 ||  pRX_Config->ink_supply[isNo].ctrl_mode > ctrl_check_step9)
   12194:	008000b4 	movhi	r2,2
   12198:	10b11404 	addi	r2,r2,-15280
   1219c:	10c00017 	ldw	r3,0(r2)
   121a0:	e0bff917 	ldw	r2,-28(fp)
   121a4:	10801724 	muli	r2,r2,92
   121a8:	10800904 	addi	r2,r2,36
   121ac:	1885883a 	add	r2,r3,r2
   121b0:	10800017 	ldw	r2,0(r2)
   121b4:	10800430 	cmpltui	r2,r2,16
   121b8:	10000a1e 	bne	r2,zero,121e4 <ink_tick_10ms+0x364>
   121bc:	008000b4 	movhi	r2,2
   121c0:	10b11404 	addi	r2,r2,-15280
   121c4:	10c00017 	ldw	r3,0(r2)
   121c8:	e0bff917 	ldw	r2,-28(fp)
   121cc:	10801724 	muli	r2,r2,92
   121d0:	10800904 	addi	r2,r2,36
   121d4:	1885883a 	add	r2,r3,r2
   121d8:	10800017 	ldw	r2,0(r2)
   121dc:	108006b0 	cmpltui	r2,r2,26
   121e0:	1000521e 	bne	r2,zero,1232c <ink_tick_10ms+0x4ac>
			&& 	pRX_Config->ink_supply[isNo].ctrl_mode > ctrl_off
   121e4:	008000b4 	movhi	r2,2
   121e8:	10b11404 	addi	r2,r2,-15280
   121ec:	10c00017 	ldw	r3,0(r2)
   121f0:	e0bff917 	ldw	r2,-28(fp)
   121f4:	10801724 	muli	r2,r2,92
   121f8:	10800904 	addi	r2,r2,36
   121fc:	1885883a 	add	r2,r3,r2
   12200:	10800017 	ldw	r2,0(r2)
   12204:	10800170 	cmpltui	r2,r2,5
   12208:	1000481e 	bne	r2,zero,1232c <ink_tick_10ms+0x4ac>
			&& (pRX_Config->ink_supply[isNo].ctrl_mode < ctrl_empty ||  pRX_Config->ink_supply[isNo].ctrl_mode > ctrl_empty+10)
   1220c:	008000b4 	movhi	r2,2
   12210:	10b11404 	addi	r2,r2,-15280
   12214:	10c00017 	ldw	r3,0(r2)
   12218:	e0bff917 	ldw	r2,-28(fp)
   1221c:	10801724 	muli	r2,r2,92
   12220:	10800904 	addi	r2,r2,36
   12224:	1885883a 	add	r2,r3,r2
   12228:	10800017 	ldw	r2,0(r2)
   1222c:	1080c030 	cmpltui	r2,r2,768
   12230:	10000a1e 	bne	r2,zero,1225c <ink_tick_10ms+0x3dc>
   12234:	008000b4 	movhi	r2,2
   12238:	10b11404 	addi	r2,r2,-15280
   1223c:	10c00017 	ldw	r3,0(r2)
   12240:	e0bff917 	ldw	r2,-28(fp)
   12244:	10801724 	muli	r2,r2,92
   12248:	10800904 	addi	r2,r2,36
   1224c:	1885883a 	add	r2,r3,r2
   12250:	10800017 	ldw	r2,0(r2)
   12254:	1080c2f0 	cmpltui	r2,r2,779
   12258:	1000341e 	bne	r2,zero,1232c <ink_tick_10ms+0x4ac>
			&& (pRX_Config->ink_supply[isNo].ctrl_mode < ctrl_flush_night ||  pRX_Config->ink_supply[isNo].ctrl_mode > ctrl_flush_done)
   1225c:	008000b4 	movhi	r2,2
   12260:	10b11404 	addi	r2,r2,-15280
   12264:	10c00017 	ldw	r3,0(r2)
   12268:	e0bff917 	ldw	r2,-28(fp)
   1226c:	10801724 	muli	r2,r2,92
   12270:	10800904 	addi	r2,r2,36
   12274:	1885883a 	add	r2,r3,r2
   12278:	10800017 	ldw	r2,0(r2)
   1227c:	10802030 	cmpltui	r2,r2,128
   12280:	10000a1e 	bne	r2,zero,122ac <ink_tick_10ms+0x42c>
   12284:	008000b4 	movhi	r2,2
   12288:	10b11404 	addi	r2,r2,-15280
   1228c:	10c00017 	ldw	r3,0(r2)
   12290:	e0bff917 	ldw	r2,-28(fp)
   12294:	10801724 	muli	r2,r2,92
   12298:	10800904 	addi	r2,r2,36
   1229c:	1885883a 	add	r2,r3,r2
   122a0:	10800017 	ldw	r2,0(r2)
   122a4:	10802230 	cmpltui	r2,r2,136
   122a8:	1000201e 	bne	r2,zero,1232c <ink_tick_10ms+0x4ac>
			)
			{
				_set_pump_speed(isNo, 0);
   122ac:	e13ff917 	ldw	r4,-28(fp)
   122b0:	000b883a 	mov	r5,zero
   122b4:	00157c80 	call	157c8 <_set_pump_speed>
				_set_air_valve(isNo, TRUE);
   122b8:	e13ff917 	ldw	r4,-28(fp)
   122bc:	01400044 	movi	r5,1
   122c0:	0014ddc0 	call	14ddc <_set_air_valve>
				_InkSupply[isNo].degassing=FALSE;
   122c4:	008000b4 	movhi	r2,2
   122c8:	10b4d904 	addi	r2,r2,-11420
   122cc:	e0fff917 	ldw	r3,-28(fp)
   122d0:	18c01f24 	muli	r3,r3,124
   122d4:	18c01a04 	addi	r3,r3,104
   122d8:	10c5883a 	add	r2,r2,r3
   122dc:	10000015 	stw	zero,0(r2)
				_set_air_pump(FALSE);
   122e0:	0009883a 	mov	r4,zero
   122e4:	0015b6c0 	call	15b6c <_set_air_pump>

				pRX_Status->ink_supply[isNo].error |= err_overpressure;
   122e8:	008000b4 	movhi	r2,2
   122ec:	10b11304 	addi	r2,r2,-15284
   122f0:	11000017 	ldw	r4,0(r2)
   122f4:	008000b4 	movhi	r2,2
   122f8:	10b11304 	addi	r2,r2,-15284
   122fc:	10c00017 	ldw	r3,0(r2)
   12300:	e0bff917 	ldw	r2,-28(fp)
   12304:	10801b24 	muli	r2,r2,108
   12308:	10802904 	addi	r2,r2,164
   1230c:	1885883a 	add	r2,r3,r2
   12310:	10800017 	ldw	r2,0(r2)
   12314:	10c01014 	ori	r3,r2,64
   12318:	e0bff917 	ldw	r2,-28(fp)
   1231c:	10801b24 	muli	r2,r2,108
   12320:	10802904 	addi	r2,r2,164
   12324:	2085883a 	add	r2,r4,r2
   12328:	10c00015 	stw	r3,0(r2)
	INT32 i;
	INT32 empty_pressure = 800; // 100 * pRX_Config->headsPerColor;

	_LungVacc = DEGASSING_VACCUUM_WB;

	for(isNo = 0 ; isNo < NIOS_INK_SUPPLY_CNT ; isNo++)
   1232c:	e0bff917 	ldw	r2,-28(fp)
   12330:	10800044 	addi	r2,r2,1
   12334:	e0bff915 	stw	r2,-28(fp)
   12338:	e0bff917 	ldw	r2,-28(fp)
   1233c:	10800110 	cmplti	r2,r2,4
   12340:	103edc1e 	bne	r2,zero,11eb4 <__alt_mem_onchip_memory_nios_arm+0xfffc1eb4>
				pRX_Status->ink_supply[isNo].error |= err_overpressure;
			}
		}
	}

	for(isNo = 0 ; isNo < NIOS_INK_SUPPLY_CNT ; isNo++)
   12344:	e03ff915 	stw	zero,-28(fp)
   12348:	0008a806 	br	145ec <ink_tick_10ms+0x276c>
	{
		switch(pRX_Config->ink_supply[isNo].ctrl_mode)
   1234c:	008000b4 	movhi	r2,2
   12350:	10b11404 	addi	r2,r2,-15280
   12354:	10c00017 	ldw	r3,0(r2)
   12358:	e0bff917 	ldw	r2,-28(fp)
   1235c:	10801724 	muli	r2,r2,92
   12360:	10800904 	addi	r2,r2,36
   12364:	1885883a 	add	r2,r3,r2
   12368:	10800017 	ldw	r2,0(r2)
   1236c:	10c04060 	cmpeqi	r3,r2,257
   12370:	1806341e 	bne	r3,zero,13c44 <ink_tick_10ms+0x1dc4>
   12374:	10c040a8 	cmpgeui	r3,r2,258
   12378:	1800201e 	bne	r3,zero,123fc <ink_tick_10ms+0x57c>
   1237c:	10c020e8 	cmpgeui	r3,r2,131
   12380:	1800131e 	bne	r3,zero,123d0 <ink_tick_10ms+0x550>
   12384:	10c02028 	cmpgeui	r3,r2,128
   12388:	1804d81e 	bne	r3,zero,136ec <ink_tick_10ms+0x186c>
   1238c:	10c00120 	cmpeqi	r3,r2,4
   12390:	1801511e 	bne	r3,zero,128d8 <ink_tick_10ms+0xa58>
   12394:	10c00168 	cmpgeui	r3,r2,5
   12398:	1800061e 	bne	r3,zero,123b4 <ink_tick_10ms+0x534>
   1239c:	10c00060 	cmpeqi	r3,r2,1
   123a0:	18003f1e 	bne	r3,zero,124a0 <ink_tick_10ms+0x620>
   123a4:	00814c2e 	bgeu	zero,r2,128d8 <ink_tick_10ms+0xa58>
   123a8:	108000a0 	cmpeqi	r2,r2,2
   123ac:	1000a11e 	bne	r2,zero,12634 <ink_tick_10ms+0x7b4>
   123b0:	00084e06 	br	144ec <ink_tick_10ms+0x266c>
   123b4:	10c001a0 	cmpeqi	r3,r2,6
   123b8:	1808881e 	bne	r3,zero,145dc <ink_tick_10ms+0x275c>
   123bc:	10c001b0 	cmpltui	r3,r2,6
   123c0:	1804a01e 	bne	r3,zero,13644 <ink_tick_10ms+0x17c4>
   123c4:	108001e0 	cmpeqi	r2,r2,7
   123c8:	1001a61e 	bne	r2,zero,12a64 <ink_tick_10ms+0xbe4>
   123cc:	00084706 	br	144ec <ink_tick_10ms+0x266c>
   123d0:	10c02160 	cmpeqi	r3,r2,133
   123d4:	1805361e 	bne	r3,zero,138b0 <ink_tick_10ms+0x1a30>
   123d8:	10c02170 	cmpltui	r3,r2,133
   123dc:	1805091e 	bne	r3,zero,13804 <ink_tick_10ms+0x1984>
   123e0:	10c021e0 	cmpeqi	r3,r2,135
   123e4:	1806091e 	bne	r3,zero,13c0c <ink_tick_10ms+0x1d8c>
   123e8:	10c021f0 	cmpltui	r3,r2,135
   123ec:	1805a71e 	bne	r3,zero,13a8c <ink_tick_10ms+0x1c0c>
   123f0:	10804020 	cmpeqi	r2,r2,256
   123f4:	10060f1e 	bne	r2,zero,13c34 <ink_tick_10ms+0x1db4>
   123f8:	00083c06 	br	144ec <ink_tick_10ms+0x266c>
   123fc:	10c08020 	cmpeqi	r3,r2,512
   12400:	1806b91e 	bne	r3,zero,13ee8 <ink_tick_10ms+0x2068>
   12404:	10c08068 	cmpgeui	r3,r2,513
   12408:	1800101e 	bne	r3,zero,1244c <ink_tick_10ms+0x5cc>
   1240c:	10c044e8 	cmpgeui	r3,r2,275
   12410:	1800071e 	bne	r3,zero,12430 <ink_tick_10ms+0x5b0>
   12414:	10c04468 	cmpgeui	r3,r2,273
   12418:	1806161e 	bne	r3,zero,13c74 <ink_tick_10ms+0x1df4>
   1241c:	10c040a0 	cmpeqi	r3,r2,258
   12420:	18060c1e 	bne	r3,zero,13c54 <ink_tick_10ms+0x1dd4>
   12424:	108040e0 	cmpeqi	r2,r2,259
   12428:	10060e1e 	bne	r2,zero,13c64 <ink_tick_10ms+0x1de4>
   1242c:	00082f06 	br	144ec <ink_tick_10ms+0x266c>
   12430:	10c04520 	cmpeqi	r3,r2,276
   12434:	18065c1e 	bne	r3,zero,13da8 <ink_tick_10ms+0x1f28>
   12438:	10c04530 	cmpltui	r3,r2,276
   1243c:	1806291e 	bne	r3,zero,13ce4 <ink_tick_10ms+0x1e64>
   12440:	10804560 	cmpeqi	r2,r2,277
   12444:	10069e1e 	bne	r2,zero,13ec0 <ink_tick_10ms+0x2040>
   12448:	00082806 	br	144ec <ink_tick_10ms+0x266c>
   1244c:	10c0c020 	cmpeqi	r3,r2,768
   12450:	1807281e 	bne	r3,zero,140f4 <ink_tick_10ms+0x2274>
   12454:	10c0c068 	cmpgeui	r3,r2,769
   12458:	1800071e 	bne	r3,zero,12478 <ink_tick_10ms+0x5f8>
   1245c:	10c080a0 	cmpeqi	r3,r2,514
   12460:	1806e01e 	bne	r3,zero,13fe4 <ink_tick_10ms+0x2164>
   12464:	10c080b0 	cmpltui	r3,r2,514
   12468:	1806c61e 	bne	r3,zero,13f84 <ink_tick_10ms+0x2104>
   1246c:	108080e0 	cmpeqi	r2,r2,515
   12470:	1006fc1e 	bne	r2,zero,14064 <ink_tick_10ms+0x21e4>
   12474:	00081d06 	br	144ec <ink_tick_10ms+0x266c>
   12478:	10c0c0a0 	cmpeqi	r3,r2,770
   1247c:	1807621e 	bne	r3,zero,14208 <ink_tick_10ms+0x2388>
   12480:	10c0c0b0 	cmpltui	r3,r2,770
   12484:	18072b1e 	bne	r3,zero,14134 <ink_tick_10ms+0x22b4>
   12488:	10c0c0e0 	cmpeqi	r3,r2,771
   1248c:	1807ff1e 	bne	r3,zero,1448c <ink_tick_10ms+0x260c>
   12490:	00c00074 	movhi	r3,1
   12494:	18c00044 	addi	r3,r3,1
   12498:	10c25c26 	beq	r2,r3,12e0c <ink_tick_10ms+0xf8c>
   1249c:	00081306 	br	144ec <ink_tick_10ms+0x266c>
		{
			case ctrl_shutdown:
				_PressureSetpoint[isNo] = pRX_Config->ink_supply[isNo].condPumpFeedback;
   124a0:	008000b4 	movhi	r2,2
   124a4:	10b11404 	addi	r2,r2,-15280
   124a8:	10c00017 	ldw	r3,0(r2)
   124ac:	e0bff917 	ldw	r2,-28(fp)
   124b0:	10801724 	muli	r2,r2,92
   124b4:	10801904 	addi	r2,r2,100
   124b8:	1885883a 	add	r2,r3,r2
   124bc:	10800017 	ldw	r2,0(r2)
   124c0:	1009883a 	mov	r4,r2
   124c4:	008000b4 	movhi	r2,2
   124c8:	10b55d04 	addi	r2,r2,-10892
   124cc:	e0fff917 	ldw	r3,-28(fp)
   124d0:	18c7883a 	add	r3,r3,r3
   124d4:	18c7883a 	add	r3,r3,r3
   124d8:	10c5883a 	add	r2,r2,r3
   124dc:	11000015 	stw	r4,0(r2)
				// if PRINT mode, recalculate integrator with new PI parameters
				// if CALIBRATION or PURGE mode, don't need to recalculate
				if(_ShutdownPrint[isNo] == 1)
   124e0:	008000b4 	movhi	r2,2
   124e4:	10b58504 	addi	r2,r2,-10732
   124e8:	e0fff917 	ldw	r3,-28(fp)
   124ec:	18c7883a 	add	r3,r3,r3
   124f0:	18c7883a 	add	r3,r3,r3
   124f4:	10c5883a 	add	r2,r2,r3
   124f8:	10800017 	ldw	r2,0(r2)
   124fc:	10800058 	cmpnei	r2,r2,1
   12500:	10002d1e 	bne	r2,zero,125b8 <ink_tick_10ms+0x738>
				{
					if(pRX_Config->headsPerColor == 1)
   12504:	008000b4 	movhi	r2,2
   12508:	10b11404 	addi	r2,r2,-15280
   1250c:	10800017 	ldw	r2,0(r2)
   12510:	10800517 	ldw	r2,20(r2)
   12514:	10800058 	cmpnei	r2,r2,1
   12518:	1000111e 	bne	r2,zero,12560 <ink_tick_10ms+0x6e0>
						_InkSupply[isNo].pid_Setpoint.diff_I *= PID_SETPOINT_P_PRINT_HEAD / PID_SETPOINT_P_CHECK;
   1251c:	008000b4 	movhi	r2,2
   12520:	10b4d904 	addi	r2,r2,-11420
   12524:	e0fff917 	ldw	r3,-28(fp)
   12528:	18c01f24 	muli	r3,r3,124
   1252c:	18c00704 	addi	r3,r3,28
   12530:	10c5883a 	add	r2,r2,r3
   12534:	10800017 	ldw	r2,0(r2)
   12538:	1085883a 	add	r2,r2,r2
   1253c:	1009883a 	mov	r4,r2
   12540:	008000b4 	movhi	r2,2
   12544:	10b4d904 	addi	r2,r2,-11420
   12548:	e0fff917 	ldw	r3,-28(fp)
   1254c:	18c01f24 	muli	r3,r3,124
   12550:	18c00704 	addi	r3,r3,28
   12554:	10c5883a 	add	r2,r2,r3
   12558:	11000015 	stw	r4,0(r2)
   1255c:	00000e06 	br	12598 <ink_tick_10ms+0x718>
					else _InkSupply[isNo].pid_Setpoint.diff_I *= PID_SETPOINT_P_PRINT_HEADS / PID_SETPOINT_P_CHECK;
   12560:	008000b4 	movhi	r2,2
   12564:	10b4d904 	addi	r2,r2,-11420
   12568:	e0fff917 	ldw	r3,-28(fp)
   1256c:	18c01f24 	muli	r3,r3,124
   12570:	18c00704 	addi	r3,r3,28
   12574:	10c5883a 	add	r2,r2,r3
   12578:	10c00017 	ldw	r3,0(r2)
   1257c:	008000b4 	movhi	r2,2
   12580:	10b4d904 	addi	r2,r2,-11420
   12584:	e13ff917 	ldw	r4,-28(fp)
   12588:	21001f24 	muli	r4,r4,124
   1258c:	21000704 	addi	r4,r4,28
   12590:	1105883a 	add	r2,r2,r4
   12594:	10c00015 	stw	r3,0(r2)
					_ShutdownPrint[isNo] = 3;
   12598:	008000b4 	movhi	r2,2
   1259c:	10b58504 	addi	r2,r2,-10732
   125a0:	e0fff917 	ldw	r3,-28(fp)
   125a4:	18c7883a 	add	r3,r3,r3
   125a8:	18c7883a 	add	r3,r3,r3
   125ac:	10c5883a 	add	r2,r2,r3
   125b0:	00c000c4 	movi	r3,3
   125b4:	10c00015 	stw	r3,0(r2)
				}

				pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   125b8:	008000b4 	movhi	r2,2
   125bc:	10b11304 	addi	r2,r2,-15284
   125c0:	11000017 	ldw	r4,0(r2)
   125c4:	008000b4 	movhi	r2,2
   125c8:	10b11404 	addi	r2,r2,-15280
   125cc:	10c00017 	ldw	r3,0(r2)
   125d0:	e0bff917 	ldw	r2,-28(fp)
   125d4:	10801724 	muli	r2,r2,92
   125d8:	10800904 	addi	r2,r2,36
   125dc:	1885883a 	add	r2,r3,r2
   125e0:	10c00017 	ldw	r3,0(r2)
   125e4:	e0bff917 	ldw	r2,-28(fp)
   125e8:	10801b24 	muli	r2,r2,108
   125ec:	10802a04 	addi	r2,r2,168
   125f0:	2085883a 	add	r2,r4,r2
   125f4:	10c00015 	stw	r3,0(r2)
				_ShutdownTimeStability[isNo] = 0;
   125f8:	008000b4 	movhi	r2,2
   125fc:	10b58904 	addi	r2,r2,-10716
   12600:	e0fff917 	ldw	r3,-28(fp)
   12604:	18c7883a 	add	r3,r3,r3
   12608:	18c7883a 	add	r3,r3,r3
   1260c:	10c5883a 	add	r2,r2,r3
   12610:	10000015 	stw	zero,0(r2)
				_ShutdownTimeOut[isNo] = 0;
   12614:	008000b4 	movhi	r2,2
   12618:	10b58d04 	addi	r2,r2,-10700
   1261c:	e0fff917 	ldw	r3,-28(fp)
   12620:	18c7883a 	add	r3,r3,r3
   12624:	18c7883a 	add	r3,r3,r3
   12628:	10c5883a 	add	r2,r2,r3
   1262c:	10000015 	stw	zero,0(r2)
				break;
   12630:	0007eb06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_shutdown_done:

				if(_ShutdownPrint[isNo] >= 1)
   12634:	008000b4 	movhi	r2,2
   12638:	10b58504 	addi	r2,r2,-10732
   1263c:	e0fff917 	ldw	r3,-28(fp)
   12640:	18c7883a 	add	r3,r3,r3
   12644:	18c7883a 	add	r3,r3,r3
   12648:	10c5883a 	add	r2,r2,r3
   1264c:	10800017 	ldw	r2,0(r2)
   12650:	00808f0e 	bge	zero,r2,12890 <ink_tick_10ms+0xa10>
				{
					if(_PressureSetpoint[isNo] > 30) _PressureSetpoint[isNo]--;
   12654:	008000b4 	movhi	r2,2
   12658:	10b55d04 	addi	r2,r2,-10892
   1265c:	e0fff917 	ldw	r3,-28(fp)
   12660:	18c7883a 	add	r3,r3,r3
   12664:	18c7883a 	add	r3,r3,r3
   12668:	10c5883a 	add	r2,r2,r3
   1266c:	10800017 	ldw	r2,0(r2)
   12670:	108007d0 	cmplti	r2,r2,31
   12674:	1000101e 	bne	r2,zero,126b8 <ink_tick_10ms+0x838>
   12678:	008000b4 	movhi	r2,2
   1267c:	10b55d04 	addi	r2,r2,-10892
   12680:	e0fff917 	ldw	r3,-28(fp)
   12684:	18c7883a 	add	r3,r3,r3
   12688:	18c7883a 	add	r3,r3,r3
   1268c:	10c5883a 	add	r2,r2,r3
   12690:	10800017 	ldw	r2,0(r2)
   12694:	113fffc4 	addi	r4,r2,-1
   12698:	008000b4 	movhi	r2,2
   1269c:	10b55d04 	addi	r2,r2,-10892
   126a0:	e0fff917 	ldw	r3,-28(fp)
   126a4:	18c7883a 	add	r3,r3,r3
   126a8:	18c7883a 	add	r3,r3,r3
   126ac:	10c5883a 	add	r2,r2,r3
   126b0:	11000015 	stw	r4,0(r2)
   126b4:	00000806 	br	126d8 <ink_tick_10ms+0x858>
					else _PressureSetpoint[isNo] = 30;
   126b8:	008000b4 	movhi	r2,2
   126bc:	10b55d04 	addi	r2,r2,-10892
   126c0:	e0fff917 	ldw	r3,-28(fp)
   126c4:	18c7883a 	add	r3,r3,r3
   126c8:	18c7883a 	add	r3,r3,r3
   126cc:	10c5883a 	add	r2,r2,r3
   126d0:	00c00784 	movi	r3,30
   126d4:	10c00015 	stw	r3,0(r2)
					_pump_ctrl(isNo, _PressureSetpoint[isNo], PUMP_CTRL_INK_RECIRCULATION);
   126d8:	008000b4 	movhi	r2,2
   126dc:	10b55d04 	addi	r2,r2,-10892
   126e0:	e0fff917 	ldw	r3,-28(fp)
   126e4:	18c7883a 	add	r3,r3,r3
   126e8:	18c7883a 	add	r3,r3,r3
   126ec:	10c5883a 	add	r2,r2,r3
   126f0:	10800017 	ldw	r2,0(r2)
   126f4:	e13ff917 	ldw	r4,-28(fp)
   126f8:	100b883a 	mov	r5,r2
   126fc:	01800144 	movi	r6,5
   12700:	00150500 	call	15050 <_pump_ctrl>

					if(pRX_Config->ink_supply[isNo].condPumpFeedback < 50) _ShutdownTimeStability[isNo]++;
   12704:	008000b4 	movhi	r2,2
   12708:	10b11404 	addi	r2,r2,-15280
   1270c:	10c00017 	ldw	r3,0(r2)
   12710:	e0bff917 	ldw	r2,-28(fp)
   12714:	10801724 	muli	r2,r2,92
   12718:	10801904 	addi	r2,r2,100
   1271c:	1885883a 	add	r2,r3,r2
   12720:	10800017 	ldw	r2,0(r2)
   12724:	10800ca8 	cmpgeui	r2,r2,50
   12728:	1000101e 	bne	r2,zero,1276c <ink_tick_10ms+0x8ec>
   1272c:	008000b4 	movhi	r2,2
   12730:	10b58904 	addi	r2,r2,-10716
   12734:	e0fff917 	ldw	r3,-28(fp)
   12738:	18c7883a 	add	r3,r3,r3
   1273c:	18c7883a 	add	r3,r3,r3
   12740:	10c5883a 	add	r2,r2,r3
   12744:	10800017 	ldw	r2,0(r2)
   12748:	11000044 	addi	r4,r2,1
   1274c:	008000b4 	movhi	r2,2
   12750:	10b58904 	addi	r2,r2,-10716
   12754:	e0fff917 	ldw	r3,-28(fp)
   12758:	18c7883a 	add	r3,r3,r3
   1275c:	18c7883a 	add	r3,r3,r3
   12760:	10c5883a 	add	r2,r2,r3
   12764:	11000015 	stw	r4,0(r2)
   12768:	00000706 	br	12788 <ink_tick_10ms+0x908>
					else _ShutdownTimeStability[isNo] = 0;
   1276c:	008000b4 	movhi	r2,2
   12770:	10b58904 	addi	r2,r2,-10716
   12774:	e0fff917 	ldw	r3,-28(fp)
   12778:	18c7883a 	add	r3,r3,r3
   1277c:	18c7883a 	add	r3,r3,r3
   12780:	10c5883a 	add	r2,r2,r3
   12784:	10000015 	stw	zero,0(r2)
					if(_ShutdownTimeStability[isNo] > 500)	pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   12788:	008000b4 	movhi	r2,2
   1278c:	10b58904 	addi	r2,r2,-10716
   12790:	e0fff917 	ldw	r3,-28(fp)
   12794:	18c7883a 	add	r3,r3,r3
   12798:	18c7883a 	add	r3,r3,r3
   1279c:	10c5883a 	add	r2,r2,r3
   127a0:	10800017 	ldw	r2,0(r2)
   127a4:	10807d50 	cmplti	r2,r2,501
   127a8:	1000101e 	bne	r2,zero,127ec <ink_tick_10ms+0x96c>
   127ac:	008000b4 	movhi	r2,2
   127b0:	10b11304 	addi	r2,r2,-15284
   127b4:	11000017 	ldw	r4,0(r2)
   127b8:	008000b4 	movhi	r2,2
   127bc:	10b11404 	addi	r2,r2,-15280
   127c0:	10c00017 	ldw	r3,0(r2)
   127c4:	e0bff917 	ldw	r2,-28(fp)
   127c8:	10801724 	muli	r2,r2,92
   127cc:	10800904 	addi	r2,r2,36
   127d0:	1885883a 	add	r2,r3,r2
   127d4:	10c00017 	ldw	r3,0(r2)
   127d8:	e0bff917 	ldw	r2,-28(fp)
   127dc:	10801b24 	muli	r2,r2,108
   127e0:	10802a04 	addi	r2,r2,168
   127e4:	2085883a 	add	r2,r4,r2
   127e8:	10c00015 	stw	r3,0(r2)

					_ShutdownTimeOut[isNo]++;
   127ec:	008000b4 	movhi	r2,2
   127f0:	10b58d04 	addi	r2,r2,-10700
   127f4:	e0fff917 	ldw	r3,-28(fp)
   127f8:	18c7883a 	add	r3,r3,r3
   127fc:	18c7883a 	add	r3,r3,r3
   12800:	10c5883a 	add	r2,r2,r3
   12804:	10800017 	ldw	r2,0(r2)
   12808:	11000044 	addi	r4,r2,1
   1280c:	008000b4 	movhi	r2,2
   12810:	10b58d04 	addi	r2,r2,-10700
   12814:	e0fff917 	ldw	r3,-28(fp)
   12818:	18c7883a 	add	r3,r3,r3
   1281c:	18c7883a 	add	r3,r3,r3
   12820:	10c5883a 	add	r2,r2,r3
   12824:	11000015 	stw	r4,0(r2)
					if(_ShutdownTimeOut[isNo] > 6000) pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   12828:	008000b4 	movhi	r2,2
   1282c:	10b58d04 	addi	r2,r2,-10700
   12830:	e0fff917 	ldw	r3,-28(fp)
   12834:	18c7883a 	add	r3,r3,r3
   12838:	18c7883a 	add	r3,r3,r3
   1283c:	10c5883a 	add	r2,r2,r3
   12840:	10800017 	ldw	r2,0(r2)
   12844:	1085dc50 	cmplti	r2,r2,6001
   12848:	1000221e 	bne	r2,zero,128d4 <ink_tick_10ms+0xa54>
   1284c:	008000b4 	movhi	r2,2
   12850:	10b11304 	addi	r2,r2,-15284
   12854:	11000017 	ldw	r4,0(r2)
   12858:	008000b4 	movhi	r2,2
   1285c:	10b11404 	addi	r2,r2,-15280
   12860:	10c00017 	ldw	r3,0(r2)
   12864:	e0bff917 	ldw	r2,-28(fp)
   12868:	10801724 	muli	r2,r2,92
   1286c:	10800904 	addi	r2,r2,36
   12870:	1885883a 	add	r2,r3,r2
   12874:	10c00017 	ldw	r3,0(r2)
   12878:	e0bff917 	ldw	r2,-28(fp)
   1287c:	10801b24 	muli	r2,r2,108
   12880:	10802a04 	addi	r2,r2,168
   12884:	2085883a 	add	r2,r4,r2
   12888:	10c00015 	stw	r3,0(r2)
				}
				else pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
				break;
   1288c:	00075406 	br	145e0 <ink_tick_10ms+0x2760>
					if(_ShutdownTimeStability[isNo] > 500)	pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;

					_ShutdownTimeOut[isNo]++;
					if(_ShutdownTimeOut[isNo] > 6000) pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
				}
				else pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   12890:	008000b4 	movhi	r2,2
   12894:	10b11304 	addi	r2,r2,-15284
   12898:	11000017 	ldw	r4,0(r2)
   1289c:	008000b4 	movhi	r2,2
   128a0:	10b11404 	addi	r2,r2,-15280
   128a4:	10c00017 	ldw	r3,0(r2)
   128a8:	e0bff917 	ldw	r2,-28(fp)
   128ac:	10801724 	muli	r2,r2,92
   128b0:	10800904 	addi	r2,r2,36
   128b4:	1885883a 	add	r2,r3,r2
   128b8:	10c00017 	ldw	r3,0(r2)
   128bc:	e0bff917 	ldw	r2,-28(fp)
   128c0:	10801b24 	muli	r2,r2,108
   128c4:	10802a04 	addi	r2,r2,168
   128c8:	2085883a 	add	r2,r4,r2
   128cc:	10c00015 	stw	r3,0(r2)
				break;
   128d0:	00074306 	br	145e0 <ink_tick_10ms+0x2760>
   128d4:	00074206 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_undef:
			case ctrl_off:

				pid_reset(&_InkSupply[isNo].pid_Pump);
   128d8:	e0bff917 	ldw	r2,-28(fp)
   128dc:	10801f24 	muli	r2,r2,124
   128e0:	10c00804 	addi	r3,r2,32
   128e4:	008000b4 	movhi	r2,2
   128e8:	10b4d904 	addi	r2,r2,-11420
   128ec:	1885883a 	add	r2,r3,r2
   128f0:	1009883a 	mov	r4,r2
   128f4:	00165780 	call	16578 <pid_reset>
				pid_reset(&_InkSupply[isNo].pid_Setpoint);
   128f8:	e0bff917 	ldw	r2,-28(fp)
   128fc:	10c01f24 	muli	r3,r2,124
   12900:	008000b4 	movhi	r2,2
   12904:	10b4d904 	addi	r2,r2,-11420
   12908:	1885883a 	add	r2,r3,r2
   1290c:	1009883a 	mov	r4,r2
   12910:	00165780 	call	16578 <pid_reset>
				_set_air_valve(isNo, TRUE);
   12914:	e13ff917 	ldw	r4,-28(fp)
   12918:	01400044 	movi	r5,1
   1291c:	0014ddc0 	call	14ddc <_set_air_valve>
				_set_bleed_valve(isNo, FALSE);
   12920:	e13ff917 	ldw	r4,-28(fp)
   12924:	000b883a 	mov	r5,zero
   12928:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_ShutdownPrint[isNo] = 0;
   1292c:	008000b4 	movhi	r2,2
   12930:	10b58504 	addi	r2,r2,-10732
   12934:	e0fff917 	ldw	r3,-28(fp)
   12938:	18c7883a 	add	r3,r3,r3
   1293c:	18c7883a 	add	r3,r3,r3
   12940:	10c5883a 	add	r2,r2,r3
   12944:	10000015 	stw	zero,0(r2)

				{
					int i, on=FALSE;
   12948:	e03ffd15 	stw	zero,-12(fp)
					for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   1294c:	e03ffc15 	stw	zero,-16(fp)
   12950:	00001006 	br	12994 <ink_tick_10ms+0xb14>
					{
						on |= (pRX_Config->ink_supply[i].ctrl_mode>ctrl_off);
   12954:	008000b4 	movhi	r2,2
   12958:	10b11404 	addi	r2,r2,-15280
   1295c:	10c00017 	ldw	r3,0(r2)
   12960:	e0bffc17 	ldw	r2,-16(fp)
   12964:	10801724 	muli	r2,r2,92
   12968:	10800904 	addi	r2,r2,36
   1296c:	1885883a 	add	r2,r3,r2
   12970:	10800017 	ldw	r2,0(r2)
   12974:	10800168 	cmpgeui	r2,r2,5
   12978:	10803fcc 	andi	r2,r2,255
   1297c:	e0fffd17 	ldw	r3,-12(fp)
   12980:	1884b03a 	or	r2,r3,r2
   12984:	e0bffd15 	stw	r2,-12(fp)
				_set_bleed_valve(isNo, FALSE);
				_ShutdownPrint[isNo] = 0;

				{
					int i, on=FALSE;
					for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   12988:	e0bffc17 	ldw	r2,-16(fp)
   1298c:	10800044 	addi	r2,r2,1
   12990:	e0bffc15 	stw	r2,-16(fp)
   12994:	e0bffc17 	ldw	r2,-16(fp)
   12998:	10800110 	cmplti	r2,r2,4
   1299c:	103fed1e 	bne	r2,zero,12954 <__alt_mem_onchip_memory_nios_arm+0xfffc2954>
					{
						on |= (pRX_Config->ink_supply[i].ctrl_mode>ctrl_off);
					}
					if (!on) _set_pressure_value(FALSE);
   129a0:	e0bffd17 	ldw	r2,-12(fp)
   129a4:	1000021e 	bne	r2,zero,129b0 <ink_tick_10ms+0xb30>
   129a8:	0009883a 	mov	r4,zero
   129ac:	0014f8c0 	call	14f8c <_set_pressure_value>
				}
				_set_flush_pump(isNo, FALSE);
   129b0:	e13ff917 	ldw	r4,-28(fp)
   129b4:	000b883a 	mov	r5,zero
   129b8:	00159340 	call	15934 <_set_flush_pump>
				_set_pump_speed(isNo, 0);
   129bc:	e13ff917 	ldw	r4,-28(fp)
   129c0:	000b883a 	mov	r5,zero
   129c4:	00157c80 	call	157c8 <_set_pump_speed>

				_InkSupply[isNo].degassing=FALSE;
   129c8:	008000b4 	movhi	r2,2
   129cc:	10b4d904 	addi	r2,r2,-11420
   129d0:	e0fff917 	ldw	r3,-28(fp)
   129d4:	18c01f24 	muli	r3,r3,124
   129d8:	18c01a04 	addi	r3,r3,104
   129dc:	10c5883a 	add	r2,r2,r3
   129e0:	10000015 	stw	zero,0(r2)
				_InkSupply[isNo].purgeTime=0;
   129e4:	008000b4 	movhi	r2,2
   129e8:	10b4d904 	addi	r2,r2,-11420
   129ec:	e0fff917 	ldw	r3,-28(fp)
   129f0:	18c01f24 	muli	r3,r3,124
   129f4:	18c01e04 	addi	r3,r3,120
   129f8:	10c5883a 	add	r2,r2,r3
   129fc:	10000015 	stw	zero,0(r2)
				_InkSupply[isNo].purgePressure=0;
   12a00:	008000b4 	movhi	r2,2
   12a04:	10b4d904 	addi	r2,r2,-11420
   12a08:	e0fff917 	ldw	r3,-28(fp)
   12a0c:	18c01f24 	muli	r3,r3,124
   12a10:	18c01d04 	addi	r3,r3,116
   12a14:	10c5883a 	add	r2,r2,r3
   12a18:	10000015 	stw	zero,0(r2)
				pRX_Status->ink_supply[isNo].flushTime = 0;
   12a1c:	008000b4 	movhi	r2,2
   12a20:	10b11304 	addi	r2,r2,-15284
   12a24:	10c00017 	ldw	r3,0(r2)
   12a28:	e0bff917 	ldw	r2,-28(fp)
   12a2c:	10801b24 	muli	r2,r2,108
   12a30:	10803804 	addi	r2,r2,224
   12a34:	1885883a 	add	r2,r3,r2
   12a38:	10000015 	stw	zero,0(r2)
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_off;
   12a3c:	008000b4 	movhi	r2,2
   12a40:	10b11304 	addi	r2,r2,-15284
   12a44:	10c00017 	ldw	r3,0(r2)
   12a48:	e0bff917 	ldw	r2,-28(fp)
   12a4c:	10801b24 	muli	r2,r2,108
   12a50:	10802a04 	addi	r2,r2,168
   12a54:	1885883a 	add	r2,r3,r2
   12a58:	00c00104 	movi	r3,4
   12a5c:	10c00015 	stw	r3,0(r2)


				break;
   12a60:	0006df06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_print:
				_set_bleed_valve(isNo, FALSE);
   12a64:	e13ff917 	ldw	r4,-28(fp)
   12a68:	000b883a 	mov	r5,zero
   12a6c:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_set_air_valve(isNo, FALSE);
   12a70:	e13ff917 	ldw	r4,-28(fp)
   12a74:	000b883a 	mov	r5,zero
   12a78:	0014ddc0 	call	14ddc <_set_air_valve>
				_set_flush_pump(isNo, FALSE);
   12a7c:	e13ff917 	ldw	r4,-28(fp)
   12a80:	000b883a 	mov	r5,zero
   12a84:	00159340 	call	15934 <_set_flush_pump>
				_InkSupply[isNo].degassing = pRX_Config->cmd.lung_enabled;
   12a88:	008000b4 	movhi	r2,2
   12a8c:	10b11404 	addi	r2,r2,-15280
   12a90:	10800017 	ldw	r2,0(r2)
   12a94:	10800017 	ldw	r2,0(r2)
   12a98:	1004d0fa 	srli	r2,r2,3
   12a9c:	1080004c 	andi	r2,r2,1
   12aa0:	10c03fcc 	andi	r3,r2,255
   12aa4:	008000b4 	movhi	r2,2
   12aa8:	10b4d904 	addi	r2,r2,-11420
   12aac:	e13ff917 	ldw	r4,-28(fp)
   12ab0:	21001f24 	muli	r4,r4,124
   12ab4:	21001a04 	addi	r4,r4,104
   12ab8:	1105883a 	add	r2,r2,r4
   12abc:	10c00015 	stw	r3,0(r2)
				_PumpOFFTime = 0;
   12ac0:	d024d915 	stw	zero,-27804(gp)
				_ShutdownPrint[isNo] = 1;
   12ac4:	008000b4 	movhi	r2,2
   12ac8:	10b58504 	addi	r2,r2,-10732
   12acc:	e0fff917 	ldw	r3,-28(fp)
   12ad0:	18c7883a 	add	r3,r3,r3
   12ad4:	18c7883a 	add	r3,r3,r3
   12ad8:	10c5883a 	add	r2,r2,r3
   12adc:	00c00044 	movi	r3,1
   12ae0:	10c00015 	stw	r3,0(r2)

				// ----- NEW : Ramp start-up pressure  -------
				if(pRX_Status->ink_supply[isNo].ctrl_state != pRX_Config->ink_supply[isNo].ctrl_mode)
   12ae4:	008000b4 	movhi	r2,2
   12ae8:	10b11304 	addi	r2,r2,-15284
   12aec:	10c00017 	ldw	r3,0(r2)
   12af0:	e0bff917 	ldw	r2,-28(fp)
   12af4:	10801b24 	muli	r2,r2,108
   12af8:	10802a04 	addi	r2,r2,168
   12afc:	1885883a 	add	r2,r3,r2
   12b00:	10c00017 	ldw	r3,0(r2)
   12b04:	008000b4 	movhi	r2,2
   12b08:	10b11404 	addi	r2,r2,-15280
   12b0c:	11000017 	ldw	r4,0(r2)
   12b10:	e0bff917 	ldw	r2,-28(fp)
   12b14:	10801724 	muli	r2,r2,92
   12b18:	10800904 	addi	r2,r2,36
   12b1c:	2085883a 	add	r2,r4,r2
   12b20:	10800017 	ldw	r2,0(r2)
   12b24:	18803526 	beq	r3,r2,12bfc <ink_tick_10ms+0xd7c>
				{
					if(pRX_Status->ink_supply[isNo].cylinderPresSet > 10)
   12b28:	008000b4 	movhi	r2,2
   12b2c:	10b11304 	addi	r2,r2,-15284
   12b30:	10c00017 	ldw	r3,0(r2)
   12b34:	e0bff917 	ldw	r2,-28(fp)
   12b38:	10801b24 	muli	r2,r2,108
   12b3c:	10802e04 	addi	r2,r2,184
   12b40:	1885883a 	add	r2,r3,r2
   12b44:	10800017 	ldw	r2,0(r2)
   12b48:	108002d0 	cmplti	r2,r2,11
   12b4c:	1000141e 	bne	r2,zero,12ba0 <ink_tick_10ms+0xd20>
						_PressureSetpoint[isNo] = pRX_Status->ink_supply[isNo].cylinderPresSet / 5;	// start with low setpoint
   12b50:	008000b4 	movhi	r2,2
   12b54:	10b11304 	addi	r2,r2,-15284
   12b58:	10c00017 	ldw	r3,0(r2)
   12b5c:	e0bff917 	ldw	r2,-28(fp)
   12b60:	10801b24 	muli	r2,r2,108
   12b64:	10802e04 	addi	r2,r2,184
   12b68:	1885883a 	add	r2,r3,r2
   12b6c:	10800017 	ldw	r2,0(r2)
   12b70:	1009883a 	mov	r4,r2
   12b74:	01400144 	movi	r5,5
   12b78:	00180380 	call	18038 <__divsi3>
   12b7c:	1009883a 	mov	r4,r2
   12b80:	008000b4 	movhi	r2,2
   12b84:	10b55d04 	addi	r2,r2,-10892
   12b88:	e0fff917 	ldw	r3,-28(fp)
   12b8c:	18c7883a 	add	r3,r3,r3
   12b90:	18c7883a 	add	r3,r3,r3
   12b94:	10c5883a 	add	r2,r2,r3
   12b98:	11000015 	stw	r4,0(r2)
   12b9c:	00000f06 	br	12bdc <ink_tick_10ms+0xd5c>
					else _PressureSetpoint[isNo] = pRX_Status->ink_supply[isNo].cylinderPresSet;
   12ba0:	008000b4 	movhi	r2,2
   12ba4:	10b11304 	addi	r2,r2,-15284
   12ba8:	10c00017 	ldw	r3,0(r2)
   12bac:	e0bff917 	ldw	r2,-28(fp)
   12bb0:	10801b24 	muli	r2,r2,108
   12bb4:	10802e04 	addi	r2,r2,184
   12bb8:	1885883a 	add	r2,r3,r2
   12bbc:	11000017 	ldw	r4,0(r2)
   12bc0:	008000b4 	movhi	r2,2
   12bc4:	10b55d04 	addi	r2,r2,-10892
   12bc8:	e0fff917 	ldw	r3,-28(fp)
   12bcc:	18c7883a 	add	r3,r3,r3
   12bd0:	18c7883a 	add	r3,r3,r3
   12bd4:	10c5883a 	add	r2,r2,r3
   12bd8:	11000015 	stw	r4,0(r2)
					_StartModePRINT[isNo] = 0;
   12bdc:	008000b4 	movhi	r2,2
   12be0:	10b58104 	addi	r2,r2,-10748
   12be4:	e0fff917 	ldw	r3,-28(fp)
   12be8:	18c7883a 	add	r3,r3,r3
   12bec:	18c7883a 	add	r3,r3,r3
   12bf0:	10c5883a 	add	r2,r2,r3
   12bf4:	10000015 	stw	zero,0(r2)
   12bf8:	00000f06 	br	12c38 <ink_tick_10ms+0xdb8>
				}
				else _StartModePRINT[isNo]++;
   12bfc:	008000b4 	movhi	r2,2
   12c00:	10b58104 	addi	r2,r2,-10748
   12c04:	e0fff917 	ldw	r3,-28(fp)
   12c08:	18c7883a 	add	r3,r3,r3
   12c0c:	18c7883a 	add	r3,r3,r3
   12c10:	10c5883a 	add	r2,r2,r3
   12c14:	10800017 	ldw	r2,0(r2)
   12c18:	11000044 	addi	r4,r2,1
   12c1c:	008000b4 	movhi	r2,2
   12c20:	10b58104 	addi	r2,r2,-10748
   12c24:	e0fff917 	ldw	r3,-28(fp)
   12c28:	18c7883a 	add	r3,r3,r3
   12c2c:	18c7883a 	add	r3,r3,r3
   12c30:	10c5883a 	add	r2,r2,r3
   12c34:	11000015 	stw	r4,0(r2)

				if((_PressureSetpoint[isNo] != pRX_Status->ink_supply[isNo].cylinderPresSet)&&(_StartModePRINT[isNo] > 500))
   12c38:	008000b4 	movhi	r2,2
   12c3c:	10b55d04 	addi	r2,r2,-10892
   12c40:	e0fff917 	ldw	r3,-28(fp)
   12c44:	18c7883a 	add	r3,r3,r3
   12c48:	18c7883a 	add	r3,r3,r3
   12c4c:	10c5883a 	add	r2,r2,r3
   12c50:	10c00017 	ldw	r3,0(r2)
   12c54:	008000b4 	movhi	r2,2
   12c58:	10b11304 	addi	r2,r2,-15284
   12c5c:	11000017 	ldw	r4,0(r2)
   12c60:	e0bff917 	ldw	r2,-28(fp)
   12c64:	10801b24 	muli	r2,r2,108
   12c68:	10802e04 	addi	r2,r2,184
   12c6c:	2085883a 	add	r2,r4,r2
   12c70:	10800017 	ldw	r2,0(r2)
   12c74:	18804926 	beq	r3,r2,12d9c <ink_tick_10ms+0xf1c>
   12c78:	008000b4 	movhi	r2,2
   12c7c:	10b58104 	addi	r2,r2,-10748
   12c80:	e0fff917 	ldw	r3,-28(fp)
   12c84:	18c7883a 	add	r3,r3,r3
   12c88:	18c7883a 	add	r3,r3,r3
   12c8c:	10c5883a 	add	r2,r2,r3
   12c90:	10800017 	ldw	r2,0(r2)
   12c94:	10807d50 	cmplti	r2,r2,501
   12c98:	1000401e 	bne	r2,zero,12d9c <ink_tick_10ms+0xf1c>
				{
					if(_StartModePRINT[isNo] > 504)
   12c9c:	008000b4 	movhi	r2,2
   12ca0:	10b58104 	addi	r2,r2,-10748
   12ca4:	e0fff917 	ldw	r3,-28(fp)
   12ca8:	18c7883a 	add	r3,r3,r3
   12cac:	18c7883a 	add	r3,r3,r3
   12cb0:	10c5883a 	add	r2,r2,r3
   12cb4:	10800017 	ldw	r2,0(r2)
   12cb8:	10807e50 	cmplti	r2,r2,505
   12cbc:	1000371e 	bne	r2,zero,12d9c <ink_tick_10ms+0xf1c>
					{
						if(_PressureSetpoint[isNo] < pRX_Status->ink_supply[isNo].cylinderPresSet) _PressureSetpoint[isNo]++;
   12cc0:	008000b4 	movhi	r2,2
   12cc4:	10b55d04 	addi	r2,r2,-10892
   12cc8:	e0fff917 	ldw	r3,-28(fp)
   12ccc:	18c7883a 	add	r3,r3,r3
   12cd0:	18c7883a 	add	r3,r3,r3
   12cd4:	10c5883a 	add	r2,r2,r3
   12cd8:	10c00017 	ldw	r3,0(r2)
   12cdc:	008000b4 	movhi	r2,2
   12ce0:	10b11304 	addi	r2,r2,-15284
   12ce4:	11000017 	ldw	r4,0(r2)
   12ce8:	e0bff917 	ldw	r2,-28(fp)
   12cec:	10801b24 	muli	r2,r2,108
   12cf0:	10802e04 	addi	r2,r2,184
   12cf4:	2085883a 	add	r2,r4,r2
   12cf8:	10800017 	ldw	r2,0(r2)
   12cfc:	1880100e 	bge	r3,r2,12d40 <ink_tick_10ms+0xec0>
   12d00:	008000b4 	movhi	r2,2
   12d04:	10b55d04 	addi	r2,r2,-10892
   12d08:	e0fff917 	ldw	r3,-28(fp)
   12d0c:	18c7883a 	add	r3,r3,r3
   12d10:	18c7883a 	add	r3,r3,r3
   12d14:	10c5883a 	add	r2,r2,r3
   12d18:	10800017 	ldw	r2,0(r2)
   12d1c:	11000044 	addi	r4,r2,1
   12d20:	008000b4 	movhi	r2,2
   12d24:	10b55d04 	addi	r2,r2,-10892
   12d28:	e0fff917 	ldw	r3,-28(fp)
   12d2c:	18c7883a 	add	r3,r3,r3
   12d30:	18c7883a 	add	r3,r3,r3
   12d34:	10c5883a 	add	r2,r2,r3
   12d38:	11000015 	stw	r4,0(r2)
   12d3c:	00000f06 	br	12d7c <ink_tick_10ms+0xefc>
						else _PressureSetpoint[isNo]--;
   12d40:	008000b4 	movhi	r2,2
   12d44:	10b55d04 	addi	r2,r2,-10892
   12d48:	e0fff917 	ldw	r3,-28(fp)
   12d4c:	18c7883a 	add	r3,r3,r3
   12d50:	18c7883a 	add	r3,r3,r3
   12d54:	10c5883a 	add	r2,r2,r3
   12d58:	10800017 	ldw	r2,0(r2)
   12d5c:	113fffc4 	addi	r4,r2,-1
   12d60:	008000b4 	movhi	r2,2
   12d64:	10b55d04 	addi	r2,r2,-10892
   12d68:	e0fff917 	ldw	r3,-28(fp)
   12d6c:	18c7883a 	add	r3,r3,r3
   12d70:	18c7883a 	add	r3,r3,r3
   12d74:	10c5883a 	add	r2,r2,r3
   12d78:	11000015 	stw	r4,0(r2)
						_StartModePRINT[isNo] = 500;
   12d7c:	008000b4 	movhi	r2,2
   12d80:	10b58104 	addi	r2,r2,-10748
   12d84:	e0fff917 	ldw	r3,-28(fp)
   12d88:	18c7883a 	add	r3,r3,r3
   12d8c:	18c7883a 	add	r3,r3,r3
   12d90:	10c5883a 	add	r2,r2,r3
   12d94:	00c07d04 	movi	r3,500
   12d98:	10c00015 	stw	r3,0(r2)
					}
				}
				pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   12d9c:	008000b4 	movhi	r2,2
   12da0:	10b11304 	addi	r2,r2,-15284
   12da4:	11000017 	ldw	r4,0(r2)
   12da8:	008000b4 	movhi	r2,2
   12dac:	10b11404 	addi	r2,r2,-15280
   12db0:	10c00017 	ldw	r3,0(r2)
   12db4:	e0bff917 	ldw	r2,-28(fp)
   12db8:	10801724 	muli	r2,r2,92
   12dbc:	10800904 	addi	r2,r2,36
   12dc0:	1885883a 	add	r2,r3,r2
   12dc4:	10c00017 	ldw	r3,0(r2)
   12dc8:	e0bff917 	ldw	r2,-28(fp)
   12dcc:	10801b24 	muli	r2,r2,108
   12dd0:	10802a04 	addi	r2,r2,168
   12dd4:	2085883a 	add	r2,r4,r2
   12dd8:	10c00015 	stw	r3,0(r2)

				// ----- END NEW  -------

				_pump_ctrl(isNo, _PressureSetpoint[isNo], PUMP_CTRL_MODE_PRINT);
   12ddc:	008000b4 	movhi	r2,2
   12de0:	10b55d04 	addi	r2,r2,-10892
   12de4:	e0fff917 	ldw	r3,-28(fp)
   12de8:	18c7883a 	add	r3,r3,r3
   12dec:	18c7883a 	add	r3,r3,r3
   12df0:	10c5883a 	add	r2,r2,r3
   12df4:	10800017 	ldw	r2,0(r2)
   12df8:	e13ff917 	ldw	r4,-28(fp)
   12dfc:	100b883a 	mov	r5,r2
   12e00:	01800044 	movi	r6,1
   12e04:	00150500 	call	15050 <_pump_ctrl>
				break;
   12e08:	0005f506 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_test:
				if (pRX_Status->ink_supply[isNo].ctrl_state==ctrl_test)
   12e0c:	008000b4 	movhi	r2,2
   12e10:	10b11304 	addi	r2,r2,-15284
   12e14:	10c00017 	ldw	r3,0(r2)
   12e18:	e0bff917 	ldw	r2,-28(fp)
   12e1c:	10801b24 	muli	r2,r2,108
   12e20:	10802a04 	addi	r2,r2,168
   12e24:	1885883a 	add	r2,r3,r2
   12e28:	10c00017 	ldw	r3,0(r2)
   12e2c:	00800074 	movhi	r2,1
   12e30:	10800044 	addi	r2,r2,1
   12e34:	1881b01e 	bne	r3,r2,134f8 <ink_tick_10ms+0x1678>
				{
					if (pRX_Config->ink_supply[isNo].test_bleed_line)
   12e38:	008000b4 	movhi	r2,2
   12e3c:	10b11404 	addi	r2,r2,-15280
   12e40:	10c00017 	ldw	r3,0(r2)
   12e44:	e0bff917 	ldw	r2,-28(fp)
   12e48:	10801724 	muli	r2,r2,92
   12e4c:	10801e04 	addi	r2,r2,120
   12e50:	1885883a 	add	r2,r3,r2
   12e54:	10800017 	ldw	r2,0(r2)
   12e58:	10014f26 	beq	r2,zero,13398 <ink_tick_10ms+0x1518>
					{
						switch(pRX_Status->ink_supply[isNo].TestBleedLine_Phase)
   12e5c:	008000b4 	movhi	r2,2
   12e60:	10b11304 	addi	r2,r2,-15284
   12e64:	10c00017 	ldw	r3,0(r2)
   12e68:	e0bff917 	ldw	r2,-28(fp)
   12e6c:	10801b24 	muli	r2,r2,108
   12e70:	10804004 	addi	r2,r2,256
   12e74:	1885883a 	add	r2,r3,r2
   12e78:	10800017 	ldw	r2,0(r2)
   12e7c:	10c000a0 	cmpeqi	r3,r2,2
   12e80:	18006b1e 	bne	r3,zero,13030 <ink_tick_10ms+0x11b0>
   12e84:	10c000e0 	cmpeqi	r3,r2,3
   12e88:	1800d41e 	bne	r3,zero,131dc <ink_tick_10ms+0x135c>
   12e8c:	10800060 	cmpeqi	r2,r2,1
   12e90:	1000011e 	bne	r2,zero,12e98 <ink_tick_10ms+0x1018>
   12e94:	0001e006 	br	13618 <ink_tick_10ms+0x1798>
						{
							case 1 :
								_set_air_valve(isNo, FALSE);
   12e98:	e13ff917 	ldw	r4,-28(fp)
   12e9c:	000b883a 	mov	r5,zero
   12ea0:	0014ddc0 	call	14ddc <_set_air_valve>
								_set_bleed_valve(isNo, FALSE);
   12ea4:	e13ff917 	ldw	r4,-28(fp)
   12ea8:	000b883a 	mov	r5,zero
   12eac:	0014ed00 	call	14ed0 <_set_bleed_valve>

								if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual > 1000 || _InkSupply[isNo].pid_Pump.val >= _InkSupply[isNo].pid_Pump.val_max)
   12eb0:	008000b4 	movhi	r2,2
   12eb4:	10b11304 	addi	r2,r2,-15284
   12eb8:	10c00017 	ldw	r3,0(r2)
   12ebc:	e0bff917 	ldw	r2,-28(fp)
   12ec0:	10801b24 	muli	r2,r2,108
   12ec4:	10802f04 	addi	r2,r2,188
   12ec8:	1885883a 	add	r2,r3,r2
   12ecc:	10800017 	ldw	r2,0(r2)
   12ed0:	1080fa48 	cmpgei	r2,r2,1001
   12ed4:	10000f1e 	bne	r2,zero,12f14 <ink_tick_10ms+0x1094>
   12ed8:	008000b4 	movhi	r2,2
   12edc:	10b4d904 	addi	r2,r2,-11420
   12ee0:	e0fff917 	ldw	r3,-28(fp)
   12ee4:	18c01f24 	muli	r3,r3,124
   12ee8:	18c00b04 	addi	r3,r3,44
   12eec:	10c5883a 	add	r2,r2,r3
   12ef0:	10c00017 	ldw	r3,0(r2)
   12ef4:	008000b4 	movhi	r2,2
   12ef8:	10b4d904 	addi	r2,r2,-11420
   12efc:	e13ff917 	ldw	r4,-28(fp)
   12f00:	21001f24 	muli	r4,r4,124
   12f04:	21000d04 	addi	r4,r4,52
   12f08:	1105883a 	add	r2,r2,r4
   12f0c:	10800017 	ldw	r2,0(r2)
   12f10:	18803216 	blt	r3,r2,12fdc <ink_tick_10ms+0x115c>
								{
									_set_pump_speed(isNo, 0);
   12f14:	e13ff917 	ldw	r4,-28(fp)
   12f18:	000b883a 	mov	r5,zero
   12f1c:	00157c80 	call	157c8 <_set_pump_speed>
									_TestBleedLine_Timer[isNo]++;
   12f20:	008000b4 	movhi	r2,2
   12f24:	10b55504 	addi	r2,r2,-10924
   12f28:	e0fff917 	ldw	r3,-28(fp)
   12f2c:	18c7883a 	add	r3,r3,r3
   12f30:	18c7883a 	add	r3,r3,r3
   12f34:	10c5883a 	add	r2,r2,r3
   12f38:	10800017 	ldw	r2,0(r2)
   12f3c:	11000044 	addi	r4,r2,1
   12f40:	008000b4 	movhi	r2,2
   12f44:	10b55504 	addi	r2,r2,-10924
   12f48:	e0fff917 	ldw	r3,-28(fp)
   12f4c:	18c7883a 	add	r3,r3,r3
   12f50:	18c7883a 	add	r3,r3,r3
   12f54:	10c5883a 	add	r2,r2,r3
   12f58:	11000015 	stw	r4,0(r2)
									if(_TestBleedLine_Timer[isNo] > 2000)
   12f5c:	008000b4 	movhi	r2,2
   12f60:	10b55504 	addi	r2,r2,-10924
   12f64:	e0fff917 	ldw	r3,-28(fp)
   12f68:	18c7883a 	add	r3,r3,r3
   12f6c:	18c7883a 	add	r3,r3,r3
   12f70:	10c5883a 	add	r2,r2,r3
   12f74:	10800017 	ldw	r2,0(r2)
   12f78:	1081f450 	cmplti	r2,r2,2001
   12f7c:	1000161e 	bne	r2,zero,12fd8 <ink_tick_10ms+0x1158>
									{
										pRX_Status->ink_supply[isNo].TestBleedLine_Phase++;
   12f80:	008000b4 	movhi	r2,2
   12f84:	10b11304 	addi	r2,r2,-15284
   12f88:	10800017 	ldw	r2,0(r2)
   12f8c:	e0fff917 	ldw	r3,-28(fp)
   12f90:	18c01b24 	muli	r3,r3,108
   12f94:	18c04004 	addi	r3,r3,256
   12f98:	10c7883a 	add	r3,r2,r3
   12f9c:	18c00017 	ldw	r3,0(r3)
   12fa0:	18c00044 	addi	r3,r3,1
   12fa4:	e13ff917 	ldw	r4,-28(fp)
   12fa8:	21001b24 	muli	r4,r4,108
   12fac:	21004004 	addi	r4,r4,256
   12fb0:	1105883a 	add	r2,r2,r4
   12fb4:	10c00015 	stw	r3,0(r2)
										_TestBleedLine_Timer[isNo] = 0;
   12fb8:	008000b4 	movhi	r2,2
   12fbc:	10b55504 	addi	r2,r2,-10924
   12fc0:	e0fff917 	ldw	r3,-28(fp)
   12fc4:	18c7883a 	add	r3,r3,r3
   12fc8:	18c7883a 	add	r3,r3,r3
   12fcc:	10c5883a 	add	r2,r2,r3
   12fd0:	10000015 	stw	zero,0(r2)

								if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual > 1000 || _InkSupply[isNo].pid_Pump.val >= _InkSupply[isNo].pid_Pump.val_max)
								{
									_set_pump_speed(isNo, 0);
									_TestBleedLine_Timer[isNo]++;
									if(_TestBleedLine_Timer[isNo] > 2000)
   12fd4:	00000506 	br	12fec <ink_tick_10ms+0x116c>
   12fd8:	00000406 	br	12fec <ink_tick_10ms+0x116c>
									{
										pRX_Status->ink_supply[isNo].TestBleedLine_Phase++;
										_TestBleedLine_Timer[isNo] = 0;
									}
								}
								else _pump_ctrl(isNo, 1000,PUMP_CTRL_MODE_NO_AIR_VALVE);
   12fdc:	e13ff917 	ldw	r4,-28(fp)
   12fe0:	0140fa04 	movi	r5,1000
   12fe4:	01800084 	movi	r6,2
   12fe8:	00150500 	call	15050 <_pump_ctrl>

								pRX_Status->ink_supply[isNo].TestBleedLine_Pump_Phase1 = pRX_Status->ink_supply[isNo].IS_Pressure_Actual;
   12fec:	008000b4 	movhi	r2,2
   12ff0:	10b11304 	addi	r2,r2,-15284
   12ff4:	11000017 	ldw	r4,0(r2)
   12ff8:	008000b4 	movhi	r2,2
   12ffc:	10b11304 	addi	r2,r2,-15284
   13000:	10c00017 	ldw	r3,0(r2)
   13004:	e0bff917 	ldw	r2,-28(fp)
   13008:	10801b24 	muli	r2,r2,108
   1300c:	10802f04 	addi	r2,r2,188
   13010:	1885883a 	add	r2,r3,r2
   13014:	10c00017 	ldw	r3,0(r2)
   13018:	e0bff917 	ldw	r2,-28(fp)
   1301c:	10801b24 	muli	r2,r2,108
   13020:	10804104 	addi	r2,r2,260
   13024:	2085883a 	add	r2,r4,r2
   13028:	10c00015 	stw	r3,0(r2)

								break;
   1302c:	0000d906 	br	13394 <ink_tick_10ms+0x1514>
							case 2 :
								_set_air_valve(isNo, TRUE);
   13030:	e13ff917 	ldw	r4,-28(fp)
   13034:	01400044 	movi	r5,1
   13038:	0014ddc0 	call	14ddc <_set_air_valve>
								_set_bleed_valve(isNo, FALSE);
   1303c:	e13ff917 	ldw	r4,-28(fp)
   13040:	000b883a 	mov	r5,zero
   13044:	0014ed00 	call	14ed0 <_set_bleed_valve>
								if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual > 990 || _InkSupply[isNo].pid_Pump.val >= _InkSupply[isNo].pid_Pump.val_max)
   13048:	008000b4 	movhi	r2,2
   1304c:	10b11304 	addi	r2,r2,-15284
   13050:	10c00017 	ldw	r3,0(r2)
   13054:	e0bff917 	ldw	r2,-28(fp)
   13058:	10801b24 	muli	r2,r2,108
   1305c:	10802f04 	addi	r2,r2,188
   13060:	1885883a 	add	r2,r3,r2
   13064:	10800017 	ldw	r2,0(r2)
   13068:	1080f7c8 	cmpgei	r2,r2,991
   1306c:	10000f1e 	bne	r2,zero,130ac <ink_tick_10ms+0x122c>
   13070:	008000b4 	movhi	r2,2
   13074:	10b4d904 	addi	r2,r2,-11420
   13078:	e0fff917 	ldw	r3,-28(fp)
   1307c:	18c01f24 	muli	r3,r3,124
   13080:	18c00b04 	addi	r3,r3,44
   13084:	10c5883a 	add	r2,r2,r3
   13088:	10c00017 	ldw	r3,0(r2)
   1308c:	008000b4 	movhi	r2,2
   13090:	10b4d904 	addi	r2,r2,-11420
   13094:	e13ff917 	ldw	r4,-28(fp)
   13098:	21001f24 	muli	r4,r4,124
   1309c:	21000d04 	addi	r4,r4,52
   130a0:	1105883a 	add	r2,r2,r4
   130a4:	10800017 	ldw	r2,0(r2)
   130a8:	18802d16 	blt	r3,r2,13160 <ink_tick_10ms+0x12e0>
								{
									_TestBleedLine_Timer[isNo]++;
   130ac:	008000b4 	movhi	r2,2
   130b0:	10b55504 	addi	r2,r2,-10924
   130b4:	e0fff917 	ldw	r3,-28(fp)
   130b8:	18c7883a 	add	r3,r3,r3
   130bc:	18c7883a 	add	r3,r3,r3
   130c0:	10c5883a 	add	r2,r2,r3
   130c4:	10800017 	ldw	r2,0(r2)
   130c8:	11000044 	addi	r4,r2,1
   130cc:	008000b4 	movhi	r2,2
   130d0:	10b55504 	addi	r2,r2,-10924
   130d4:	e0fff917 	ldw	r3,-28(fp)
   130d8:	18c7883a 	add	r3,r3,r3
   130dc:	18c7883a 	add	r3,r3,r3
   130e0:	10c5883a 	add	r2,r2,r3
   130e4:	11000015 	stw	r4,0(r2)
									if(_TestBleedLine_Timer[isNo] > 2000)
   130e8:	008000b4 	movhi	r2,2
   130ec:	10b55504 	addi	r2,r2,-10924
   130f0:	e0fff917 	ldw	r3,-28(fp)
   130f4:	18c7883a 	add	r3,r3,r3
   130f8:	18c7883a 	add	r3,r3,r3
   130fc:	10c5883a 	add	r2,r2,r3
   13100:	10800017 	ldw	r2,0(r2)
   13104:	1081f450 	cmplti	r2,r2,2001
   13108:	1000151e 	bne	r2,zero,13160 <ink_tick_10ms+0x12e0>
									{
										pRX_Status->ink_supply[isNo].TestBleedLine_Phase++;
   1310c:	008000b4 	movhi	r2,2
   13110:	10b11304 	addi	r2,r2,-15284
   13114:	10800017 	ldw	r2,0(r2)
   13118:	e0fff917 	ldw	r3,-28(fp)
   1311c:	18c01b24 	muli	r3,r3,108
   13120:	18c04004 	addi	r3,r3,256
   13124:	10c7883a 	add	r3,r2,r3
   13128:	18c00017 	ldw	r3,0(r3)
   1312c:	18c00044 	addi	r3,r3,1
   13130:	e13ff917 	ldw	r4,-28(fp)
   13134:	21001b24 	muli	r4,r4,108
   13138:	21004004 	addi	r4,r4,256
   1313c:	1105883a 	add	r2,r2,r4
   13140:	10c00015 	stw	r3,0(r2)
										_TestBleedLine_Timer[isNo] = 0;
   13144:	008000b4 	movhi	r2,2
   13148:	10b55504 	addi	r2,r2,-10924
   1314c:	e0fff917 	ldw	r3,-28(fp)
   13150:	18c7883a 	add	r3,r3,r3
   13154:	18c7883a 	add	r3,r3,r3
   13158:	10c5883a 	add	r2,r2,r3
   1315c:	10000015 	stw	zero,0(r2)
									}
								}
								_pump_ctrl(isNo, 1000,PUMP_CTRL_MODE_NO_AIR_VALVE);
   13160:	e13ff917 	ldw	r4,-28(fp)
   13164:	0140fa04 	movi	r5,1000
   13168:	01800084 	movi	r6,2
   1316c:	00150500 	call	15050 <_pump_ctrl>

								pRX_Status->ink_supply[isNo].TestBleedLine_Pump_Phase2 = 100 * _InkSupply[isNo].pid_Pump.val / _InkSupply[isNo].pid_Pump.val_max;
   13170:	008000b4 	movhi	r2,2
   13174:	10b11304 	addi	r2,r2,-15284
   13178:	14000017 	ldw	r16,0(r2)
   1317c:	008000b4 	movhi	r2,2
   13180:	10b4d904 	addi	r2,r2,-11420
   13184:	e0fff917 	ldw	r3,-28(fp)
   13188:	18c01f24 	muli	r3,r3,124
   1318c:	18c00b04 	addi	r3,r3,44
   13190:	10c5883a 	add	r2,r2,r3
   13194:	10800017 	ldw	r2,0(r2)
   13198:	11001924 	muli	r4,r2,100
   1319c:	008000b4 	movhi	r2,2
   131a0:	10b4d904 	addi	r2,r2,-11420
   131a4:	e0fff917 	ldw	r3,-28(fp)
   131a8:	18c01f24 	muli	r3,r3,124
   131ac:	18c00d04 	addi	r3,r3,52
   131b0:	10c5883a 	add	r2,r2,r3
   131b4:	10800017 	ldw	r2,0(r2)
   131b8:	100b883a 	mov	r5,r2
   131bc:	00180380 	call	18038 <__divsi3>
   131c0:	1007883a 	mov	r3,r2
   131c4:	e0bff917 	ldw	r2,-28(fp)
   131c8:	10801b24 	muli	r2,r2,108
   131cc:	10804204 	addi	r2,r2,264
   131d0:	8085883a 	add	r2,r16,r2
   131d4:	10c00015 	stw	r3,0(r2)

								break;
   131d8:	00006e06 	br	13394 <ink_tick_10ms+0x1514>
							case 3 :
								_set_air_valve(isNo, FALSE);
   131dc:	e13ff917 	ldw	r4,-28(fp)
   131e0:	000b883a 	mov	r5,zero
   131e4:	0014ddc0 	call	14ddc <_set_air_valve>
								_set_bleed_valve(isNo, TRUE);
   131e8:	e13ff917 	ldw	r4,-28(fp)
   131ec:	01400044 	movi	r5,1
   131f0:	0014ed00 	call	14ed0 <_set_bleed_valve>
								if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual > 990 || _InkSupply[isNo].pid_Pump.val >= _InkSupply[isNo].pid_Pump.val_max)
   131f4:	008000b4 	movhi	r2,2
   131f8:	10b11304 	addi	r2,r2,-15284
   131fc:	10c00017 	ldw	r3,0(r2)
   13200:	e0bff917 	ldw	r2,-28(fp)
   13204:	10801b24 	muli	r2,r2,108
   13208:	10802f04 	addi	r2,r2,188
   1320c:	1885883a 	add	r2,r3,r2
   13210:	10800017 	ldw	r2,0(r2)
   13214:	1080f7c8 	cmpgei	r2,r2,991
   13218:	10000f1e 	bne	r2,zero,13258 <ink_tick_10ms+0x13d8>
   1321c:	008000b4 	movhi	r2,2
   13220:	10b4d904 	addi	r2,r2,-11420
   13224:	e0fff917 	ldw	r3,-28(fp)
   13228:	18c01f24 	muli	r3,r3,124
   1322c:	18c00b04 	addi	r3,r3,44
   13230:	10c5883a 	add	r2,r2,r3
   13234:	10c00017 	ldw	r3,0(r2)
   13238:	008000b4 	movhi	r2,2
   1323c:	10b4d904 	addi	r2,r2,-11420
   13240:	e13ff917 	ldw	r4,-28(fp)
   13244:	21001f24 	muli	r4,r4,124
   13248:	21000d04 	addi	r4,r4,52
   1324c:	1105883a 	add	r2,r2,r4
   13250:	10800017 	ldw	r2,0(r2)
   13254:	18803016 	blt	r3,r2,13318 <ink_tick_10ms+0x1498>
								{
									_pump_ctrl(isNo, 1000,PUMP_CTRL_MODE_NO_AIR_VALVE);
   13258:	e13ff917 	ldw	r4,-28(fp)
   1325c:	0140fa04 	movi	r5,1000
   13260:	01800084 	movi	r6,2
   13264:	00150500 	call	15050 <_pump_ctrl>
									_TestBleedLine_Timer[isNo]++;
   13268:	008000b4 	movhi	r2,2
   1326c:	10b55504 	addi	r2,r2,-10924
   13270:	e0fff917 	ldw	r3,-28(fp)
   13274:	18c7883a 	add	r3,r3,r3
   13278:	18c7883a 	add	r3,r3,r3
   1327c:	10c5883a 	add	r2,r2,r3
   13280:	10800017 	ldw	r2,0(r2)
   13284:	11000044 	addi	r4,r2,1
   13288:	008000b4 	movhi	r2,2
   1328c:	10b55504 	addi	r2,r2,-10924
   13290:	e0fff917 	ldw	r3,-28(fp)
   13294:	18c7883a 	add	r3,r3,r3
   13298:	18c7883a 	add	r3,r3,r3
   1329c:	10c5883a 	add	r2,r2,r3
   132a0:	11000015 	stw	r4,0(r2)
									if(_TestBleedLine_Timer[isNo] > 2000)
   132a4:	008000b4 	movhi	r2,2
   132a8:	10b55504 	addi	r2,r2,-10924
   132ac:	e0fff917 	ldw	r3,-28(fp)
   132b0:	18c7883a 	add	r3,r3,r3
   132b4:	18c7883a 	add	r3,r3,r3
   132b8:	10c5883a 	add	r2,r2,r3
   132bc:	10800017 	ldw	r2,0(r2)
   132c0:	1081f450 	cmplti	r2,r2,2001
   132c4:	1000131e 	bne	r2,zero,13314 <ink_tick_10ms+0x1494>
									{
										pRX_Config->ink_supply[isNo].test_bleed_line = 0;
   132c8:	008000b4 	movhi	r2,2
   132cc:	10b11404 	addi	r2,r2,-15280
   132d0:	10c00017 	ldw	r3,0(r2)
   132d4:	e0bff917 	ldw	r2,-28(fp)
   132d8:	10801724 	muli	r2,r2,92
   132dc:	10801e04 	addi	r2,r2,120
   132e0:	1885883a 	add	r2,r3,r2
   132e4:	10000015 	stw	zero,0(r2)
										_set_pump_speed(isNo, 0);
   132e8:	e13ff917 	ldw	r4,-28(fp)
   132ec:	000b883a 	mov	r5,zero
   132f0:	00157c80 	call	157c8 <_set_pump_speed>
										_TestBleedLine_Timer[isNo] = 0;
   132f4:	008000b4 	movhi	r2,2
   132f8:	10b55504 	addi	r2,r2,-10924
   132fc:	e0fff917 	ldw	r3,-28(fp)
   13300:	18c7883a 	add	r3,r3,r3
   13304:	18c7883a 	add	r3,r3,r3
   13308:	10c5883a 	add	r2,r2,r3
   1330c:	10000015 	stw	zero,0(r2)
								_set_bleed_valve(isNo, TRUE);
								if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual > 990 || _InkSupply[isNo].pid_Pump.val >= _InkSupply[isNo].pid_Pump.val_max)
								{
									_pump_ctrl(isNo, 1000,PUMP_CTRL_MODE_NO_AIR_VALVE);
									_TestBleedLine_Timer[isNo]++;
									if(_TestBleedLine_Timer[isNo] > 2000)
   13310:	00000506 	br	13328 <ink_tick_10ms+0x14a8>
   13314:	00000406 	br	13328 <ink_tick_10ms+0x14a8>
										pRX_Config->ink_supply[isNo].test_bleed_line = 0;
										_set_pump_speed(isNo, 0);
										_TestBleedLine_Timer[isNo] = 0;
									}
								}
								else _pump_ctrl(isNo, 1000,PUMP_CTRL_MODE_NO_AIR_VALVE);
   13318:	e13ff917 	ldw	r4,-28(fp)
   1331c:	0140fa04 	movi	r5,1000
   13320:	01800084 	movi	r6,2
   13324:	00150500 	call	15050 <_pump_ctrl>

								pRX_Status->ink_supply[isNo].TestBleedLine_Pump_Phase3 = 100 * _InkSupply[isNo].pid_Pump.val / _InkSupply[isNo].pid_Pump.val_max;
   13328:	008000b4 	movhi	r2,2
   1332c:	10b11304 	addi	r2,r2,-15284
   13330:	14000017 	ldw	r16,0(r2)
   13334:	008000b4 	movhi	r2,2
   13338:	10b4d904 	addi	r2,r2,-11420
   1333c:	e0fff917 	ldw	r3,-28(fp)
   13340:	18c01f24 	muli	r3,r3,124
   13344:	18c00b04 	addi	r3,r3,44
   13348:	10c5883a 	add	r2,r2,r3
   1334c:	10800017 	ldw	r2,0(r2)
   13350:	11001924 	muli	r4,r2,100
   13354:	008000b4 	movhi	r2,2
   13358:	10b4d904 	addi	r2,r2,-11420
   1335c:	e0fff917 	ldw	r3,-28(fp)
   13360:	18c01f24 	muli	r3,r3,124
   13364:	18c00d04 	addi	r3,r3,52
   13368:	10c5883a 	add	r2,r2,r3
   1336c:	10800017 	ldw	r2,0(r2)
   13370:	100b883a 	mov	r5,r2
   13374:	00180380 	call	18038 <__divsi3>
   13378:	1007883a 	mov	r3,r2
   1337c:	e0bff917 	ldw	r2,-28(fp)
   13380:	10801b24 	muli	r2,r2,108
   13384:	10804304 	addi	r2,r2,268
   13388:	8085883a 	add	r2,r16,r2
   1338c:	10c00015 	stw	r3,0(r2)

								break;
   13390:	0001883a 	nop
   13394:	0000a006 	br	13618 <ink_tick_10ms+0x1798>
						}
					}
					else
					{
						if (pRX_Config->ink_supply[isNo].test_airValve) 	_set_air_valve(isNo, !pRX_Status->ink_supply[isNo].airValve);
   13398:	008000b4 	movhi	r2,2
   1339c:	10b11404 	addi	r2,r2,-15280
   133a0:	10c00017 	ldw	r3,0(r2)
   133a4:	e0bff917 	ldw	r2,-28(fp)
   133a8:	10801724 	muli	r2,r2,92
   133ac:	10801b04 	addi	r2,r2,108
   133b0:	1885883a 	add	r2,r3,r2
   133b4:	10800017 	ldw	r2,0(r2)
   133b8:	10000f26 	beq	r2,zero,133f8 <ink_tick_10ms+0x1578>
   133bc:	008000b4 	movhi	r2,2
   133c0:	10b11304 	addi	r2,r2,-15284
   133c4:	10c00017 	ldw	r3,0(r2)
   133c8:	e0bff917 	ldw	r2,-28(fp)
   133cc:	10801b24 	muli	r2,r2,108
   133d0:	10803904 	addi	r2,r2,228
   133d4:	1885883a 	add	r2,r3,r2
   133d8:	10800017 	ldw	r2,0(r2)
   133dc:	1004d07a 	srli	r2,r2,1
   133e0:	1080004c 	andi	r2,r2,1
   133e4:	1080005c 	xori	r2,r2,1
   133e8:	10803fcc 	andi	r2,r2,255
   133ec:	e13ff917 	ldw	r4,-28(fp)
   133f0:	100b883a 	mov	r5,r2
   133f4:	0014ddc0 	call	14ddc <_set_air_valve>
						if (pRX_Config->ink_supply[isNo].test_bleedValve)	_set_bleed_valve(isNo, !pRX_Status->ink_supply[isNo].bleedValve);
   133f8:	008000b4 	movhi	r2,2
   133fc:	10b11404 	addi	r2,r2,-15280
   13400:	10c00017 	ldw	r3,0(r2)
   13404:	e0bff917 	ldw	r2,-28(fp)
   13408:	10801724 	muli	r2,r2,92
   1340c:	10801c04 	addi	r2,r2,112
   13410:	1885883a 	add	r2,r3,r2
   13414:	10800017 	ldw	r2,0(r2)
   13418:	10000e26 	beq	r2,zero,13454 <ink_tick_10ms+0x15d4>
   1341c:	008000b4 	movhi	r2,2
   13420:	10b11304 	addi	r2,r2,-15284
   13424:	10c00017 	ldw	r3,0(r2)
   13428:	e0bff917 	ldw	r2,-28(fp)
   1342c:	10801b24 	muli	r2,r2,108
   13430:	10803904 	addi	r2,r2,228
   13434:	1885883a 	add	r2,r3,r2
   13438:	10800017 	ldw	r2,0(r2)
   1343c:	1080004c 	andi	r2,r2,1
   13440:	1080005c 	xori	r2,r2,1
   13444:	10803fcc 	andi	r2,r2,255
   13448:	e13ff917 	ldw	r4,-28(fp)
   1344c:	100b883a 	mov	r5,r2
   13450:	0014ed00 	call	14ed0 <_set_bleed_valve>
						pRX_Config->ink_supply[isNo].test_airValve		= FALSE;
   13454:	008000b4 	movhi	r2,2
   13458:	10b11404 	addi	r2,r2,-15280
   1345c:	10c00017 	ldw	r3,0(r2)
   13460:	e0bff917 	ldw	r2,-28(fp)
   13464:	10801724 	muli	r2,r2,92
   13468:	10801b04 	addi	r2,r2,108
   1346c:	1885883a 	add	r2,r3,r2
   13470:	10000015 	stw	zero,0(r2)
						pRX_Config->ink_supply[isNo].test_bleedValve 	= FALSE;
   13474:	008000b4 	movhi	r2,2
   13478:	10b11404 	addi	r2,r2,-15280
   1347c:	10c00017 	ldw	r3,0(r2)
   13480:	e0bff917 	ldw	r2,-28(fp)
   13484:	10801724 	muli	r2,r2,92
   13488:	10801c04 	addi	r2,r2,112
   1348c:	1885883a 	add	r2,r3,r2
   13490:	10000015 	stw	zero,0(r2)

						_pump_ctrl(isNo, pRX_Config->ink_supply[isNo].test_cylinderPres, PUMP_CTRL_MODE_NO_AIR_VALVE);		// ink-pump
   13494:	008000b4 	movhi	r2,2
   13498:	10b11404 	addi	r2,r2,-15280
   1349c:	10c00017 	ldw	r3,0(r2)
   134a0:	e0bff917 	ldw	r2,-28(fp)
   134a4:	10801724 	muli	r2,r2,92
   134a8:	10801d04 	addi	r2,r2,116
   134ac:	1885883a 	add	r2,r3,r2
   134b0:	10800017 	ldw	r2,0(r2)
   134b4:	e13ff917 	ldw	r4,-28(fp)
   134b8:	100b883a 	mov	r5,r2
   134bc:	01800084 	movi	r6,2
   134c0:	00150500 	call	15050 <_pump_ctrl>
						_set_pressure_value(pRX_Status->air_pressure < pRX_Config->test_airPressure);	// air-pump
   134c4:	008000b4 	movhi	r2,2
   134c8:	10b11304 	addi	r2,r2,-15284
   134cc:	10800017 	ldw	r2,0(r2)
   134d0:	10c01617 	ldw	r3,88(r2)
   134d4:	008000b4 	movhi	r2,2
   134d8:	10b11404 	addi	r2,r2,-15280
   134dc:	10800017 	ldw	r2,0(r2)
   134e0:	10800317 	ldw	r2,12(r2)
   134e4:	1884803a 	cmplt	r2,r3,r2
   134e8:	10803fcc 	andi	r2,r2,255
   134ec:	1009883a 	mov	r4,r2
   134f0:	0014f8c0 	call	14f8c <_set_pressure_value>
   134f4:	00004806 	br	13618 <ink_tick_10ms+0x1798>
					}
				}
				else
				{
					// --- reset values -----------
					pRX_Config->ink_supply[isNo].test_airValve  	= FALSE;
   134f8:	008000b4 	movhi	r2,2
   134fc:	10b11404 	addi	r2,r2,-15280
   13500:	10c00017 	ldw	r3,0(r2)
   13504:	e0bff917 	ldw	r2,-28(fp)
   13508:	10801724 	muli	r2,r2,92
   1350c:	10801b04 	addi	r2,r2,108
   13510:	1885883a 	add	r2,r3,r2
   13514:	10000015 	stw	zero,0(r2)
					pRX_Config->ink_supply[isNo].test_bleedValve 	= FALSE;
   13518:	008000b4 	movhi	r2,2
   1351c:	10b11404 	addi	r2,r2,-15280
   13520:	10c00017 	ldw	r3,0(r2)
   13524:	e0bff917 	ldw	r2,-28(fp)
   13528:	10801724 	muli	r2,r2,92
   1352c:	10801c04 	addi	r2,r2,112
   13530:	1885883a 	add	r2,r3,r2
   13534:	10000015 	stw	zero,0(r2)
					pRX_Config->ink_supply[isNo].test_cylinderPres 	= 0;
   13538:	008000b4 	movhi	r2,2
   1353c:	10b11404 	addi	r2,r2,-15280
   13540:	10c00017 	ldw	r3,0(r2)
   13544:	e0bff917 	ldw	r2,-28(fp)
   13548:	10801724 	muli	r2,r2,92
   1354c:	10801d04 	addi	r2,r2,116
   13550:	1885883a 	add	r2,r3,r2
   13554:	10000015 	stw	zero,0(r2)
					pRX_Status->ink_supply[isNo].TestBleedLine_Phase = 1;
   13558:	008000b4 	movhi	r2,2
   1355c:	10b11304 	addi	r2,r2,-15284
   13560:	10c00017 	ldw	r3,0(r2)
   13564:	e0bff917 	ldw	r2,-28(fp)
   13568:	10801b24 	muli	r2,r2,108
   1356c:	10804004 	addi	r2,r2,256
   13570:	1885883a 	add	r2,r3,r2
   13574:	00c00044 	movi	r3,1
   13578:	10c00015 	stw	r3,0(r2)
					_TestBleedLine_Timer[isNo] = 0;
   1357c:	008000b4 	movhi	r2,2
   13580:	10b55504 	addi	r2,r2,-10924
   13584:	e0fff917 	ldw	r3,-28(fp)
   13588:	18c7883a 	add	r3,r3,r3
   1358c:	18c7883a 	add	r3,r3,r3
   13590:	10c5883a 	add	r2,r2,r3
   13594:	10000015 	stw	zero,0(r2)
					pRX_Status->ink_supply[isNo].TestBleedLine_Pump_Phase1 = 0;
   13598:	008000b4 	movhi	r2,2
   1359c:	10b11304 	addi	r2,r2,-15284
   135a0:	10c00017 	ldw	r3,0(r2)
   135a4:	e0bff917 	ldw	r2,-28(fp)
   135a8:	10801b24 	muli	r2,r2,108
   135ac:	10804104 	addi	r2,r2,260
   135b0:	1885883a 	add	r2,r3,r2
   135b4:	10000015 	stw	zero,0(r2)
					pRX_Status->ink_supply[isNo].TestBleedLine_Pump_Phase2 = 0;
   135b8:	008000b4 	movhi	r2,2
   135bc:	10b11304 	addi	r2,r2,-15284
   135c0:	10c00017 	ldw	r3,0(r2)
   135c4:	e0bff917 	ldw	r2,-28(fp)
   135c8:	10801b24 	muli	r2,r2,108
   135cc:	10804204 	addi	r2,r2,264
   135d0:	1885883a 	add	r2,r3,r2
   135d4:	10000015 	stw	zero,0(r2)
					pRX_Status->ink_supply[isNo].TestBleedLine_Pump_Phase3 = 0;
   135d8:	008000b4 	movhi	r2,2
   135dc:	10b11304 	addi	r2,r2,-15284
   135e0:	10c00017 	ldw	r3,0(r2)
   135e4:	e0bff917 	ldw	r2,-28(fp)
   135e8:	10801b24 	muli	r2,r2,108
   135ec:	10804304 	addi	r2,r2,268
   135f0:	1885883a 	add	r2,r3,r2
   135f4:	10000015 	stw	zero,0(r2)
					_OldPumpSpeed[isNo] = -10;
   135f8:	008000b4 	movhi	r2,2
   135fc:	10b55904 	addi	r2,r2,-10908
   13600:	e0fff917 	ldw	r3,-28(fp)
   13604:	18c7883a 	add	r3,r3,r3
   13608:	18c7883a 	add	r3,r3,r3
   1360c:	10c5883a 	add	r2,r2,r3
   13610:	00fffd84 	movi	r3,-10
   13614:	10c00015 	stw	r3,0(r2)
				}
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_test;
   13618:	008000b4 	movhi	r2,2
   1361c:	10b11304 	addi	r2,r2,-15284
   13620:	10c00017 	ldw	r3,0(r2)
   13624:	e0bff917 	ldw	r2,-28(fp)
   13628:	10801b24 	muli	r2,r2,108
   1362c:	10802a04 	addi	r2,r2,168
   13630:	1887883a 	add	r3,r3,r2
   13634:	00800074 	movhi	r2,1
   13638:	10800044 	addi	r2,r2,1
   1363c:	18800015 	stw	r2,0(r3)
				break;
   13640:	0003e706 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_warmup:
				_set_air_valve(isNo, FALSE);
   13644:	e13ff917 	ldw	r4,-28(fp)
   13648:	000b883a 	mov	r5,zero
   1364c:	0014ddc0 	call	14ddc <_set_air_valve>
				_set_bleed_valve(isNo, FALSE);
   13650:	e13ff917 	ldw	r4,-28(fp)
   13654:	000b883a 	mov	r5,zero
   13658:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_InkSupply[isNo].degassing=pRX_Config->cmd.lung_enabled;
   1365c:	008000b4 	movhi	r2,2
   13660:	10b11404 	addi	r2,r2,-15280
   13664:	10800017 	ldw	r2,0(r2)
   13668:	10800017 	ldw	r2,0(r2)
   1366c:	1004d0fa 	srli	r2,r2,3
   13670:	1080004c 	andi	r2,r2,1
   13674:	10c03fcc 	andi	r3,r2,255
   13678:	008000b4 	movhi	r2,2
   1367c:	10b4d904 	addi	r2,r2,-11420
   13680:	e13ff917 	ldw	r4,-28(fp)
   13684:	21001f24 	muli	r4,r4,124
   13688:	21001a04 	addi	r4,r4,104
   1368c:	1105883a 	add	r2,r2,r4
   13690:	10c00015 	stw	r3,0(r2)
				_pump_ctrl(isNo, pRX_Status->ink_supply[isNo].cylinderPresSet, PUMP_CTRL_MODE_DEFAULT);
   13694:	008000b4 	movhi	r2,2
   13698:	10b11304 	addi	r2,r2,-15284
   1369c:	10c00017 	ldw	r3,0(r2)
   136a0:	e0bff917 	ldw	r2,-28(fp)
   136a4:	10801b24 	muli	r2,r2,108
   136a8:	10802e04 	addi	r2,r2,184
   136ac:	1885883a 	add	r2,r3,r2
   136b0:	10800017 	ldw	r2,0(r2)
   136b4:	e13ff917 	ldw	r4,-28(fp)
   136b8:	100b883a 	mov	r5,r2
   136bc:	000d883a 	mov	r6,zero
   136c0:	00150500 	call	15050 <_pump_ctrl>
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_warmup;
   136c4:	008000b4 	movhi	r2,2
   136c8:	10b11304 	addi	r2,r2,-15284
   136cc:	10c00017 	ldw	r3,0(r2)
   136d0:	e0bff917 	ldw	r2,-28(fp)
   136d4:	10801b24 	muli	r2,r2,108
   136d8:	10802a04 	addi	r2,r2,168
   136dc:	1885883a 	add	r2,r3,r2
   136e0:	00c00144 	movi	r3,5
   136e4:	10c00015 	stw	r3,0(r2)
				break;
   136e8:	0003bd06 	br	145e0 <ink_tick_10ms+0x2760>
*/
			// --- FLUSH --------------------------------------------------
			case ctrl_flush_night:
			case ctrl_flush_weekend:
			case ctrl_flush_week:
				_set_air_valve(isNo, FALSE);
   136ec:	e13ff917 	ldw	r4,-28(fp)
   136f0:	000b883a 	mov	r5,zero
   136f4:	0014ddc0 	call	14ddc <_set_air_valve>
				_InkSupply[isNo].degassing = pRX_Config->cmd.lung_enabled;
   136f8:	008000b4 	movhi	r2,2
   136fc:	10b11404 	addi	r2,r2,-15280
   13700:	10800017 	ldw	r2,0(r2)
   13704:	10800017 	ldw	r2,0(r2)
   13708:	1004d0fa 	srli	r2,r2,3
   1370c:	1080004c 	andi	r2,r2,1
   13710:	10c03fcc 	andi	r3,r2,255
   13714:	008000b4 	movhi	r2,2
   13718:	10b4d904 	addi	r2,r2,-11420
   1371c:	e13ff917 	ldw	r4,-28(fp)
   13720:	21001f24 	muli	r4,r4,124
   13724:	21001a04 	addi	r4,r4,104
   13728:	1105883a 	add	r2,r2,r4
   1372c:	10c00015 	stw	r3,0(r2)
				_pump_ctrl(isNo, PRESSURE_FLUSH,PUMP_CTRL_MODE_DEFAULT);
   13730:	e13ff917 	ldw	r4,-28(fp)
   13734:	0140fa04 	movi	r5,1000
   13738:	000d883a 	mov	r6,zero
   1373c:	00150500 	call	15050 <_pump_ctrl>
				_set_flush_pump(isNo, FALSE);
   13740:	e13ff917 	ldw	r4,-28(fp)
   13744:	000b883a 	mov	r5,zero
   13748:	00159340 	call	15934 <_set_flush_pump>
				pRX_Status->ink_supply[isNo].flushTime  = 1000 * pRX_Config->ink_supply[isNo].flushTime[pRX_Config->ink_supply[isNo].ctrl_mode-ctrl_flush_night];
   1374c:	008000b4 	movhi	r2,2
   13750:	10b11304 	addi	r2,r2,-15284
   13754:	11000017 	ldw	r4,0(r2)
   13758:	008000b4 	movhi	r2,2
   1375c:	10b11404 	addi	r2,r2,-15280
   13760:	10c00017 	ldw	r3,0(r2)
   13764:	008000b4 	movhi	r2,2
   13768:	10b11404 	addi	r2,r2,-15280
   1376c:	11400017 	ldw	r5,0(r2)
   13770:	e0bff917 	ldw	r2,-28(fp)
   13774:	10801724 	muli	r2,r2,92
   13778:	10800904 	addi	r2,r2,36
   1377c:	2885883a 	add	r2,r5,r2
   13780:	10800017 	ldw	r2,0(r2)
   13784:	10bfe004 	addi	r2,r2,-128
   13788:	e17ff917 	ldw	r5,-28(fp)
   1378c:	294005e4 	muli	r5,r5,23
   13790:	2885883a 	add	r2,r5,r2
   13794:	10800304 	addi	r2,r2,12
   13798:	1085883a 	add	r2,r2,r2
   1379c:	1085883a 	add	r2,r2,r2
   137a0:	1885883a 	add	r2,r3,r2
   137a4:	10800017 	ldw	r2,0(r2)
   137a8:	10c0fa24 	muli	r3,r2,1000
   137ac:	e0bff917 	ldw	r2,-28(fp)
   137b0:	10801b24 	muli	r2,r2,108
   137b4:	10803804 	addi	r2,r2,224
   137b8:	2085883a 	add	r2,r4,r2
   137bc:	10c00015 	stw	r3,0(r2)
				pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   137c0:	008000b4 	movhi	r2,2
   137c4:	10b11304 	addi	r2,r2,-15284
   137c8:	11000017 	ldw	r4,0(r2)
   137cc:	008000b4 	movhi	r2,2
   137d0:	10b11404 	addi	r2,r2,-15280
   137d4:	10c00017 	ldw	r3,0(r2)
   137d8:	e0bff917 	ldw	r2,-28(fp)
   137dc:	10801724 	muli	r2,r2,92
   137e0:	10800904 	addi	r2,r2,36
   137e4:	1885883a 	add	r2,r3,r2
   137e8:	10c00017 	ldw	r3,0(r2)
   137ec:	e0bff917 	ldw	r2,-28(fp)
   137f0:	10801b24 	muli	r2,r2,108
   137f4:	10802a04 	addi	r2,r2,168
   137f8:	2085883a 	add	r2,r4,r2
   137fc:	10c00015 	stw	r3,0(r2)
				break;
   13800:	00037706 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_flush_step1:
			case ctrl_flush_step2:
				_pump_ctrl(isNo, PRESSURE_FLUSH,PUMP_CTRL_MODE_DEFAULT);
   13804:	e13ff917 	ldw	r4,-28(fp)
   13808:	0140fa04 	movi	r5,1000
   1380c:	000d883a 	mov	r6,zero
   13810:	00150500 	call	15050 <_pump_ctrl>
				_FlushISPressureStable[isNo] = pRX_Status->ink_supply[isNo].IS_Pressure_Actual;
   13814:	008000b4 	movhi	r2,2
   13818:	10b11304 	addi	r2,r2,-15284
   1381c:	10c00017 	ldw	r3,0(r2)
   13820:	e0bff917 	ldw	r2,-28(fp)
   13824:	10801b24 	muli	r2,r2,108
   13828:	10802f04 	addi	r2,r2,188
   1382c:	1885883a 	add	r2,r3,r2
   13830:	11000017 	ldw	r4,0(r2)
   13834:	008000b4 	movhi	r2,2
   13838:	10b57104 	addi	r2,r2,-10812
   1383c:	e0fff917 	ldw	r3,-28(fp)
   13840:	18c7883a 	add	r3,r3,r3
   13844:	18c7883a 	add	r3,r3,r3
   13848:	10c5883a 	add	r2,r2,r3
   1384c:	11000015 	stw	r4,0(r2)
				_FlushTimeISPresStable[isNo] = 0;
   13850:	008000b4 	movhi	r2,2
   13854:	10b56d04 	addi	r2,r2,-10828
   13858:	e0fff917 	ldw	r3,-28(fp)
   1385c:	18c7883a 	add	r3,r3,r3
   13860:	18c7883a 	add	r3,r3,r3
   13864:	10c5883a 	add	r2,r2,r3
   13868:	10000015 	stw	zero,0(r2)
				pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   1386c:	008000b4 	movhi	r2,2
   13870:	10b11304 	addi	r2,r2,-15284
   13874:	11000017 	ldw	r4,0(r2)
   13878:	008000b4 	movhi	r2,2
   1387c:	10b11404 	addi	r2,r2,-15280
   13880:	10c00017 	ldw	r3,0(r2)
   13884:	e0bff917 	ldw	r2,-28(fp)
   13888:	10801724 	muli	r2,r2,92
   1388c:	10800904 	addi	r2,r2,36
   13890:	1885883a 	add	r2,r3,r2
   13894:	10c00017 	ldw	r3,0(r2)
   13898:	e0bff917 	ldw	r2,-28(fp)
   1389c:	10801b24 	muli	r2,r2,108
   138a0:	10802a04 	addi	r2,r2,168
   138a4:	2085883a 	add	r2,r4,r2
   138a8:	10c00015 	stw	r3,0(r2)
				break;
   138ac:	00034c06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_flush_step3:
				_pump_ctrl(isNo, PRESSURE_FLUSH,PUMP_CTRL_MODE_DEFAULT);
   138b0:	e13ff917 	ldw	r4,-28(fp)
   138b4:	0140fa04 	movi	r5,1000
   138b8:	000d883a 	mov	r6,zero
   138bc:	00150500 	call	15050 <_pump_ctrl>
				// detection of IS pressure stability to start the flush
				if(abs(_FlushISPressureStable[isNo] -  pRX_Status->ink_supply[isNo].IS_Pressure_Actual) < 200)
   138c0:	008000b4 	movhi	r2,2
   138c4:	10b57104 	addi	r2,r2,-10812
   138c8:	e0fff917 	ldw	r3,-28(fp)
   138cc:	18c7883a 	add	r3,r3,r3
   138d0:	18c7883a 	add	r3,r3,r3
   138d4:	10c5883a 	add	r2,r2,r3
   138d8:	10c00017 	ldw	r3,0(r2)
   138dc:	008000b4 	movhi	r2,2
   138e0:	10b11304 	addi	r2,r2,-15284
   138e4:	11000017 	ldw	r4,0(r2)
   138e8:	e0bff917 	ldw	r2,-28(fp)
   138ec:	10801b24 	muli	r2,r2,108
   138f0:	10802f04 	addi	r2,r2,188
   138f4:	2085883a 	add	r2,r4,r2
   138f8:	10800017 	ldw	r2,0(r2)
   138fc:	1885c83a 	sub	r2,r3,r2
   13900:	10bfce50 	cmplti	r2,r2,-199
   13904:	1000221e 	bne	r2,zero,13990 <ink_tick_10ms+0x1b10>
   13908:	008000b4 	movhi	r2,2
   1390c:	10b57104 	addi	r2,r2,-10812
   13910:	e0fff917 	ldw	r3,-28(fp)
   13914:	18c7883a 	add	r3,r3,r3
   13918:	18c7883a 	add	r3,r3,r3
   1391c:	10c5883a 	add	r2,r2,r3
   13920:	10c00017 	ldw	r3,0(r2)
   13924:	008000b4 	movhi	r2,2
   13928:	10b11304 	addi	r2,r2,-15284
   1392c:	11000017 	ldw	r4,0(r2)
   13930:	e0bff917 	ldw	r2,-28(fp)
   13934:	10801b24 	muli	r2,r2,108
   13938:	10802f04 	addi	r2,r2,188
   1393c:	2085883a 	add	r2,r4,r2
   13940:	10800017 	ldw	r2,0(r2)
   13944:	1885c83a 	sub	r2,r3,r2
   13948:	10803208 	cmpgei	r2,r2,200
   1394c:	1000101e 	bne	r2,zero,13990 <ink_tick_10ms+0x1b10>
					_FlushTimeISPresStable[isNo]++;
   13950:	008000b4 	movhi	r2,2
   13954:	10b56d04 	addi	r2,r2,-10828
   13958:	e0fff917 	ldw	r3,-28(fp)
   1395c:	18c7883a 	add	r3,r3,r3
   13960:	18c7883a 	add	r3,r3,r3
   13964:	10c5883a 	add	r2,r2,r3
   13968:	10800017 	ldw	r2,0(r2)
   1396c:	11000044 	addi	r4,r2,1
   13970:	008000b4 	movhi	r2,2
   13974:	10b56d04 	addi	r2,r2,-10828
   13978:	e0fff917 	ldw	r3,-28(fp)
   1397c:	18c7883a 	add	r3,r3,r3
   13980:	18c7883a 	add	r3,r3,r3
   13984:	10c5883a 	add	r2,r2,r3
   13988:	11000015 	stw	r4,0(r2)
   1398c:	00001606 	br	139e8 <ink_tick_10ms+0x1b68>
				else
				{
					_FlushISPressureStable[isNo] = pRX_Status->ink_supply[isNo].IS_Pressure_Actual;
   13990:	008000b4 	movhi	r2,2
   13994:	10b11304 	addi	r2,r2,-15284
   13998:	10c00017 	ldw	r3,0(r2)
   1399c:	e0bff917 	ldw	r2,-28(fp)
   139a0:	10801b24 	muli	r2,r2,108
   139a4:	10802f04 	addi	r2,r2,188
   139a8:	1885883a 	add	r2,r3,r2
   139ac:	11000017 	ldw	r4,0(r2)
   139b0:	008000b4 	movhi	r2,2
   139b4:	10b57104 	addi	r2,r2,-10812
   139b8:	e0fff917 	ldw	r3,-28(fp)
   139bc:	18c7883a 	add	r3,r3,r3
   139c0:	18c7883a 	add	r3,r3,r3
   139c4:	10c5883a 	add	r2,r2,r3
   139c8:	11000015 	stw	r4,0(r2)
					_FlushTimeISPresStable[isNo] = 0;
   139cc:	008000b4 	movhi	r2,2
   139d0:	10b56d04 	addi	r2,r2,-10828
   139d4:	e0fff917 	ldw	r3,-28(fp)
   139d8:	18c7883a 	add	r3,r3,r3
   139dc:	18c7883a 	add	r3,r3,r3
   139e0:	10c5883a 	add	r2,r2,r3
   139e4:	10000015 	stw	zero,0(r2)
				}
				// ink pressure must be applied on all cylinders so that no flush is pressed back

				//if (pRX_Config->ink_supply[isNo].cylinderPresSet==0
				//||
				if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual != INVALID_VALUE
   139e8:	008000b4 	movhi	r2,2
   139ec:	10b11304 	addi	r2,r2,-15284
   139f0:	10c00017 	ldw	r3,0(r2)
   139f4:	e0bff917 	ldw	r2,-28(fp)
   139f8:	10801b24 	muli	r2,r2,108
   139fc:	10802f04 	addi	r2,r2,188
   13a00:	1885883a 	add	r2,r3,r2
   13a04:	10c00017 	ldw	r3,0(r2)
   13a08:	009555b4 	movhi	r2,21846
   13a0c:	10aaaa84 	addi	r2,r2,-21846
   13a10:	18801d26 	beq	r3,r2,13a88 <ink_tick_10ms+0x1c08>
						&&  _FlushTimeISPresStable[isNo] > TIME_PRESSURE_FOR_FLUSH
   13a14:	008000b4 	movhi	r2,2
   13a18:	10b56d04 	addi	r2,r2,-10828
   13a1c:	e0fff917 	ldw	r3,-28(fp)
   13a20:	18c7883a 	add	r3,r3,r3
   13a24:	18c7883a 	add	r3,r3,r3
   13a28:	10c5883a 	add	r2,r2,r3
   13a2c:	10800017 	ldw	r2,0(r2)
   13a30:	10803250 	cmplti	r2,r2,201
   13a34:	1000141e 	bne	r2,zero,13a88 <ink_tick_10ms+0x1c08>
						&& pRX_Status->ink_supply[isNo].IS_Pressure_Actual > 100)
   13a38:	008000b4 	movhi	r2,2
   13a3c:	10b11304 	addi	r2,r2,-15284
   13a40:	10c00017 	ldw	r3,0(r2)
   13a44:	e0bff917 	ldw	r2,-28(fp)
   13a48:	10801b24 	muli	r2,r2,108
   13a4c:	10802f04 	addi	r2,r2,188
   13a50:	1885883a 	add	r2,r3,r2
   13a54:	10800017 	ldw	r2,0(r2)
   13a58:	10801950 	cmplti	r2,r2,101
   13a5c:	10000a1e 	bne	r2,zero,13a88 <ink_tick_10ms+0x1c08>
				//	)
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_flush_step3;
   13a60:	008000b4 	movhi	r2,2
   13a64:	10b11304 	addi	r2,r2,-15284
   13a68:	10c00017 	ldw	r3,0(r2)
   13a6c:	e0bff917 	ldw	r2,-28(fp)
   13a70:	10801b24 	muli	r2,r2,108
   13a74:	10802a04 	addi	r2,r2,168
   13a78:	1885883a 	add	r2,r3,r2
   13a7c:	00c02144 	movi	r3,133
   13a80:	10c00015 	stw	r3,0(r2)
				break;
   13a84:	0002d606 	br	145e0 <ink_tick_10ms+0x2760>
   13a88:	0002d506 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_flush_step4:
				_InkSupply[isNo].degassing = pRX_Config->cmd.lung_enabled;
   13a8c:	008000b4 	movhi	r2,2
   13a90:	10b11404 	addi	r2,r2,-15280
   13a94:	10800017 	ldw	r2,0(r2)
   13a98:	10800017 	ldw	r2,0(r2)
   13a9c:	1004d0fa 	srli	r2,r2,3
   13aa0:	1080004c 	andi	r2,r2,1
   13aa4:	10c03fcc 	andi	r3,r2,255
   13aa8:	008000b4 	movhi	r2,2
   13aac:	10b4d904 	addi	r2,r2,-11420
   13ab0:	e13ff917 	ldw	r4,-28(fp)
   13ab4:	21001f24 	muli	r4,r4,124
   13ab8:	21001a04 	addi	r4,r4,104
   13abc:	1105883a 	add	r2,r2,r4
   13ac0:	10c00015 	stw	r3,0(r2)
				if (pRX_Status->ink_supply[isNo].flushTime>0)
   13ac4:	008000b4 	movhi	r2,2
   13ac8:	10b11304 	addi	r2,r2,-15284
   13acc:	10c00017 	ldw	r3,0(r2)
   13ad0:	e0bff917 	ldw	r2,-28(fp)
   13ad4:	10801b24 	muli	r2,r2,108
   13ad8:	10803804 	addi	r2,r2,224
   13adc:	1885883a 	add	r2,r3,r2
   13ae0:	10800017 	ldw	r2,0(r2)
   13ae4:	0080360e 	bge	zero,r2,13bc0 <ink_tick_10ms+0x1d40>
				{
					_pump_ctrl(isNo, PRESSURE_FLUSH,PUMP_CTRL_MODE_DEFAULT);
   13ae8:	e13ff917 	ldw	r4,-28(fp)
   13aec:	0140fa04 	movi	r5,1000
   13af0:	000d883a 	mov	r6,zero
   13af4:	00150500 	call	15050 <_pump_ctrl>
					if (pRX_Status->flush_pressure < 1200) _set_flush_pump(isNo, TRUE);
   13af8:	008000b4 	movhi	r2,2
   13afc:	10b11304 	addi	r2,r2,-15284
   13b00:	10800017 	ldw	r2,0(r2)
   13b04:	10801317 	ldw	r2,76(r2)
   13b08:	10812c08 	cmpgei	r2,r2,1200
   13b0c:	1000041e 	bne	r2,zero,13b20 <ink_tick_10ms+0x1ca0>
   13b10:	e13ff917 	ldw	r4,-28(fp)
   13b14:	01400044 	movi	r5,1
   13b18:	00159340 	call	15934 <_set_flush_pump>
   13b1c:	00000c06 	br	13b50 <ink_tick_10ms+0x1cd0>
					else
					{
						_set_flush_pump(isNo, FALSE);
   13b20:	e13ff917 	ldw	r4,-28(fp)
   13b24:	000b883a 	mov	r5,zero
   13b28:	00159340 	call	15934 <_set_flush_pump>
						pRX_Status->ink_supply[isNo].ctrl_state = ctrl_error;
   13b2c:	008000b4 	movhi	r2,2
   13b30:	10b11304 	addi	r2,r2,-15284
   13b34:	10c00017 	ldw	r3,0(r2)
   13b38:	e0bff917 	ldw	r2,-28(fp)
   13b3c:	10801b24 	muli	r2,r2,108
   13b40:	10802a04 	addi	r2,r2,168
   13b44:	1885883a 	add	r2,r3,r2
   13b48:	00c000c4 	movi	r3,3
   13b4c:	10c00015 	stw	r3,0(r2)
					}
					pRX_Status->ink_supply[isNo].flushTime -= cycleTime;
   13b50:	008000b4 	movhi	r2,2
   13b54:	10b11304 	addi	r2,r2,-15284
   13b58:	11000017 	ldw	r4,0(r2)
   13b5c:	008000b4 	movhi	r2,2
   13b60:	10b11304 	addi	r2,r2,-15284
   13b64:	10c00017 	ldw	r3,0(r2)
   13b68:	e0bff917 	ldw	r2,-28(fp)
   13b6c:	10801b24 	muli	r2,r2,108
   13b70:	10803804 	addi	r2,r2,224
   13b74:	1885883a 	add	r2,r3,r2
   13b78:	10c00017 	ldw	r3,0(r2)
   13b7c:	e0bffe17 	ldw	r2,-8(fp)
   13b80:	1887c83a 	sub	r3,r3,r2
   13b84:	e0bff917 	ldw	r2,-28(fp)
   13b88:	10801b24 	muli	r2,r2,108
   13b8c:	10803804 	addi	r2,r2,224
   13b90:	2085883a 	add	r2,r4,r2
   13b94:	10c00015 	stw	r3,0(r2)
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_flush_step3;
   13b98:	008000b4 	movhi	r2,2
   13b9c:	10b11304 	addi	r2,r2,-15284
   13ba0:	10c00017 	ldw	r3,0(r2)
   13ba4:	e0bff917 	ldw	r2,-28(fp)
   13ba8:	10801b24 	muli	r2,r2,108
   13bac:	10802a04 	addi	r2,r2,168
   13bb0:	1885883a 	add	r2,r3,r2
   13bb4:	00c02144 	movi	r3,133
   13bb8:	10c00015 	stw	r3,0(r2)
					_set_pump_speed(isNo, 0);
					_set_flush_pump(isNo, FALSE);
					_set_air_valve(isNo, FALSE);
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_flush_step4;
				}
				break;
   13bbc:	00028806 	br	145e0 <ink_tick_10ms+0x2760>
					pRX_Status->ink_supply[isNo].flushTime -= cycleTime;
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_flush_step3;
				}
				else
				{
					_set_pump_speed(isNo, 0);
   13bc0:	e13ff917 	ldw	r4,-28(fp)
   13bc4:	000b883a 	mov	r5,zero
   13bc8:	00157c80 	call	157c8 <_set_pump_speed>
					_set_flush_pump(isNo, FALSE);
   13bcc:	e13ff917 	ldw	r4,-28(fp)
   13bd0:	000b883a 	mov	r5,zero
   13bd4:	00159340 	call	15934 <_set_flush_pump>
					_set_air_valve(isNo, FALSE);
   13bd8:	e13ff917 	ldw	r4,-28(fp)
   13bdc:	000b883a 	mov	r5,zero
   13be0:	0014ddc0 	call	14ddc <_set_air_valve>
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_flush_step4;
   13be4:	008000b4 	movhi	r2,2
   13be8:	10b11304 	addi	r2,r2,-15284
   13bec:	10c00017 	ldw	r3,0(r2)
   13bf0:	e0bff917 	ldw	r2,-28(fp)
   13bf4:	10801b24 	muli	r2,r2,108
   13bf8:	10802a04 	addi	r2,r2,168
   13bfc:	1885883a 	add	r2,r3,r2
   13c00:	00c02184 	movi	r3,134
   13c04:	10c00015 	stw	r3,0(r2)
				}
				break;
   13c08:	00027506 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_flush_done:
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_flush_done;
   13c0c:	008000b4 	movhi	r2,2
   13c10:	10b11304 	addi	r2,r2,-15284
   13c14:	10c00017 	ldw	r3,0(r2)
   13c18:	e0bff917 	ldw	r2,-28(fp)
   13c1c:	10801b24 	muli	r2,r2,108
   13c20:	10802a04 	addi	r2,r2,168
   13c24:	1885883a 	add	r2,r3,r2
   13c28:	00c021c4 	movi	r3,135
   13c2c:	10c00015 	stw	r3,0(r2)
				break;
   13c30:	00026b06 	br	145e0 <ink_tick_10ms+0x2760>
			case ctrl_purge_soft:		_init_purge(isNo, PRESSURE_SOFT_PURGE); break;
   13c34:	e13ff917 	ldw	r4,-28(fp)
   13c38:	01401404 	movi	r5,80
   13c3c:	00148e80 	call	148e8 <_init_purge>
   13c40:	00026706 	br	145e0 <ink_tick_10ms+0x2760>
			case ctrl_purge:			_init_purge(isNo, PRESSURE_PURGE); 		break;
   13c44:	e13ff917 	ldw	r4,-28(fp)
   13c48:	01402804 	movi	r5,160
   13c4c:	00148e80 	call	148e8 <_init_purge>
   13c50:	00026306 	br	145e0 <ink_tick_10ms+0x2760>
			case ctrl_purge_hard:		_init_purge(isNo, PRESSURE_HARD_PURGE); break;
   13c54:	e13ff917 	ldw	r4,-28(fp)
   13c58:	01405004 	movi	r5,320
   13c5c:	00148e80 	call	148e8 <_init_purge>
   13c60:	00025f06 	br	145e0 <ink_tick_10ms+0x2760>
			case ctrl_purge_hard_wipe:	_init_purge(isNo, PRESSURE_HARD_PURGE); break;
   13c64:	e13ff917 	ldw	r4,-28(fp)
   13c68:	01405004 	movi	r5,320
   13c6c:	00148e80 	call	148e8 <_init_purge>
   13c70:	00025b06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_purge_step1: // build up pressure
			case ctrl_purge_step2: // build up pressure
				_pump_ctrl(isNo, _InkSupply[isNo].purgePressure,PUMP_CTRL_MODE_DEFAULT);
   13c74:	008000b4 	movhi	r2,2
   13c78:	10b4d904 	addi	r2,r2,-11420
   13c7c:	e0fff917 	ldw	r3,-28(fp)
   13c80:	18c01f24 	muli	r3,r3,124
   13c84:	18c01d04 	addi	r3,r3,116
   13c88:	10c5883a 	add	r2,r2,r3
   13c8c:	10800017 	ldw	r2,0(r2)
   13c90:	e13ff917 	ldw	r4,-28(fp)
   13c94:	100b883a 	mov	r5,r2
   13c98:	000d883a 	mov	r6,zero
   13c9c:	00150500 	call	15050 <_pump_ctrl>
				pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   13ca0:	008000b4 	movhi	r2,2
   13ca4:	10b11304 	addi	r2,r2,-15284
   13ca8:	11000017 	ldw	r4,0(r2)
   13cac:	008000b4 	movhi	r2,2
   13cb0:	10b11404 	addi	r2,r2,-15280
   13cb4:	10c00017 	ldw	r3,0(r2)
   13cb8:	e0bff917 	ldw	r2,-28(fp)
   13cbc:	10801724 	muli	r2,r2,92
   13cc0:	10800904 	addi	r2,r2,36
   13cc4:	1885883a 	add	r2,r3,r2
   13cc8:	10c00017 	ldw	r3,0(r2)
   13ccc:	e0bff917 	ldw	r2,-28(fp)
   13cd0:	10801b24 	muli	r2,r2,108
   13cd4:	10802a04 	addi	r2,r2,168
   13cd8:	2085883a 	add	r2,r4,r2
   13cdc:	10c00015 	stw	r3,0(r2)
				break;
   13ce0:	00023f06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_purge_step3: // build up pressure
				_pump_ctrl(isNo, _InkSupply[isNo].purgePressure,PUMP_CTRL_MODE_DEFAULT);
   13ce4:	008000b4 	movhi	r2,2
   13ce8:	10b4d904 	addi	r2,r2,-11420
   13cec:	e0fff917 	ldw	r3,-28(fp)
   13cf0:	18c01f24 	muli	r3,r3,124
   13cf4:	18c01d04 	addi	r3,r3,116
   13cf8:	10c5883a 	add	r2,r2,r3
   13cfc:	10800017 	ldw	r2,0(r2)
   13d00:	e13ff917 	ldw	r4,-28(fp)
   13d04:	100b883a 	mov	r5,r2
   13d08:	000d883a 	mov	r6,zero
   13d0c:	00150500 	call	15050 <_pump_ctrl>
				_InkSupply[isNo].purgeTime = 0;
   13d10:	008000b4 	movhi	r2,2
   13d14:	10b4d904 	addi	r2,r2,-11420
   13d18:	e0fff917 	ldw	r3,-28(fp)
   13d1c:	18c01f24 	muli	r3,r3,124
   13d20:	18c01e04 	addi	r3,r3,120
   13d24:	10c5883a 	add	r2,r2,r3
   13d28:	10000015 	stw	zero,0(r2)
				if (pRX_Status->ink_supply[isNo].IS_Pressure_Actual >= (60 * _InkSupply[isNo].purgePressure / 100))
   13d2c:	008000b4 	movhi	r2,2
   13d30:	10b11304 	addi	r2,r2,-15284
   13d34:	10c00017 	ldw	r3,0(r2)
   13d38:	e0bff917 	ldw	r2,-28(fp)
   13d3c:	10801b24 	muli	r2,r2,108
   13d40:	10802f04 	addi	r2,r2,188
   13d44:	1885883a 	add	r2,r3,r2
   13d48:	14000017 	ldw	r16,0(r2)
   13d4c:	008000b4 	movhi	r2,2
   13d50:	10b4d904 	addi	r2,r2,-11420
   13d54:	e0fff917 	ldw	r3,-28(fp)
   13d58:	18c01f24 	muli	r3,r3,124
   13d5c:	18c01d04 	addi	r3,r3,116
   13d60:	10c5883a 	add	r2,r2,r3
   13d64:	10800017 	ldw	r2,0(r2)
   13d68:	10800f24 	muli	r2,r2,60
   13d6c:	1009883a 	mov	r4,r2
   13d70:	01401904 	movi	r5,100
   13d74:	00180380 	call	18038 <__divsi3>
   13d78:	80800a16 	blt	r16,r2,13da4 <ink_tick_10ms+0x1f24>
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_purge_step3;
   13d7c:	008000b4 	movhi	r2,2
   13d80:	10b11304 	addi	r2,r2,-15284
   13d84:	10c00017 	ldw	r3,0(r2)
   13d88:	e0bff917 	ldw	r2,-28(fp)
   13d8c:	10801b24 	muli	r2,r2,108
   13d90:	10802a04 	addi	r2,r2,168
   13d94:	1885883a 	add	r2,r3,r2
   13d98:	00c044c4 	movi	r3,275
   13d9c:	10c00015 	stw	r3,0(r2)
				break;
   13da0:	00020f06 	br	145e0 <ink_tick_10ms+0x2760>
   13da4:	00020e06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_purge_step4:
				if (_InkSupply[isNo].purgeTime<pRX_Config->ink_supply[isNo].purgeTime)
   13da8:	008000b4 	movhi	r2,2
   13dac:	10b4d904 	addi	r2,r2,-11420
   13db0:	e0fff917 	ldw	r3,-28(fp)
   13db4:	18c01f24 	muli	r3,r3,124
   13db8:	18c01e04 	addi	r3,r3,120
   13dbc:	10c5883a 	add	r2,r2,r3
   13dc0:	10c00017 	ldw	r3,0(r2)
   13dc4:	008000b4 	movhi	r2,2
   13dc8:	10b11404 	addi	r2,r2,-15280
   13dcc:	11000017 	ldw	r4,0(r2)
   13dd0:	e0bff917 	ldw	r2,-28(fp)
   13dd4:	10801724 	muli	r2,r2,92
   13dd8:	10800f04 	addi	r2,r2,60
   13ddc:	2085883a 	add	r2,r4,r2
   13de0:	10800017 	ldw	r2,0(r2)
   13de4:	18801f0e 	bge	r3,r2,13e64 <ink_tick_10ms+0x1fe4>
				{
					_pump_ctrl(isNo, _InkSupply[isNo].purgePressure, PUMP_CTRL_MODE_DEFAULT);
   13de8:	008000b4 	movhi	r2,2
   13dec:	10b4d904 	addi	r2,r2,-11420
   13df0:	e0fff917 	ldw	r3,-28(fp)
   13df4:	18c01f24 	muli	r3,r3,124
   13df8:	18c01d04 	addi	r3,r3,116
   13dfc:	10c5883a 	add	r2,r2,r3
   13e00:	10800017 	ldw	r2,0(r2)
   13e04:	e13ff917 	ldw	r4,-28(fp)
   13e08:	100b883a 	mov	r5,r2
   13e0c:	000d883a 	mov	r6,zero
   13e10:	00150500 	call	15050 <_pump_ctrl>
					_set_bleed_valve(isNo, FALSE);
   13e14:	e13ff917 	ldw	r4,-28(fp)
   13e18:	000b883a 	mov	r5,zero
   13e1c:	0014ed00 	call	14ed0 <_set_bleed_valve>
					_InkSupply[isNo].purgeTime+=cycleTime;
   13e20:	008000b4 	movhi	r2,2
   13e24:	10b4d904 	addi	r2,r2,-11420
   13e28:	e0fff917 	ldw	r3,-28(fp)
   13e2c:	18c01f24 	muli	r3,r3,124
   13e30:	18c01e04 	addi	r3,r3,120
   13e34:	10c5883a 	add	r2,r2,r3
   13e38:	10c00017 	ldw	r3,0(r2)
   13e3c:	e0bffe17 	ldw	r2,-8(fp)
   13e40:	1887883a 	add	r3,r3,r2
   13e44:	008000b4 	movhi	r2,2
   13e48:	10b4d904 	addi	r2,r2,-11420
   13e4c:	e13ff917 	ldw	r4,-28(fp)
   13e50:	21001f24 	muli	r4,r4,124
   13e54:	21001e04 	addi	r4,r4,120
   13e58:	1105883a 	add	r2,r2,r4
   13e5c:	10c00015 	stw	r3,0(r2)
					_InkSupply[isNo].purgePressure = 0;
					_set_pump_speed(isNo, 0);
					_set_air_valve(isNo, TRUE);
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_purge_step4;
				}
				break;
   13e60:	0001df06 	br	145e0 <ink_tick_10ms+0x2760>
					_set_bleed_valve(isNo, FALSE);
					_InkSupply[isNo].purgeTime+=cycleTime;
				}
				else
				{
					_InkSupply[isNo].purgePressure = 0;
   13e64:	008000b4 	movhi	r2,2
   13e68:	10b4d904 	addi	r2,r2,-11420
   13e6c:	e0fff917 	ldw	r3,-28(fp)
   13e70:	18c01f24 	muli	r3,r3,124
   13e74:	18c01d04 	addi	r3,r3,116
   13e78:	10c5883a 	add	r2,r2,r3
   13e7c:	10000015 	stw	zero,0(r2)
					_set_pump_speed(isNo, 0);
   13e80:	e13ff917 	ldw	r4,-28(fp)
   13e84:	000b883a 	mov	r5,zero
   13e88:	00157c80 	call	157c8 <_set_pump_speed>
					_set_air_valve(isNo, TRUE);
   13e8c:	e13ff917 	ldw	r4,-28(fp)
   13e90:	01400044 	movi	r5,1
   13e94:	0014ddc0 	call	14ddc <_set_air_valve>
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_purge_step4;
   13e98:	008000b4 	movhi	r2,2
   13e9c:	10b11304 	addi	r2,r2,-15284
   13ea0:	10c00017 	ldw	r3,0(r2)
   13ea4:	e0bff917 	ldw	r2,-28(fp)
   13ea8:	10801b24 	muli	r2,r2,108
   13eac:	10802a04 	addi	r2,r2,168
   13eb0:	1885883a 	add	r2,r3,r2
   13eb4:	00c04504 	movi	r3,276
   13eb8:	10c00015 	stw	r3,0(r2)
				}
				break;
   13ebc:	0001c806 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_purge_step5:
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_purge_step5;
   13ec0:	008000b4 	movhi	r2,2
   13ec4:	10b11304 	addi	r2,r2,-15284
   13ec8:	10c00017 	ldw	r3,0(r2)
   13ecc:	e0bff917 	ldw	r2,-28(fp)
   13ed0:	10801b24 	muli	r2,r2,108
   13ed4:	10802a04 	addi	r2,r2,168
   13ed8:	1885883a 	add	r2,r3,r2
   13edc:	00c04544 	movi	r3,277
   13ee0:	10c00015 	stw	r3,0(r2)
				break;
   13ee4:	0001be06 	br	145e0 <ink_tick_10ms+0x2760>

			// --- FILL --------------------------------------------------
			case ctrl_fill:
				_InkSupply[isNo].degassing = FALSE;
   13ee8:	008000b4 	movhi	r2,2
   13eec:	10b4d904 	addi	r2,r2,-11420
   13ef0:	e0fff917 	ldw	r3,-28(fp)
   13ef4:	18c01f24 	muli	r3,r3,124
   13ef8:	18c01a04 	addi	r3,r3,104
   13efc:	10c5883a 	add	r2,r2,r3
   13f00:	10000015 	stw	zero,0(r2)
				_set_air_valve(isNo, TRUE);
   13f04:	e13ff917 	ldw	r4,-28(fp)
   13f08:	01400044 	movi	r5,1
   13f0c:	0014ddc0 	call	14ddc <_set_air_valve>
				_set_bleed_valve(isNo, FALSE);
   13f10:	e13ff917 	ldw	r4,-28(fp)
   13f14:	000b883a 	mov	r5,zero
   13f18:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_FillPressure = pRX_Config->headsPerColor * 50;
   13f1c:	008000b4 	movhi	r2,2
   13f20:	10b11404 	addi	r2,r2,-15280
   13f24:	10800017 	ldw	r2,0(r2)
   13f28:	10800517 	ldw	r2,20(r2)
   13f2c:	10800ca4 	muli	r2,r2,50
   13f30:	d0a4d715 	stw	r2,-27812(gp)
				if(_FillPressure < 100) _FillPressure = 100;
   13f34:	d0a4d717 	ldw	r2,-27812(gp)
   13f38:	10801908 	cmpgei	r2,r2,100
   13f3c:	1000021e 	bne	r2,zero,13f48 <ink_tick_10ms+0x20c8>
   13f40:	00801904 	movi	r2,100
   13f44:	d0a4d715 	stw	r2,-27812(gp)
				if(_FillPressure > 1000) _FillPressure = 1000;
   13f48:	d0a4d717 	ldw	r2,-27812(gp)
   13f4c:	1080fa50 	cmplti	r2,r2,1001
   13f50:	1000021e 	bne	r2,zero,13f5c <ink_tick_10ms+0x20dc>
   13f54:	0080fa04 	movi	r2,1000
   13f58:	d0a4d715 	stw	r2,-27812(gp)
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_fill;
   13f5c:	008000b4 	movhi	r2,2
   13f60:	10b11304 	addi	r2,r2,-15284
   13f64:	10c00017 	ldw	r3,0(r2)
   13f68:	e0bff917 	ldw	r2,-28(fp)
   13f6c:	10801b24 	muli	r2,r2,108
   13f70:	10802a04 	addi	r2,r2,168
   13f74:	1885883a 	add	r2,r3,r2
   13f78:	00c08004 	movi	r3,512
   13f7c:	10c00015 	stw	r3,0(r2)
				break;
   13f80:	00019706 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_fill_step1:
				if (pRX_Status->ink_supply[isNo].IS_Pressure_Actual <= _FillPressure/2)
   13f84:	008000b4 	movhi	r2,2
   13f88:	10b11304 	addi	r2,r2,-15284
   13f8c:	10c00017 	ldw	r3,0(r2)
   13f90:	e0bff917 	ldw	r2,-28(fp)
   13f94:	10801b24 	muli	r2,r2,108
   13f98:	10802f04 	addi	r2,r2,188
   13f9c:	1885883a 	add	r2,r3,r2
   13fa0:	10c00017 	ldw	r3,0(r2)
   13fa4:	d0a4d717 	ldw	r2,-27812(gp)
   13fa8:	1008d7fa 	srli	r4,r2,31
   13fac:	2085883a 	add	r2,r4,r2
   13fb0:	1005d07a 	srai	r2,r2,1
   13fb4:	10c00a16 	blt	r2,r3,13fe0 <ink_tick_10ms+0x2160>
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_fill_step1;
   13fb8:	008000b4 	movhi	r2,2
   13fbc:	10b11304 	addi	r2,r2,-15284
   13fc0:	10c00017 	ldw	r3,0(r2)
   13fc4:	e0bff917 	ldw	r2,-28(fp)
   13fc8:	10801b24 	muli	r2,r2,108
   13fcc:	10802a04 	addi	r2,r2,168
   13fd0:	1885883a 	add	r2,r3,r2
   13fd4:	00c08044 	movi	r3,513
   13fd8:	10c00015 	stw	r3,0(r2)
				break;
   13fdc:	00018006 	br	145e0 <ink_tick_10ms+0x2760>
   13fe0:	00017f06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_fill_step2:
				_set_air_valve(isNo, TRUE);
   13fe4:	e13ff917 	ldw	r4,-28(fp)
   13fe8:	01400044 	movi	r5,1
   13fec:	0014ddc0 	call	14ddc <_set_air_valve>
				_set_bleed_valve(isNo, FALSE);
   13ff0:	e13ff917 	ldw	r4,-28(fp)
   13ff4:	000b883a 	mov	r5,zero
   13ff8:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_set_pressure_value(FALSE);
   13ffc:	0009883a 	mov	r4,zero
   14000:	0014f8c0 	call	14f8c <_set_pressure_value>
				_pump_ctrl(isNo, _FillPressure,PUMP_CTRL_MODE_DEFAULT);
   14004:	d0a4d717 	ldw	r2,-27812(gp)
   14008:	e13ff917 	ldw	r4,-28(fp)
   1400c:	100b883a 	mov	r5,r2
   14010:	000d883a 	mov	r6,zero
   14014:	00150500 	call	15050 <_pump_ctrl>
				pRX_Status->ink_supply[isNo].inkPumpSpeed_set = 100;
   14018:	008000b4 	movhi	r2,2
   1401c:	10b11304 	addi	r2,r2,-15284
   14020:	10c00017 	ldw	r3,0(r2)
   14024:	e0bff917 	ldw	r2,-28(fp)
   14028:	10801b24 	muli	r2,r2,108
   1402c:	10802c04 	addi	r2,r2,176
   14030:	1885883a 	add	r2,r3,r2
   14034:	00c01904 	movi	r3,100
   14038:	10c00015 	stw	r3,0(r2)
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_fill_step2;
   1403c:	008000b4 	movhi	r2,2
   14040:	10b11304 	addi	r2,r2,-15284
   14044:	10c00017 	ldw	r3,0(r2)
   14048:	e0bff917 	ldw	r2,-28(fp)
   1404c:	10801b24 	muli	r2,r2,108
   14050:	10802a04 	addi	r2,r2,168
   14054:	1885883a 	add	r2,r3,r2
   14058:	00c08084 	movi	r3,514
   1405c:	10c00015 	stw	r3,0(r2)
				break;
   14060:	00015f06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_fill_step3:
				_pump_ctrl(isNo, _FillPressure,PUMP_CTRL_MODE_DEFAULT);
   14064:	d0a4d717 	ldw	r2,-27812(gp)
   14068:	e13ff917 	ldw	r4,-28(fp)
   1406c:	100b883a 	mov	r5,r2
   14070:	000d883a 	mov	r6,zero
   14074:	00150500 	call	15050 <_pump_ctrl>
				if ((pRX_Status->ink_supply[isNo].PIDpump_Output < INK_PUMP_VAL_MAX / 2)&&(pRX_Status->ink_supply[isNo].IS_Pressure_Actual > 100))
   14078:	008000b4 	movhi	r2,2
   1407c:	10b11304 	addi	r2,r2,-15284
   14080:	10c00017 	ldw	r3,0(r2)
   14084:	e0bff917 	ldw	r2,-28(fp)
   14088:	10801b24 	muli	r2,r2,108
   1408c:	10803404 	addi	r2,r2,208
   14090:	1885883a 	add	r2,r3,r2
   14094:	10800017 	ldw	r2,0(r2)
   14098:	10803fc8 	cmpgei	r2,r2,255
   1409c:	1000141e 	bne	r2,zero,140f0 <ink_tick_10ms+0x2270>
   140a0:	008000b4 	movhi	r2,2
   140a4:	10b11304 	addi	r2,r2,-15284
   140a8:	10c00017 	ldw	r3,0(r2)
   140ac:	e0bff917 	ldw	r2,-28(fp)
   140b0:	10801b24 	muli	r2,r2,108
   140b4:	10802f04 	addi	r2,r2,188
   140b8:	1885883a 	add	r2,r3,r2
   140bc:	10800017 	ldw	r2,0(r2)
   140c0:	10801950 	cmplti	r2,r2,101
   140c4:	10000a1e 	bne	r2,zero,140f0 <ink_tick_10ms+0x2270>
					pRX_Status->ink_supply[isNo].ctrl_state = ctrl_fill_step3;
   140c8:	008000b4 	movhi	r2,2
   140cc:	10b11304 	addi	r2,r2,-15284
   140d0:	10c00017 	ldw	r3,0(r2)
   140d4:	e0bff917 	ldw	r2,-28(fp)
   140d8:	10801b24 	muli	r2,r2,108
   140dc:	10802a04 	addi	r2,r2,168
   140e0:	1885883a 	add	r2,r3,r2
   140e4:	00c080c4 	movi	r3,515
   140e8:	10c00015 	stw	r3,0(r2)
				break;
   140ec:	00013c06 	br	145e0 <ink_tick_10ms+0x2760>
   140f0:	00013b06 	br	145e0 <ink_tick_10ms+0x2760>

			// --- EMPTY -------------------------------------------------
			case ctrl_empty:
				_set_bleed_valve(isNo, TRUE);
   140f4:	e13ff917 	ldw	r4,-28(fp)
   140f8:	01400044 	movi	r5,1
   140fc:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_set_air_valve(isNo, FALSE);
   14100:	e13ff917 	ldw	r4,-28(fp)
   14104:	000b883a 	mov	r5,zero
   14108:	0014ddc0 	call	14ddc <_set_air_valve>
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_empty;
   1410c:	008000b4 	movhi	r2,2
   14110:	10b11304 	addi	r2,r2,-15284
   14114:	10c00017 	ldw	r3,0(r2)
   14118:	e0bff917 	ldw	r2,-28(fp)
   1411c:	10801b24 	muli	r2,r2,108
   14120:	10802a04 	addi	r2,r2,168
   14124:	1885883a 	add	r2,r3,r2
   14128:	00c0c004 	movi	r3,768
   1412c:	10c00015 	stw	r3,0(r2)
				break;
   14130:	00012b06 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_empty_step1:
				_set_bleed_valve(isNo, TRUE);
   14134:	e13ff917 	ldw	r4,-28(fp)
   14138:	01400044 	movi	r5,1
   1413c:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_set_air_valve(isNo, FALSE);
   14140:	e13ff917 	ldw	r4,-28(fp)
   14144:	000b883a 	mov	r5,zero
   14148:	0014ddc0 	call	14ddc <_set_air_valve>
				for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   1414c:	e03ffa15 	stw	zero,-24(fp)
   14150:	00000d06 	br	14188 <ink_tick_10ms+0x2308>
				{
					_set_pump_speed(i, 0);
   14154:	e13ffa17 	ldw	r4,-24(fp)
   14158:	000b883a 	mov	r5,zero
   1415c:	00157c80 	call	157c8 <_set_pump_speed>
					_InkSupply[i].degassing = FALSE;
   14160:	008000b4 	movhi	r2,2
   14164:	10b4d904 	addi	r2,r2,-11420
   14168:	e0fffa17 	ldw	r3,-24(fp)
   1416c:	18c01f24 	muli	r3,r3,124
   14170:	18c01a04 	addi	r3,r3,104
   14174:	10c5883a 	add	r2,r2,r3
   14178:	10000015 	stw	zero,0(r2)
				break;

			case ctrl_empty_step1:
				_set_bleed_valve(isNo, TRUE);
				_set_air_valve(isNo, FALSE);
				for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   1417c:	e0bffa17 	ldw	r2,-24(fp)
   14180:	10800044 	addi	r2,r2,1
   14184:	e0bffa15 	stw	r2,-24(fp)
   14188:	e0bffa17 	ldw	r2,-24(fp)
   1418c:	10800110 	cmplti	r2,r2,4
   14190:	103ff01e 	bne	r2,zero,14154 <__alt_mem_onchip_memory_nios_arm+0xfffc4154>
				{
					_set_pump_speed(i, 0);
					_InkSupply[i].degassing = FALSE;
				}
				_pump_ctrl(isNo, 0,PUMP_CTRL_MODE_NO_AIR_VALVE);		// ink-pump
   14194:	e13ff917 	ldw	r4,-28(fp)
   14198:	000b883a 	mov	r5,zero
   1419c:	01800084 	movi	r6,2
   141a0:	00150500 	call	15050 <_pump_ctrl>
				_TimeEmpty[isNo] = 0;
   141a4:	008000b4 	movhi	r2,2
   141a8:	10b57504 	addi	r2,r2,-10796
   141ac:	e0fff917 	ldw	r3,-28(fp)
   141b0:	18c7883a 	add	r3,r3,r3
   141b4:	18c7883a 	add	r3,r3,r3
   141b8:	10c5883a 	add	r2,r2,r3
   141bc:	10000015 	stw	zero,0(r2)
				_EmptyDetecTEndState[isNo] = 1;
   141c0:	008000b4 	movhi	r2,2
   141c4:	10b57904 	addi	r2,r2,-10780
   141c8:	e0fff917 	ldw	r3,-28(fp)
   141cc:	18c7883a 	add	r3,r3,r3
   141d0:	18c7883a 	add	r3,r3,r3
   141d4:	10c5883a 	add	r2,r2,r3
   141d8:	00c00044 	movi	r3,1
   141dc:	10c00015 	stw	r3,0(r2)
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_empty_step1;
   141e0:	008000b4 	movhi	r2,2
   141e4:	10b11304 	addi	r2,r2,-15284
   141e8:	10c00017 	ldw	r3,0(r2)
   141ec:	e0bff917 	ldw	r2,-28(fp)
   141f0:	10801b24 	muli	r2,r2,108
   141f4:	10802a04 	addi	r2,r2,168
   141f8:	1885883a 	add	r2,r3,r2
   141fc:	00c0c044 	movi	r3,769
   14200:	10c00015 	stw	r3,0(r2)
				break;
   14204:	0000f606 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_empty_step2:
				_set_bleed_valve(isNo, TRUE);
   14208:	e13ff917 	ldw	r4,-28(fp)
   1420c:	01400044 	movi	r5,1
   14210:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_set_air_valve(isNo, FALSE);
   14214:	e13ff917 	ldw	r4,-28(fp)
   14218:	000b883a 	mov	r5,zero
   1421c:	0014ddc0 	call	14ddc <_set_air_valve>
				empty_pressure = 100 * pRX_Config->headsPerColor;
   14220:	008000b4 	movhi	r2,2
   14224:	10b11404 	addi	r2,r2,-15280
   14228:	10800017 	ldw	r2,0(r2)
   1422c:	10800517 	ldw	r2,20(r2)
   14230:	10801924 	muli	r2,r2,100
   14234:	e0bffb15 	stw	r2,-20(fp)
				if(empty_pressure < 400) empty_pressure = 400;
   14238:	e0bffb17 	ldw	r2,-20(fp)
   1423c:	10806408 	cmpgei	r2,r2,400
   14240:	1000021e 	bne	r2,zero,1424c <ink_tick_10ms+0x23cc>
   14244:	00806404 	movi	r2,400
   14248:	e0bffb15 	stw	r2,-20(fp)
				if(empty_pressure > 800) empty_pressure = 800;
   1424c:	e0bffb17 	ldw	r2,-20(fp)
   14250:	1080c850 	cmplti	r2,r2,801
   14254:	1000021e 	bne	r2,zero,14260 <ink_tick_10ms+0x23e0>
   14258:	0080c804 	movi	r2,800
   1425c:	e0bffb15 	stw	r2,-20(fp)
				if(pRX_Config->ink_supply[isNo].condMeniscus < -50)
   14260:	008000b4 	movhi	r2,2
   14264:	10b11404 	addi	r2,r2,-15280
   14268:	10c00017 	ldw	r3,0(r2)
   1426c:	e0bff917 	ldw	r2,-28(fp)
   14270:	10801724 	muli	r2,r2,92
   14274:	10801604 	addi	r2,r2,88
   14278:	1885883a 	add	r2,r3,r2
   1427c:	10800017 	ldw	r2,0(r2)
   14280:	10bff388 	cmpgei	r2,r2,-50
   14284:	10000a1e 	bne	r2,zero,142b0 <ink_tick_10ms+0x2430>
					_set_pressure_value(pRX_Status->air_pressure < empty_pressure);
   14288:	008000b4 	movhi	r2,2
   1428c:	10b11304 	addi	r2,r2,-15284
   14290:	10800017 	ldw	r2,0(r2)
   14294:	10c01617 	ldw	r3,88(r2)
   14298:	e0bffb17 	ldw	r2,-20(fp)
   1429c:	1884803a 	cmplt	r2,r3,r2
   142a0:	10803fcc 	andi	r2,r2,255
   142a4:	1009883a 	mov	r4,r2
   142a8:	0014f8c0 	call	14f8c <_set_pressure_value>
   142ac:	00000206 	br	142b8 <ink_tick_10ms+0x2438>
				else _set_pressure_value(FALSE);
   142b0:	0009883a 	mov	r4,zero
   142b4:	0014f8c0 	call	14f8c <_set_pressure_value>

				// minimum 20 secondes of running air pump for emptying the cylinder
				_TimeEmpty[isNo]++;
   142b8:	008000b4 	movhi	r2,2
   142bc:	10b57504 	addi	r2,r2,-10796
   142c0:	e0fff917 	ldw	r3,-28(fp)
   142c4:	18c7883a 	add	r3,r3,r3
   142c8:	18c7883a 	add	r3,r3,r3
   142cc:	10c5883a 	add	r2,r2,r3
   142d0:	10800017 	ldw	r2,0(r2)
   142d4:	11000044 	addi	r4,r2,1
   142d8:	008000b4 	movhi	r2,2
   142dc:	10b57504 	addi	r2,r2,-10796
   142e0:	e0fff917 	ldw	r3,-28(fp)
   142e4:	18c7883a 	add	r3,r3,r3
   142e8:	18c7883a 	add	r3,r3,r3
   142ec:	10c5883a 	add	r2,r2,r3
   142f0:	11000015 	stw	r4,0(r2)
				switch(_EmptyDetecTEndState[isNo])
   142f4:	008000b4 	movhi	r2,2
   142f8:	10b57904 	addi	r2,r2,-10780
   142fc:	e0fff917 	ldw	r3,-28(fp)
   14300:	18c7883a 	add	r3,r3,r3
   14304:	18c7883a 	add	r3,r3,r3
   14308:	10c5883a 	add	r2,r2,r3
   1430c:	10800017 	ldw	r2,0(r2)
   14310:	10c000a0 	cmpeqi	r3,r2,2
   14314:	18001f1e 	bne	r3,zero,14394 <ink_tick_10ms+0x2514>
   14318:	10c000e0 	cmpeqi	r3,r2,3
   1431c:	18003c1e 	bne	r3,zero,14410 <ink_tick_10ms+0x2590>
   14320:	10800060 	cmpeqi	r2,r2,1
   14324:	1000011e 	bne	r2,zero,1432c <ink_tick_10ms+0x24ac>
						if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual < _EmptyPressureStored[isNo] / 2)
							pRX_Status->ink_supply[isNo].ctrl_state = ctrl_empty_step2;
						break;
				}

				break;
   14328:	0000ad06 	br	145e0 <ink_tick_10ms+0x2760>
				// minimum 20 secondes of running air pump for emptying the cylinder
				_TimeEmpty[isNo]++;
				switch(_EmptyDetecTEndState[isNo])
				{
					case 1 :
						if(_TimeEmpty[isNo] > TIME_EMPTY) _EmptyDetecTEndState[isNo]++;
   1432c:	008000b4 	movhi	r2,2
   14330:	10b57504 	addi	r2,r2,-10796
   14334:	e0fff917 	ldw	r3,-28(fp)
   14338:	18c7883a 	add	r3,r3,r3
   1433c:	18c7883a 	add	r3,r3,r3
   14340:	10c5883a 	add	r2,r2,r3
   14344:	10800017 	ldw	r2,0(r2)
   14348:	1082ee50 	cmplti	r2,r2,3001
   1434c:	1000101e 	bne	r2,zero,14390 <ink_tick_10ms+0x2510>
   14350:	008000b4 	movhi	r2,2
   14354:	10b57904 	addi	r2,r2,-10780
   14358:	e0fff917 	ldw	r3,-28(fp)
   1435c:	18c7883a 	add	r3,r3,r3
   14360:	18c7883a 	add	r3,r3,r3
   14364:	10c5883a 	add	r2,r2,r3
   14368:	10800017 	ldw	r2,0(r2)
   1436c:	11000044 	addi	r4,r2,1
   14370:	008000b4 	movhi	r2,2
   14374:	10b57904 	addi	r2,r2,-10780
   14378:	e0fff917 	ldw	r3,-28(fp)
   1437c:	18c7883a 	add	r3,r3,r3
   14380:	18c7883a 	add	r3,r3,r3
   14384:	10c5883a 	add	r2,r2,r3
   14388:	11000015 	stw	r4,0(r2)
						break;
   1438c:	00003e06 	br	14488 <ink_tick_10ms+0x2608>
   14390:	00003d06 	br	14488 <ink_tick_10ms+0x2608>
					case 2 :
						_EmptyPressureStored[isNo] = pRX_Status->ink_supply[isNo].IS_Pressure_Actual;
   14394:	008000b4 	movhi	r2,2
   14398:	10b11304 	addi	r2,r2,-15284
   1439c:	10c00017 	ldw	r3,0(r2)
   143a0:	e0bff917 	ldw	r2,-28(fp)
   143a4:	10801b24 	muli	r2,r2,108
   143a8:	10802f04 	addi	r2,r2,188
   143ac:	1885883a 	add	r2,r3,r2
   143b0:	11000017 	ldw	r4,0(r2)
   143b4:	008000b4 	movhi	r2,2
   143b8:	10b57d04 	addi	r2,r2,-10764
   143bc:	e0fff917 	ldw	r3,-28(fp)
   143c0:	18c7883a 	add	r3,r3,r3
   143c4:	18c7883a 	add	r3,r3,r3
   143c8:	10c5883a 	add	r2,r2,r3
   143cc:	11000015 	stw	r4,0(r2)
						_EmptyDetecTEndState[isNo]++;
   143d0:	008000b4 	movhi	r2,2
   143d4:	10b57904 	addi	r2,r2,-10780
   143d8:	e0fff917 	ldw	r3,-28(fp)
   143dc:	18c7883a 	add	r3,r3,r3
   143e0:	18c7883a 	add	r3,r3,r3
   143e4:	10c5883a 	add	r2,r2,r3
   143e8:	10800017 	ldw	r2,0(r2)
   143ec:	11000044 	addi	r4,r2,1
   143f0:	008000b4 	movhi	r2,2
   143f4:	10b57904 	addi	r2,r2,-10780
   143f8:	e0fff917 	ldw	r3,-28(fp)
   143fc:	18c7883a 	add	r3,r3,r3
   14400:	18c7883a 	add	r3,r3,r3
   14404:	10c5883a 	add	r2,r2,r3
   14408:	11000015 	stw	r4,0(r2)
						break;
   1440c:	00001e06 	br	14488 <ink_tick_10ms+0x2608>
					case 3 :
						if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual < _EmptyPressureStored[isNo] / 2)
   14410:	008000b4 	movhi	r2,2
   14414:	10b11304 	addi	r2,r2,-15284
   14418:	10c00017 	ldw	r3,0(r2)
   1441c:	e0bff917 	ldw	r2,-28(fp)
   14420:	10801b24 	muli	r2,r2,108
   14424:	10802f04 	addi	r2,r2,188
   14428:	1885883a 	add	r2,r3,r2
   1442c:	11000017 	ldw	r4,0(r2)
   14430:	008000b4 	movhi	r2,2
   14434:	10b57d04 	addi	r2,r2,-10764
   14438:	e0fff917 	ldw	r3,-28(fp)
   1443c:	18c7883a 	add	r3,r3,r3
   14440:	18c7883a 	add	r3,r3,r3
   14444:	10c5883a 	add	r2,r2,r3
   14448:	10800017 	ldw	r2,0(r2)
   1444c:	1006d7fa 	srli	r3,r2,31
   14450:	1885883a 	add	r2,r3,r2
   14454:	1005d07a 	srai	r2,r2,1
   14458:	20800a0e 	bge	r4,r2,14484 <ink_tick_10ms+0x2604>
							pRX_Status->ink_supply[isNo].ctrl_state = ctrl_empty_step2;
   1445c:	008000b4 	movhi	r2,2
   14460:	10b11304 	addi	r2,r2,-15284
   14464:	10c00017 	ldw	r3,0(r2)
   14468:	e0bff917 	ldw	r2,-28(fp)
   1446c:	10801b24 	muli	r2,r2,108
   14470:	10802a04 	addi	r2,r2,168
   14474:	1885883a 	add	r2,r3,r2
   14478:	00c0c084 	movi	r3,770
   1447c:	10c00015 	stw	r3,0(r2)
						break;
   14480:	00000006 	br	14484 <ink_tick_10ms+0x2604>
   14484:	0001883a 	nop
				}

				break;
   14488:	00005506 	br	145e0 <ink_tick_10ms+0x2760>

			case ctrl_empty_step3:
				_set_pressure_value(FALSE);
   1448c:	0009883a 	mov	r4,zero
   14490:	0014f8c0 	call	14f8c <_set_pressure_value>
				pRX_Status->ink_supply[0].TestBleedLine_Pump_Phase2++;
   14494:	008000b4 	movhi	r2,2
   14498:	10b11304 	addi	r2,r2,-15284
   1449c:	10800017 	ldw	r2,0(r2)
   144a0:	10c04217 	ldw	r3,264(r2)
   144a4:	18c00044 	addi	r3,r3,1
   144a8:	10c04215 	stw	r3,264(r2)
				_set_bleed_valve(isNo, FALSE);
   144ac:	e13ff917 	ldw	r4,-28(fp)
   144b0:	000b883a 	mov	r5,zero
   144b4:	0014ed00 	call	14ed0 <_set_bleed_valve>
				_set_air_valve(isNo, FALSE);
   144b8:	e13ff917 	ldw	r4,-28(fp)
   144bc:	000b883a 	mov	r5,zero
   144c0:	0014ddc0 	call	14ddc <_set_air_valve>
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_empty_step3;
   144c4:	008000b4 	movhi	r2,2
   144c8:	10b11304 	addi	r2,r2,-15284
   144cc:	10c00017 	ldw	r3,0(r2)
   144d0:	e0bff917 	ldw	r2,-28(fp)
   144d4:	10801b24 	muli	r2,r2,108
   144d8:	10802a04 	addi	r2,r2,168
   144dc:	1885883a 	add	r2,r3,r2
   144e0:	00c0c0c4 	movi	r3,771
   144e4:	10c00015 	stw	r3,0(r2)
				break;
   144e8:	00003d06 	br	145e0 <ink_tick_10ms+0x2760>
				}
				break;
				*/

			default:
				if (pRX_Config->ink_supply[isNo].ctrl_mode>=ctrl_wipe && pRX_Config->ink_supply[isNo].ctrl_mode<ctrl_fill)
   144ec:	008000b4 	movhi	r2,2
   144f0:	10b11404 	addi	r2,r2,-15280
   144f4:	10c00017 	ldw	r3,0(r2)
   144f8:	e0bff917 	ldw	r2,-28(fp)
   144fc:	10801724 	muli	r2,r2,92
   14500:	10800904 	addi	r2,r2,36
   14504:	1885883a 	add	r2,r3,r2
   14508:	10800017 	ldw	r2,0(r2)
   1450c:	10804830 	cmpltui	r2,r2,288
   14510:	1000211e 	bne	r2,zero,14598 <ink_tick_10ms+0x2718>
   14514:	008000b4 	movhi	r2,2
   14518:	10b11404 	addi	r2,r2,-15280
   1451c:	10c00017 	ldw	r3,0(r2)
   14520:	e0bff917 	ldw	r2,-28(fp)
   14524:	10801724 	muli	r2,r2,92
   14528:	10800904 	addi	r2,r2,36
   1452c:	1885883a 	add	r2,r3,r2
   14530:	10800017 	ldw	r2,0(r2)
   14534:	10808028 	cmpgeui	r2,r2,512
   14538:	1000171e 	bne	r2,zero,14598 <ink_tick_10ms+0x2718>
				{
					_set_air_valve(isNo, TRUE);
   1453c:	e13ff917 	ldw	r4,-28(fp)
   14540:	01400044 	movi	r5,1
   14544:	0014ddc0 	call	14ddc <_set_air_valve>
					_set_pump_speed(isNo, 0);
   14548:	e13ff917 	ldw	r4,-28(fp)
   1454c:	000b883a 	mov	r5,zero
   14550:	00157c80 	call	157c8 <_set_pump_speed>
					pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   14554:	008000b4 	movhi	r2,2
   14558:	10b11304 	addi	r2,r2,-15284
   1455c:	11000017 	ldw	r4,0(r2)
   14560:	008000b4 	movhi	r2,2
   14564:	10b11404 	addi	r2,r2,-15280
   14568:	10c00017 	ldw	r3,0(r2)
   1456c:	e0bff917 	ldw	r2,-28(fp)
   14570:	10801724 	muli	r2,r2,92
   14574:	10800904 	addi	r2,r2,36
   14578:	1885883a 	add	r2,r3,r2
   1457c:	10c00017 	ldw	r3,0(r2)
   14580:	e0bff917 	ldw	r2,-28(fp)
   14584:	10801b24 	muli	r2,r2,108
   14588:	10802a04 	addi	r2,r2,168
   1458c:	2085883a 	add	r2,r4,r2
   14590:	10c00015 	stw	r3,0(r2)
					_set_flush_pump(isNo, FALSE);
					_set_air_valve(isNo, FALSE);
					_set_pump_speed(isNo, 0);
					_InkSupply[isNo].degassing=FALSE;
				}
				break;
   14594:	00001206 	br	145e0 <ink_tick_10ms+0x2760>
					_set_pump_speed(isNo, 0);
					pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
				}
				else
				{
					_set_flush_pump(isNo, FALSE);
   14598:	e13ff917 	ldw	r4,-28(fp)
   1459c:	000b883a 	mov	r5,zero
   145a0:	00159340 	call	15934 <_set_flush_pump>
					_set_air_valve(isNo, FALSE);
   145a4:	e13ff917 	ldw	r4,-28(fp)
   145a8:	000b883a 	mov	r5,zero
   145ac:	0014ddc0 	call	14ddc <_set_air_valve>
					_set_pump_speed(isNo, 0);
   145b0:	e13ff917 	ldw	r4,-28(fp)
   145b4:	000b883a 	mov	r5,zero
   145b8:	00157c80 	call	157c8 <_set_pump_speed>
					_InkSupply[isNo].degassing=FALSE;
   145bc:	008000b4 	movhi	r2,2
   145c0:	10b4d904 	addi	r2,r2,-11420
   145c4:	e0fff917 	ldw	r3,-28(fp)
   145c8:	18c01f24 	muli	r3,r3,124
   145cc:	18c01a04 	addi	r3,r3,104
   145d0:	10c5883a 	add	r2,r2,r3
   145d4:	10000015 	stw	zero,0(r2)
				}
				break;
   145d8:	00000106 	br	145e0 <ink_tick_10ms+0x2760>
				_pump_ctrl(isNo, pRX_Status->ink_supply[isNo].cylinderPresSet, PUMP_CTRL_MODE_DEFAULT);
				pRX_Status->ink_supply[isNo].ctrl_state = ctrl_warmup;
				break;

			case ctrl_readyToPrint:
				break;
   145dc:	0001883a 	nop
				pRX_Status->ink_supply[isNo].error |= err_overpressure;
			}
		}
	}

	for(isNo = 0 ; isNo < NIOS_INK_SUPPLY_CNT ; isNo++)
   145e0:	e0bff917 	ldw	r2,-28(fp)
   145e4:	10800044 	addi	r2,r2,1
   145e8:	e0bff915 	stw	r2,-28(fp)
   145ec:	e0bff917 	ldw	r2,-28(fp)
   145f0:	10800110 	cmplti	r2,r2,4
   145f4:	1037551e 	bne	r2,zero,1234c <__alt_mem_onchip_memory_nios_arm+0xfffc234c>
				break;
		} // end switch
	} // end for

	//--- control air-system -----------------
	if (pRX_Status->air_pressure_solenoid)
   145f8:	008000b4 	movhi	r2,2
   145fc:	10b11304 	addi	r2,r2,-15284
   14600:	10800017 	ldw	r2,0(r2)
   14604:	10800d17 	ldw	r2,52(r2)
   14608:	1080008c 	andi	r2,r2,2
   1460c:	10000426 	beq	r2,zero,14620 <ink_tick_10ms+0x27a0>
		_AirPressureTime+=cycleTime;
   14610:	d0e4d617 	ldw	r3,-27816(gp)
   14614:	e0bffe17 	ldw	r2,-8(fp)
   14618:	1885883a 	add	r2,r3,r2
   1461c:	d0a4d615 	stw	r2,-27816(gp)

	if (_degass_ctrl() || pRX_Status->air_pressure_solenoid || _PressureTimer>0)
   14620:	0014b500 	call	14b50 <_degass_ctrl>
   14624:	1000081e 	bne	r2,zero,14648 <ink_tick_10ms+0x27c8>
   14628:	008000b4 	movhi	r2,2
   1462c:	10b11304 	addi	r2,r2,-15284
   14630:	10800017 	ldw	r2,0(r2)
   14634:	10800d17 	ldw	r2,52(r2)
   14638:	1080008c 	andi	r2,r2,2
   1463c:	1000021e 	bne	r2,zero,14648 <ink_tick_10ms+0x27c8>
   14640:	d0a4d317 	ldw	r2,-27828(gp)
   14644:	0080230e 	bge	zero,r2,146d4 <ink_tick_10ms+0x2854>
	{
		trprintf("AIR PUMP %d %d %d %d\n", pRX_Status->air_pump, _degass_ctrl(), pRX_Status->air_pressure_solenoid , _PressureTimer);
   14648:	008000b4 	movhi	r2,2
   1464c:	10b11304 	addi	r2,r2,-15284
   14650:	10800017 	ldw	r2,0(r2)
   14654:	10800d17 	ldw	r2,52(r2)
   14658:	1004d0fa 	srli	r2,r2,3
   1465c:	1080004c 	andi	r2,r2,1
   14660:	14003fcc 	andi	r16,r2,255
   14664:	0014b500 	call	14b50 <_degass_ctrl>
   14668:	100d883a 	mov	r6,r2
   1466c:	008000b4 	movhi	r2,2
   14670:	10b11304 	addi	r2,r2,-15284
   14674:	10800017 	ldw	r2,0(r2)
   14678:	10800d17 	ldw	r2,52(r2)
   1467c:	1004d07a 	srli	r2,r2,1
   14680:	1080004c 	andi	r2,r2,1
   14684:	10c03fcc 	andi	r3,r2,255
   14688:	d0a4d317 	ldw	r2,-27828(gp)
   1468c:	d8800015 	stw	r2,0(sp)
   14690:	010000b4 	movhi	r4,2
   14694:	2126d604 	addi	r4,r4,-25768
   14698:	800b883a 	mov	r5,r16
   1469c:	180f883a 	mov	r7,r3
   146a0:	00177dc0 	call	177dc <trprintf>

		if (_PressureTimer>0 && (_PressureTimer-=cycleTime)<0)
   146a4:	d0a4d317 	ldw	r2,-27828(gp)
   146a8:	0080070e 	bge	zero,r2,146c8 <ink_tick_10ms+0x2848>
   146ac:	d0e4d317 	ldw	r3,-27828(gp)
   146b0:	e0bffe17 	ldw	r2,-8(fp)
   146b4:	1885c83a 	sub	r2,r3,r2
   146b8:	d0a4d315 	stw	r2,-27828(gp)
   146bc:	d0a4d317 	ldw	r2,-27828(gp)
   146c0:	1000010e 	bge	r2,zero,146c8 <ink_tick_10ms+0x2848>
			_PressureTimer=0;
   146c4:	d024d315 	stw	zero,-27828(gp)

		_set_air_pump(TRUE);
   146c8:	01000044 	movi	r4,1
   146cc:	0015b6c0 	call	15b6c <_set_air_pump>
   146d0:	00000206 	br	146dc <ink_tick_10ms+0x285c>
	}
	else
	{
		_set_air_pump(FALSE);
   146d4:	0009883a 	mov	r4,zero
   146d8:	0015b6c0 	call	15b6c <_set_air_pump>
	}

	// Update the IS Solenoids
	IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, GPIO_REG_OUT, _ValveOut);
   146dc:	d0e4d417 	ldw	r3,-27824(gp)
   146e0:	008000b4 	movhi	r2,2
   146e4:	10840504 	addi	r2,r2,4116
   146e8:	10c0002d 	sthio	r3,0(r2)
}
   146ec:	e6ffff04 	addi	sp,fp,-4
   146f0:	dfc00217 	ldw	ra,8(sp)
   146f4:	df000117 	ldw	fp,4(sp)
   146f8:	dc000017 	ldw	r16,0(sp)
   146fc:	dec00304 	addi	sp,sp,12
   14700:	f800283a 	ret

00014704 <ink_tick_1000ms>:

//--- ink_tick_1000ms ------------------------------------------------------
#define PRINTF  for(i=0; i<NIOS_INK_SUPPLY_CNT; i++) trprintf
void ink_tick_1000ms(void)
{
   14704:	defff904 	addi	sp,sp,-28
   14708:	dfc00615 	stw	ra,24(sp)
   1470c:	df000515 	stw	fp,20(sp)
   14710:	dc000415 	stw	r16,16(sp)
   14714:	df000504 	addi	fp,sp,20
	int isNo;

	if (tr_debug_on())
   14718:	00177bc0 	call	177bc <tr_debug_on>
   1471c:	10001d26 	beq	r2,zero,14794 <ink_tick_1000ms+0x90>
	{
		int i;
		trprintf("\n-------------------------------------------------------------------------------------\n");
   14720:	010000b4 	movhi	r4,2
   14724:	2126dc04 	addi	r4,r4,-25744
   14728:	00177dc0 	call	177dc <trprintf>
		trprintf("ink pressure  :"); PRINTF("  %6d ", pRX_Status->ink_supply[i].IS_Pressure_Actual); trprintf("\n");
   1472c:	010000b4 	movhi	r4,2
   14730:	2126f204 	addi	r4,r4,-25656
   14734:	00177dc0 	call	177dc <trprintf>
   14738:	e03ffc15 	stw	zero,-16(fp)
   1473c:	00000f06 	br	1477c <ink_tick_1000ms+0x78>
   14740:	008000b4 	movhi	r2,2
   14744:	10b11304 	addi	r2,r2,-15284
   14748:	10c00017 	ldw	r3,0(r2)
   1474c:	e0bffc17 	ldw	r2,-16(fp)
   14750:	10801b24 	muli	r2,r2,108
   14754:	10802f04 	addi	r2,r2,188
   14758:	1885883a 	add	r2,r3,r2
   1475c:	10800017 	ldw	r2,0(r2)
   14760:	010000b4 	movhi	r4,2
   14764:	2126f604 	addi	r4,r4,-25640
   14768:	100b883a 	mov	r5,r2
   1476c:	00177dc0 	call	177dc <trprintf>
   14770:	e0bffc17 	ldw	r2,-16(fp)
   14774:	10800044 	addi	r2,r2,1
   14778:	e0bffc15 	stw	r2,-16(fp)
   1477c:	e0bffc17 	ldw	r2,-16(fp)
   14780:	10800110 	cmplti	r2,r2,4
   14784:	103fee1e 	bne	r2,zero,14740 <__alt_mem_onchip_memory_nios_arm+0xfffc4740>
   14788:	010000b4 	movhi	r4,2
   1478c:	2126f804 	addi	r4,r4,-25632
   14790:	00177dc0 	call	177dc <trprintf>
		trprintf("purge time: %d, pressure: %d\n", _PurgeTime, _PurgePressure);
	}
	*/

	/* pump volume calculation */
	for (isNo = 0; isNo < NIOS_INK_SUPPLY_CNT; isNo++)
   14794:	e03ffb15 	stw	zero,-20(fp)
   14798:	00004406 	br	148ac <ink_tick_1000ms+0x1a8>
		 * measured every second
		 *
		 * \f$ \frac{diff Imp \times 1s \times 600ml} {6Imp \times 60s} \f$
		 */

		UINT32 ticks = _get_pump_ticks(isNo);
   1479c:	e13ffb17 	ldw	r4,-20(fp)
   147a0:	00158f40 	call	158f4 <_get_pump_ticks>
   147a4:	e0bffd15 	stw	r2,-12(fp)
		INT32 volume = (ticks - _LastPumpTicks[isNo]) * 94 / 10; // [ul/s]
   147a8:	008000b4 	movhi	r2,2
   147ac:	10b56504 	addi	r2,r2,-10860
   147b0:	e0fffb17 	ldw	r3,-20(fp)
   147b4:	18c7883a 	add	r3,r3,r3
   147b8:	18c7883a 	add	r3,r3,r3
   147bc:	10c5883a 	add	r2,r2,r3
   147c0:	10800017 	ldw	r2,0(r2)
   147c4:	e0fffd17 	ldw	r3,-12(fp)
   147c8:	1885c83a 	sub	r2,r3,r2
   147cc:	108017a4 	muli	r2,r2,94
   147d0:	1009883a 	mov	r4,r2
   147d4:	01400284 	movi	r5,10
   147d8:	00180e80 	call	180e8 <__udivsi3>
   147dc:	e0bffe15 	stw	r2,-8(fp)

		pRX_Status->ink_supply[isNo].inkPumpSpeed_measured = volume * 60 / 1000; // [ml/min]
   147e0:	008000b4 	movhi	r2,2
   147e4:	10b11304 	addi	r2,r2,-15284
   147e8:	14000017 	ldw	r16,0(r2)
   147ec:	e0bffe17 	ldw	r2,-8(fp)
   147f0:	10800f24 	muli	r2,r2,60
   147f4:	1009883a 	mov	r4,r2
   147f8:	0140fa04 	movi	r5,1000
   147fc:	00180380 	call	18038 <__divsi3>
   14800:	1007883a 	mov	r3,r2
   14804:	e0bffb17 	ldw	r2,-20(fp)
   14808:	10801b24 	muli	r2,r2,108
   1480c:	10802d04 	addi	r2,r2,180
   14810:	8085883a 	add	r2,r16,r2
   14814:	10c00015 	stw	r3,0(r2)
		trprintf("%d) %u - %u = %u -> V = %d ul/s = %d ml/min (%d%)\n", isNo, ticks, _LastPumpTicks[isNo],
				diff, volume, volume * 60 / 1000,
				pRX_Status->ink_supply[isNo].inkPumpSpeed_set);
#endif

		_LastPumpTicks[isNo] = ticks;
   14818:	008000b4 	movhi	r2,2
   1481c:	10b56504 	addi	r2,r2,-10860
   14820:	e0fffb17 	ldw	r3,-20(fp)
   14824:	18c7883a 	add	r3,r3,r3
   14828:	18c7883a 	add	r3,r3,r3
   1482c:	10c5883a 	add	r2,r2,r3
   14830:	e0fffd17 	ldw	r3,-12(fp)
   14834:	10c00015 	stw	r3,0(r2)
		pRX_Status->ink_supply[isNo].inkPumpSpeed_set = _PumpSpeed1000[isNo]/100;
   14838:	008000b4 	movhi	r2,2
   1483c:	10b11304 	addi	r2,r2,-15284
   14840:	14000017 	ldw	r16,0(r2)
   14844:	008000b4 	movhi	r2,2
   14848:	10b56904 	addi	r2,r2,-10844
   1484c:	e0fffb17 	ldw	r3,-20(fp)
   14850:	18c7883a 	add	r3,r3,r3
   14854:	18c7883a 	add	r3,r3,r3
   14858:	10c5883a 	add	r2,r2,r3
   1485c:	10800017 	ldw	r2,0(r2)
   14860:	1009883a 	mov	r4,r2
   14864:	01401904 	movi	r5,100
   14868:	00180e80 	call	180e8 <__udivsi3>
   1486c:	1007883a 	mov	r3,r2
   14870:	e0bffb17 	ldw	r2,-20(fp)
   14874:	10801b24 	muli	r2,r2,108
   14878:	10802c04 	addi	r2,r2,176
   1487c:	8085883a 	add	r2,r16,r2
   14880:	10c00015 	stw	r3,0(r2)
		_PumpSpeed1000[isNo] = 0;
   14884:	008000b4 	movhi	r2,2
   14888:	10b56904 	addi	r2,r2,-10844
   1488c:	e0fffb17 	ldw	r3,-20(fp)
   14890:	18c7883a 	add	r3,r3,r3
   14894:	18c7883a 	add	r3,r3,r3
   14898:	10c5883a 	add	r2,r2,r3
   1489c:	10000015 	stw	zero,0(r2)
		trprintf("purge time: %d, pressure: %d\n", _PurgeTime, _PurgePressure);
	}
	*/

	/* pump volume calculation */
	for (isNo = 0; isNo < NIOS_INK_SUPPLY_CNT; isNo++)
   148a0:	e0bffb17 	ldw	r2,-20(fp)
   148a4:	10800044 	addi	r2,r2,1
   148a8:	e0bffb15 	stw	r2,-20(fp)
   148ac:	e0bffb17 	ldw	r2,-20(fp)
   148b0:	10800110 	cmplti	r2,r2,4
   148b4:	103fb91e 	bne	r2,zero,1479c <__alt_mem_onchip_memory_nios_arm+0xfffc479c>

		_LastPumpTicks[isNo] = ticks;
		pRX_Status->ink_supply[isNo].inkPumpSpeed_set = _PumpSpeed1000[isNo]/100;
		_PumpSpeed1000[isNo] = 0;
	}
	pRX_Status->airPressureTime = _AirPressureTime;
   148b8:	008000b4 	movhi	r2,2
   148bc:	10b11304 	addi	r2,r2,-15284
   148c0:	10800017 	ldw	r2,0(r2)
   148c4:	d0e4d617 	ldw	r3,-27816(gp)
   148c8:	10c00e15 	stw	r3,56(r2)
	_AirPressureTime = 0;
   148cc:	d024d615 	stw	zero,-27816(gp)
}
   148d0:	e6ffff04 	addi	sp,fp,-4
   148d4:	dfc00217 	ldw	ra,8(sp)
   148d8:	df000117 	ldw	fp,4(sp)
   148dc:	dc000017 	ldw	r16,0(sp)
   148e0:	dec00304 	addi	sp,sp,12
   148e4:	f800283a 	ret

000148e8 <_init_purge>:

//--- _init_purge ---------------------------------------------
static void _init_purge(int isNo, int pressure)
{
   148e8:	defffc04 	addi	sp,sp,-16
   148ec:	dfc00315 	stw	ra,12(sp)
   148f0:	df000215 	stw	fp,8(sp)
   148f4:	df000204 	addi	fp,sp,8
   148f8:	e13ffe15 	stw	r4,-8(fp)
   148fc:	e17fff15 	stw	r5,-4(fp)
	if (_InkSupply[isNo].purgePressure==0)
   14900:	008000b4 	movhi	r2,2
   14904:	10b4d904 	addi	r2,r2,-11420
   14908:	e0fffe17 	ldw	r3,-8(fp)
   1490c:	18c01f24 	muli	r3,r3,124
   14910:	18c01d04 	addi	r3,r3,116
   14914:	10c5883a 	add	r2,r2,r3
   14918:	10800017 	ldw	r2,0(r2)
   1491c:	1000771e 	bne	r2,zero,14afc <_init_purge+0x214>
	{
		_InkSupply[isNo].degassing=FALSE;
   14920:	008000b4 	movhi	r2,2
   14924:	10b4d904 	addi	r2,r2,-11420
   14928:	e0fffe17 	ldw	r3,-8(fp)
   1492c:	18c01f24 	muli	r3,r3,124
   14930:	18c01a04 	addi	r3,r3,104
   14934:	10c5883a 	add	r2,r2,r3
   14938:	10000015 	stw	zero,0(r2)
		_set_air_valve(isNo, FALSE);
   1493c:	e13ffe17 	ldw	r4,-8(fp)
   14940:	000b883a 	mov	r5,zero
   14944:	0014ddc0 	call	14ddc <_set_air_valve>
		_set_bleed_valve(isNo, FALSE);
   14948:	e13ffe17 	ldw	r4,-8(fp)
   1494c:	000b883a 	mov	r5,zero
   14950:	0014ed00 	call	14ed0 <_set_bleed_valve>

	//	_PurgeNo	   = isNo;
		if(_MaxPrintPressure[isNo] > 0)
   14954:	008000b4 	movhi	r2,2
   14958:	10b56104 	addi	r2,r2,-10876
   1495c:	e0fffe17 	ldw	r3,-8(fp)
   14960:	18c7883a 	add	r3,r3,r3
   14964:	18c7883a 	add	r3,r3,r3
   14968:	10c5883a 	add	r2,r2,r3
   1496c:	10800017 	ldw	r2,0(r2)
   14970:	0080220e 	bge	zero,r2,149fc <_init_purge+0x114>
		{
			_InkSupply[isNo].purgePressure = _MaxPrintPressure[isNo] + pressure;
   14974:	008000b4 	movhi	r2,2
   14978:	10b56104 	addi	r2,r2,-10876
   1497c:	e0fffe17 	ldw	r3,-8(fp)
   14980:	18c7883a 	add	r3,r3,r3
   14984:	18c7883a 	add	r3,r3,r3
   14988:	10c5883a 	add	r2,r2,r3
   1498c:	10c00017 	ldw	r3,0(r2)
   14990:	e0bfff17 	ldw	r2,-4(fp)
   14994:	1887883a 	add	r3,r3,r2
   14998:	008000b4 	movhi	r2,2
   1499c:	10b4d904 	addi	r2,r2,-11420
   149a0:	e13ffe17 	ldw	r4,-8(fp)
   149a4:	21001f24 	muli	r4,r4,124
   149a8:	21001d04 	addi	r4,r4,116
   149ac:	1105883a 	add	r2,r2,r4
   149b0:	10c00015 	stw	r3,0(r2)
			if(_InkSupply[isNo].purgePressure > 800) _InkSupply[isNo].purgePressure = 800;
   149b4:	008000b4 	movhi	r2,2
   149b8:	10b4d904 	addi	r2,r2,-11420
   149bc:	e0fffe17 	ldw	r3,-8(fp)
   149c0:	18c01f24 	muli	r3,r3,124
   149c4:	18c01d04 	addi	r3,r3,116
   149c8:	10c5883a 	add	r2,r2,r3
   149cc:	10800017 	ldw	r2,0(r2)
   149d0:	1080c850 	cmplti	r2,r2,801
   149d4:	1000291e 	bne	r2,zero,14a7c <_init_purge+0x194>
   149d8:	008000b4 	movhi	r2,2
   149dc:	10b4d904 	addi	r2,r2,-11420
   149e0:	e0fffe17 	ldw	r3,-8(fp)
   149e4:	18c01f24 	muli	r3,r3,124
   149e8:	18c01d04 	addi	r3,r3,116
   149ec:	10c5883a 	add	r2,r2,r3
   149f0:	00c0c804 	movi	r3,800
   149f4:	10c00015 	stw	r3,0(r2)
   149f8:	00002006 	br	14a7c <_init_purge+0x194>
		}
		else
		{
			switch(pRX_Config->printerType)
   149fc:	008000b4 	movhi	r2,2
   14a00:	10b11404 	addi	r2,r2,-15280
   14a04:	10800017 	ldw	r2,0(r2)
   14a08:	10800717 	ldw	r2,28(r2)
   14a0c:	1081f420 	cmpeqi	r2,r2,2000
   14a10:	10000a26 	beq	r2,zero,14a3c <_init_purge+0x154>
			{
				case printer_TX801 : _InkSupply[isNo].purgePressure = 200 + pressure; break;
   14a14:	e0bfff17 	ldw	r2,-4(fp)
   14a18:	10c03204 	addi	r3,r2,200
   14a1c:	008000b4 	movhi	r2,2
   14a20:	10b4d904 	addi	r2,r2,-11420
   14a24:	e13ffe17 	ldw	r4,-8(fp)
   14a28:	21001f24 	muli	r4,r4,124
   14a2c:	21001d04 	addi	r4,r4,116
   14a30:	1105883a 	add	r2,r2,r4
   14a34:	10c00015 	stw	r3,0(r2)
   14a38:	00001006 	br	14a7c <_init_purge+0x194>
				default : _InkSupply[isNo].purgePressure = 40 * pRX_Config->headsPerColor + pressure; break;
   14a3c:	008000b4 	movhi	r2,2
   14a40:	10b11404 	addi	r2,r2,-15280
   14a44:	10800017 	ldw	r2,0(r2)
   14a48:	10800517 	ldw	r2,20(r2)
   14a4c:	10c00a24 	muli	r3,r2,40
   14a50:	e0bfff17 	ldw	r2,-4(fp)
   14a54:	1885883a 	add	r2,r3,r2
   14a58:	1009883a 	mov	r4,r2
   14a5c:	008000b4 	movhi	r2,2
   14a60:	10b4d904 	addi	r2,r2,-11420
   14a64:	e0fffe17 	ldw	r3,-8(fp)
   14a68:	18c01f24 	muli	r3,r3,124
   14a6c:	18c01d04 	addi	r3,r3,116
   14a70:	10c5883a 	add	r2,r2,r3
   14a74:	11000015 	stw	r4,0(r2)
   14a78:	0001883a 	nop
			}
		}

		if (_InkSupply[isNo].purgePressure > MAX_PRESSURE_FLUID)
   14a7c:	008000b4 	movhi	r2,2
   14a80:	10b4d904 	addi	r2,r2,-11420
   14a84:	e0fffe17 	ldw	r3,-8(fp)
   14a88:	18c01f24 	muli	r3,r3,124
   14a8c:	18c01d04 	addi	r3,r3,116
   14a90:	10c5883a 	add	r2,r2,r3
   14a94:	10800017 	ldw	r2,0(r2)
   14a98:	10812c50 	cmplti	r2,r2,1201
   14a9c:	1000081e 	bne	r2,zero,14ac0 <_init_purge+0x1d8>
			_InkSupply[isNo].purgePressure = MAX_PRESSURE_FLUID;
   14aa0:	008000b4 	movhi	r2,2
   14aa4:	10b4d904 	addi	r2,r2,-11420
   14aa8:	e0fffe17 	ldw	r3,-8(fp)
   14aac:	18c01f24 	muli	r3,r3,124
   14ab0:	18c01d04 	addi	r3,r3,116
   14ab4:	10c5883a 	add	r2,r2,r3
   14ab8:	00c12c04 	movi	r3,1200
   14abc:	10c00015 	stw	r3,0(r2)

		pRX_Status->ink_supply[isNo].IS_Pressure_Setpoint 	=  _InkSupply[isNo].purgePressure;
   14ac0:	008000b4 	movhi	r2,2
   14ac4:	10b11304 	addi	r2,r2,-15284
   14ac8:	11000017 	ldw	r4,0(r2)
   14acc:	008000b4 	movhi	r2,2
   14ad0:	10b4d904 	addi	r2,r2,-11420
   14ad4:	e0fffe17 	ldw	r3,-8(fp)
   14ad8:	18c01f24 	muli	r3,r3,124
   14adc:	18c01d04 	addi	r3,r3,116
   14ae0:	10c5883a 	add	r2,r2,r3
   14ae4:	10c00017 	ldw	r3,0(r2)
   14ae8:	e0bffe17 	ldw	r2,-8(fp)
   14aec:	10801b24 	muli	r2,r2,108
   14af0:	10803004 	addi	r2,r2,192
   14af4:	2085883a 	add	r2,r4,r2
   14af8:	10c00015 	stw	r3,0(r2)
	}
	pRX_Status->ink_supply[isNo].ctrl_state = pRX_Config->ink_supply[isNo].ctrl_mode;
   14afc:	008000b4 	movhi	r2,2
   14b00:	10b11304 	addi	r2,r2,-15284
   14b04:	11000017 	ldw	r4,0(r2)
   14b08:	008000b4 	movhi	r2,2
   14b0c:	10b11404 	addi	r2,r2,-15280
   14b10:	10c00017 	ldw	r3,0(r2)
   14b14:	e0bffe17 	ldw	r2,-8(fp)
   14b18:	10801724 	muli	r2,r2,92
   14b1c:	10800904 	addi	r2,r2,36
   14b20:	1885883a 	add	r2,r3,r2
   14b24:	10c00017 	ldw	r3,0(r2)
   14b28:	e0bffe17 	ldw	r2,-8(fp)
   14b2c:	10801b24 	muli	r2,r2,108
   14b30:	10802a04 	addi	r2,r2,168
   14b34:	2085883a 	add	r2,r4,r2
   14b38:	10c00015 	stw	r3,0(r2)
}
   14b3c:	e037883a 	mov	sp,fp
   14b40:	dfc00117 	ldw	ra,4(sp)
   14b44:	df000017 	ldw	fp,0(sp)
   14b48:	dec00204 	addi	sp,sp,8
   14b4c:	f800283a 	ret

00014b50 <_degass_ctrl>:

//--- _degass_ctrl ---------------------
static int _degass_ctrl(void)
{
   14b50:	defffc04 	addi	sp,sp,-16
   14b54:	df000315 	stw	fp,12(sp)
   14b58:	df000304 	addi	fp,sp,12
	int isNo;
	int degassing=FALSE;
   14b5c:	e03ffe15 	stw	zero,-8(fp)
	int act=pRX_Status->vacuum_solenoid;
   14b60:	008000b4 	movhi	r2,2
   14b64:	10b11304 	addi	r2,r2,-15284
   14b68:	10800017 	ldw	r2,0(r2)
   14b6c:	10800d17 	ldw	r2,52(r2)
   14b70:	1080004c 	andi	r2,r2,1
   14b74:	10803fcc 	andi	r2,r2,255
   14b78:	e0bfff15 	stw	r2,-4(fp)

	for (isNo=0; isNo<NIOS_INK_SUPPLY_CNT; isNo++)
   14b7c:	e03ffd15 	stw	zero,-12(fp)
   14b80:	00000d06 	br	14bb8 <_degass_ctrl+0x68>
	{
		if (_InkSupply[isNo].degassing) degassing=TRUE;
   14b84:	008000b4 	movhi	r2,2
   14b88:	10b4d904 	addi	r2,r2,-11420
   14b8c:	e0fffd17 	ldw	r3,-12(fp)
   14b90:	18c01f24 	muli	r3,r3,124
   14b94:	18c01a04 	addi	r3,r3,104
   14b98:	10c5883a 	add	r2,r2,r3
   14b9c:	10800017 	ldw	r2,0(r2)
   14ba0:	10000226 	beq	r2,zero,14bac <_degass_ctrl+0x5c>
   14ba4:	00800044 	movi	r2,1
   14ba8:	e0bffe15 	stw	r2,-8(fp)
{
	int isNo;
	int degassing=FALSE;
	int act=pRX_Status->vacuum_solenoid;

	for (isNo=0; isNo<NIOS_INK_SUPPLY_CNT; isNo++)
   14bac:	e0bffd17 	ldw	r2,-12(fp)
   14bb0:	10800044 	addi	r2,r2,1
   14bb4:	e0bffd15 	stw	r2,-12(fp)
   14bb8:	e0bffd17 	ldw	r2,-12(fp)
   14bbc:	10800110 	cmplti	r2,r2,4
   14bc0:	103ff01e 	bne	r2,zero,14b84 <__alt_mem_onchip_memory_nios_arm+0xfffc4b84>
	{
		if (_InkSupply[isNo].degassing) degassing=TRUE;
	}

	if (pRX_Config->test_lungPressure)
   14bc4:	008000b4 	movhi	r2,2
   14bc8:	10b11404 	addi	r2,r2,-15280
   14bcc:	10800017 	ldw	r2,0(r2)
   14bd0:	10800617 	ldw	r2,24(r2)
   14bd4:	10003426 	beq	r2,zero,14ca8 <_degass_ctrl+0x158>
	{
		if (pRX_Status->degass_pressure==INVALID_VALUE) pRX_Status->vacuum_solenoid = FALSE;
   14bd8:	008000b4 	movhi	r2,2
   14bdc:	10b11304 	addi	r2,r2,-15284
   14be0:	10800017 	ldw	r2,0(r2)
   14be4:	10c01217 	ldw	r3,72(r2)
   14be8:	009555b4 	movhi	r2,21846
   14bec:	10aaaa84 	addi	r2,r2,-21846
   14bf0:	1880081e 	bne	r3,r2,14c14 <_degass_ctrl+0xc4>
   14bf4:	008000b4 	movhi	r2,2
   14bf8:	10b11304 	addi	r2,r2,-15284
   14bfc:	10800017 	ldw	r2,0(r2)
   14c00:	11000d03 	ldbu	r4,52(r2)
   14c04:	00ffff84 	movi	r3,-2
   14c08:	20c6703a 	and	r3,r4,r3
   14c0c:	10c00d05 	stb	r3,52(r2)
   14c10:	00005306 	br	14d60 <_degass_ctrl+0x210>
		else if ((-pRX_Status->degass_pressure) >= pRX_Config->test_lungPressure+25) pRX_Status->vacuum_solenoid = FALSE;
   14c14:	008000b4 	movhi	r2,2
   14c18:	10b11304 	addi	r2,r2,-15284
   14c1c:	10800017 	ldw	r2,0(r2)
   14c20:	10801217 	ldw	r2,72(r2)
   14c24:	0087c83a 	sub	r3,zero,r2
   14c28:	008000b4 	movhi	r2,2
   14c2c:	10b11404 	addi	r2,r2,-15280
   14c30:	10800017 	ldw	r2,0(r2)
   14c34:	10800617 	ldw	r2,24(r2)
   14c38:	10800644 	addi	r2,r2,25
   14c3c:	18800816 	blt	r3,r2,14c60 <_degass_ctrl+0x110>
   14c40:	008000b4 	movhi	r2,2
   14c44:	10b11304 	addi	r2,r2,-15284
   14c48:	10800017 	ldw	r2,0(r2)
   14c4c:	11000d03 	ldbu	r4,52(r2)
   14c50:	00ffff84 	movi	r3,-2
   14c54:	20c6703a 	and	r3,r4,r3
   14c58:	10c00d05 	stb	r3,52(r2)
   14c5c:	00004006 	br	14d60 <_degass_ctrl+0x210>
		else if ((-pRX_Status->degass_pressure) <  pRX_Config->test_lungPressure-25) pRX_Status->vacuum_solenoid = TRUE;
   14c60:	008000b4 	movhi	r2,2
   14c64:	10b11304 	addi	r2,r2,-15284
   14c68:	10800017 	ldw	r2,0(r2)
   14c6c:	10801217 	ldw	r2,72(r2)
   14c70:	0087c83a 	sub	r3,zero,r2
   14c74:	008000b4 	movhi	r2,2
   14c78:	10b11404 	addi	r2,r2,-15280
   14c7c:	10800017 	ldw	r2,0(r2)
   14c80:	10800617 	ldw	r2,24(r2)
   14c84:	10bff9c4 	addi	r2,r2,-25
   14c88:	1880350e 	bge	r3,r2,14d60 <_degass_ctrl+0x210>
   14c8c:	008000b4 	movhi	r2,2
   14c90:	10b11304 	addi	r2,r2,-15284
   14c94:	10800017 	ldw	r2,0(r2)
   14c98:	10c00d03 	ldbu	r3,52(r2)
   14c9c:	18c00054 	ori	r3,r3,1
   14ca0:	10c00d05 	stb	r3,52(r2)
   14ca4:	00002e06 	br	14d60 <_degass_ctrl+0x210>
	}
	else
	{
		if (!degassing || pRX_Status->degass_pressure==INVALID_VALUE) 	  pRX_Status->vacuum_solenoid = FALSE;
   14ca8:	e0bffe17 	ldw	r2,-8(fp)
   14cac:	10000726 	beq	r2,zero,14ccc <_degass_ctrl+0x17c>
   14cb0:	008000b4 	movhi	r2,2
   14cb4:	10b11304 	addi	r2,r2,-15284
   14cb8:	10800017 	ldw	r2,0(r2)
   14cbc:	10c01217 	ldw	r3,72(r2)
   14cc0:	009555b4 	movhi	r2,21846
   14cc4:	10aaaa84 	addi	r2,r2,-21846
   14cc8:	1880081e 	bne	r3,r2,14cec <_degass_ctrl+0x19c>
   14ccc:	008000b4 	movhi	r2,2
   14cd0:	10b11304 	addi	r2,r2,-15284
   14cd4:	10800017 	ldw	r2,0(r2)
   14cd8:	11000d03 	ldbu	r4,52(r2)
   14cdc:	00ffff84 	movi	r3,-2
   14ce0:	20c6703a 	and	r3,r4,r3
   14ce4:	10c00d05 	stb	r3,52(r2)
   14ce8:	00001d06 	br	14d60 <_degass_ctrl+0x210>
		else if ((-pRX_Status->degass_pressure) >= _LungVacc) 	  pRX_Status->vacuum_solenoid = FALSE;
   14cec:	008000b4 	movhi	r2,2
   14cf0:	10b11304 	addi	r2,r2,-15284
   14cf4:	10800017 	ldw	r2,0(r2)
   14cf8:	10801217 	ldw	r2,72(r2)
   14cfc:	0087c83a 	sub	r3,zero,r2
   14d00:	d0a4d217 	ldw	r2,-27832(gp)
   14d04:	18800816 	blt	r3,r2,14d28 <_degass_ctrl+0x1d8>
   14d08:	008000b4 	movhi	r2,2
   14d0c:	10b11304 	addi	r2,r2,-15284
   14d10:	10800017 	ldw	r2,0(r2)
   14d14:	11000d03 	ldbu	r4,52(r2)
   14d18:	00ffff84 	movi	r3,-2
   14d1c:	20c6703a 	and	r3,r4,r3
   14d20:	10c00d05 	stb	r3,52(r2)
   14d24:	00000e06 	br	14d60 <_degass_ctrl+0x210>
		else if ((-pRX_Status->degass_pressure) <  _LungVacc-50)  pRX_Status->vacuum_solenoid = TRUE;
   14d28:	008000b4 	movhi	r2,2
   14d2c:	10b11304 	addi	r2,r2,-15284
   14d30:	10800017 	ldw	r2,0(r2)
   14d34:	10801217 	ldw	r2,72(r2)
   14d38:	0087c83a 	sub	r3,zero,r2
   14d3c:	d0a4d217 	ldw	r2,-27832(gp)
   14d40:	10bff384 	addi	r2,r2,-50
   14d44:	1880060e 	bge	r3,r2,14d60 <_degass_ctrl+0x210>
   14d48:	008000b4 	movhi	r2,2
   14d4c:	10b11304 	addi	r2,r2,-15284
   14d50:	10800017 	ldw	r2,0(r2)
   14d54:	10c00d03 	ldbu	r3,52(r2)
   14d58:	18c00054 	ori	r3,r3,1
   14d5c:	10c00d05 	stb	r3,52(r2)
	}

	if (pRX_Status->vacuum_solenoid!=act)
   14d60:	008000b4 	movhi	r2,2
   14d64:	10b11304 	addi	r2,r2,-15284
   14d68:	10800017 	ldw	r2,0(r2)
   14d6c:	10800d17 	ldw	r2,52(r2)
   14d70:	1080004c 	andi	r2,r2,1
   14d74:	10c03fcc 	andi	r3,r2,255
   14d78:	e0bfff17 	ldw	r2,-4(fp)
   14d7c:	18800d26 	beq	r3,r2,14db4 <_degass_ctrl+0x264>
	{
		if (pRX_Status->vacuum_solenoid)
   14d80:	008000b4 	movhi	r2,2
   14d84:	10b11304 	addi	r2,r2,-15284
   14d88:	10800017 	ldw	r2,0(r2)
   14d8c:	10800d17 	ldw	r2,52(r2)
   14d90:	1080004c 	andi	r2,r2,1
   14d94:	10000426 	beq	r2,zero,14da8 <_degass_ctrl+0x258>
			IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE, DEGASS_VALVE_OUT);	//Vaccum Solenoid = on
   14d98:	00c00204 	movi	r3,8
   14d9c:	00800c04 	movi	r2,48
   14da0:	10c00035 	stwio	r3,0(r2)
   14da4:	00000306 	br	14db4 <_degass_ctrl+0x264>
		else
			IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUTPUT_BASE, DEGASS_VALVE_OUT);	// Vaccum Solenoid = off
   14da8:	00c00204 	movi	r3,8
   14dac:	00800d04 	movi	r2,52
   14db0:	10c00035 	stwio	r3,0(r2)
	}
	return (pRX_Status->vacuum_solenoid);
   14db4:	008000b4 	movhi	r2,2
   14db8:	10b11304 	addi	r2,r2,-15284
   14dbc:	10800017 	ldw	r2,0(r2)
   14dc0:	10800d17 	ldw	r2,52(r2)
   14dc4:	1080004c 	andi	r2,r2,1
   14dc8:	10803fcc 	andi	r2,r2,255
}
   14dcc:	e037883a 	mov	sp,fp
   14dd0:	df000017 	ldw	fp,0(sp)
   14dd4:	dec00104 	addi	sp,sp,4
   14dd8:	f800283a 	ret

00014ddc <_set_air_valve>:

//--- _set_air_cussion -----------------------------------------
void _set_air_valve(int isNo, int newState)
{
   14ddc:	defffd04 	addi	sp,sp,-12
   14de0:	df000215 	stw	fp,8(sp)
   14de4:	df000204 	addi	fp,sp,8
   14de8:	e13ffe15 	stw	r4,-8(fp)
   14dec:	e17fff15 	stw	r5,-4(fp)
	if (pRX_Status->ink_supply[isNo].airValve!=newState)
   14df0:	008000b4 	movhi	r2,2
   14df4:	10b11304 	addi	r2,r2,-15284
   14df8:	10c00017 	ldw	r3,0(r2)
   14dfc:	e0bffe17 	ldw	r2,-8(fp)
   14e00:	10801b24 	muli	r2,r2,108
   14e04:	10803904 	addi	r2,r2,228
   14e08:	1885883a 	add	r2,r3,r2
   14e0c:	10800017 	ldw	r2,0(r2)
   14e10:	1004d07a 	srli	r2,r2,1
   14e14:	1080004c 	andi	r2,r2,1
   14e18:	10c03fcc 	andi	r3,r2,255
   14e1c:	e0bfff17 	ldw	r2,-4(fp)
   14e20:	18802726 	beq	r3,r2,14ec0 <_set_air_valve+0xe4>
	{
		pRX_Status->ink_supply[isNo].airValve = newState;
   14e24:	008000b4 	movhi	r2,2
   14e28:	10b11304 	addi	r2,r2,-15284
   14e2c:	10c00017 	ldw	r3,0(r2)
   14e30:	e0bfff17 	ldw	r2,-4(fp)
   14e34:	1080004c 	andi	r2,r2,1
   14e38:	1009883a 	mov	r4,r2
   14e3c:	e0bffe17 	ldw	r2,-8(fp)
   14e40:	10801b24 	muli	r2,r2,108
   14e44:	10803904 	addi	r2,r2,228
   14e48:	1885883a 	add	r2,r3,r2
   14e4c:	20c0004c 	andi	r3,r4,1
   14e50:	18cb883a 	add	r5,r3,r3
   14e54:	11000003 	ldbu	r4,0(r2)
   14e58:	00ffff44 	movi	r3,-3
   14e5c:	20c6703a 	and	r3,r4,r3
   14e60:	1809883a 	mov	r4,r3
   14e64:	2807883a 	mov	r3,r5
   14e68:	20c6b03a 	or	r3,r4,r3
   14e6c:	10c00005 	stb	r3,0(r2)
		if (newState) _ValveOut |= AIR_CUSSION_OUT(isNo);
   14e70:	e0bfff17 	ldw	r2,-4(fp)
   14e74:	10000926 	beq	r2,zero,14e9c <_set_air_valve+0xc0>
   14e78:	e0bffe17 	ldw	r2,-8(fp)
   14e7c:	1085883a 	add	r2,r2,r2
   14e80:	1007883a 	mov	r3,r2
   14e84:	00800084 	movi	r2,2
   14e88:	10c6983a 	sll	r3,r2,r3
   14e8c:	d0a4d417 	ldw	r2,-27824(gp)
   14e90:	1884b03a 	or	r2,r3,r2
   14e94:	d0a4d415 	stw	r2,-27824(gp)
   14e98:	00000906 	br	14ec0 <_set_air_valve+0xe4>
		else		  _ValveOut &= ~AIR_CUSSION_OUT(isNo);
   14e9c:	e0bffe17 	ldw	r2,-8(fp)
   14ea0:	1085883a 	add	r2,r2,r2
   14ea4:	1007883a 	mov	r3,r2
   14ea8:	00800084 	movi	r2,2
   14eac:	10c4983a 	sll	r2,r2,r3
   14eb0:	0086303a 	nor	r3,zero,r2
   14eb4:	d0a4d417 	ldw	r2,-27824(gp)
   14eb8:	1884703a 	and	r2,r3,r2
   14ebc:	d0a4d415 	stw	r2,-27824(gp)
	}
}
   14ec0:	e037883a 	mov	sp,fp
   14ec4:	df000017 	ldw	fp,0(sp)
   14ec8:	dec00104 	addi	sp,sp,4
   14ecc:	f800283a 	ret

00014ed0 <_set_bleed_valve>:

//--- _set_bleed -----------------------------------------
void _set_bleed_valve(int isNo, int state)
{
   14ed0:	defffd04 	addi	sp,sp,-12
   14ed4:	df000215 	stw	fp,8(sp)
   14ed8:	df000204 	addi	fp,sp,8
   14edc:	e13ffe15 	stw	r4,-8(fp)
   14ee0:	e17fff15 	stw	r5,-4(fp)
	pRX_Status->ink_supply[isNo].bleedValve = state;
   14ee4:	008000b4 	movhi	r2,2
   14ee8:	10b11304 	addi	r2,r2,-15284
   14eec:	10c00017 	ldw	r3,0(r2)
   14ef0:	e0bfff17 	ldw	r2,-4(fp)
   14ef4:	1080004c 	andi	r2,r2,1
   14ef8:	1009883a 	mov	r4,r2
   14efc:	e0bffe17 	ldw	r2,-8(fp)
   14f00:	10801b24 	muli	r2,r2,108
   14f04:	10803904 	addi	r2,r2,228
   14f08:	1885883a 	add	r2,r3,r2
   14f0c:	2140004c 	andi	r5,r4,1
   14f10:	11000003 	ldbu	r4,0(r2)
   14f14:	00ffff84 	movi	r3,-2
   14f18:	20c6703a 	and	r3,r4,r3
   14f1c:	1809883a 	mov	r4,r3
   14f20:	2807883a 	mov	r3,r5
   14f24:	20c6b03a 	or	r3,r4,r3
   14f28:	10c00005 	stb	r3,0(r2)
	if (state) 	_ValveOut |=  BLEED_OUT(isNo);
   14f2c:	e0bfff17 	ldw	r2,-4(fp)
   14f30:	10000926 	beq	r2,zero,14f58 <_set_bleed_valve+0x88>
   14f34:	e0bffe17 	ldw	r2,-8(fp)
   14f38:	1085883a 	add	r2,r2,r2
   14f3c:	1007883a 	mov	r3,r2
   14f40:	00800044 	movi	r2,1
   14f44:	10c6983a 	sll	r3,r2,r3
   14f48:	d0a4d417 	ldw	r2,-27824(gp)
   14f4c:	1884b03a 	or	r2,r3,r2
   14f50:	d0a4d415 	stw	r2,-27824(gp)
   14f54:	00000906 	br	14f7c <_set_bleed_valve+0xac>
	else		_ValveOut &= ~BLEED_OUT(isNo);
   14f58:	e0bffe17 	ldw	r2,-8(fp)
   14f5c:	1085883a 	add	r2,r2,r2
   14f60:	1007883a 	mov	r3,r2
   14f64:	00800044 	movi	r2,1
   14f68:	10c4983a 	sll	r2,r2,r3
   14f6c:	0086303a 	nor	r3,zero,r2
   14f70:	d0a4d417 	ldw	r2,-27824(gp)
   14f74:	1884703a 	and	r2,r3,r2
   14f78:	d0a4d415 	stw	r2,-27824(gp)
}
   14f7c:	e037883a 	mov	sp,fp
   14f80:	df000017 	ldw	fp,0(sp)
   14f84:	dec00104 	addi	sp,sp,4
   14f88:	f800283a 	ret

00014f8c <_set_pressure_value>:

//--- _set_pressure_value -----------------------------------------
 static void _set_pressure_value(int state)
{
   14f8c:	defffe04 	addi	sp,sp,-8
   14f90:	df000115 	stw	fp,4(sp)
   14f94:	df000104 	addi	fp,sp,4
   14f98:	e13fff15 	stw	r4,-4(fp)
	if (state != pRX_Status->air_pressure_solenoid)
   14f9c:	008000b4 	movhi	r2,2
   14fa0:	10b11304 	addi	r2,r2,-15284
   14fa4:	10800017 	ldw	r2,0(r2)
   14fa8:	10800d17 	ldw	r2,52(r2)
   14fac:	1004d07a 	srli	r2,r2,1
   14fb0:	1080004c 	andi	r2,r2,1
   14fb4:	10c03fcc 	andi	r3,r2,255
   14fb8:	e0bfff17 	ldw	r2,-4(fp)
   14fbc:	18801726 	beq	r3,r2,1501c <_set_pressure_value+0x90>
	{
		pRX_Status->air_pressure_solenoid = state;
   14fc0:	008000b4 	movhi	r2,2
   14fc4:	10b11304 	addi	r2,r2,-15284
   14fc8:	10800017 	ldw	r2,0(r2)
   14fcc:	e0ffff17 	ldw	r3,-4(fp)
   14fd0:	18c0004c 	andi	r3,r3,1
   14fd4:	18c0004c 	andi	r3,r3,1
   14fd8:	18cb883a 	add	r5,r3,r3
   14fdc:	11000d03 	ldbu	r4,52(r2)
   14fe0:	00ffff44 	movi	r3,-3
   14fe4:	20c6703a 	and	r3,r4,r3
   14fe8:	1809883a 	mov	r4,r3
   14fec:	2807883a 	mov	r3,r5
   14ff0:	20c6b03a 	or	r3,r4,r3
   14ff4:	10c00d05 	stb	r3,52(r2)
		if (state)
   14ff8:	e0bfff17 	ldw	r2,-4(fp)
   14ffc:	10000426 	beq	r2,zero,15010 <_set_pressure_value+0x84>
			IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE,   PRESSURE_VALVE_OUT);
   15000:	00c00104 	movi	r3,4
   15004:	00800c04 	movi	r2,48
   15008:	10c00035 	stwio	r3,0(r2)
   1500c:	00000306 	br	1501c <_set_pressure_value+0x90>
		else
			IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUTPUT_BASE, PRESSURE_VALVE_OUT);
   15010:	00c00104 	movi	r3,4
   15014:	00800d04 	movi	r2,52
   15018:	10c00035 	stwio	r3,0(r2)
	}
}
   1501c:	e037883a 	mov	sp,fp
   15020:	df000017 	ldw	fp,0(sp)
   15024:	dec00104 	addi	sp,sp,4
   15028:	f800283a 	ret

0001502c <_trace_pump_ctrl>:

//--- _trace_pump_ctrl ---------------------------------------------
static void _trace_pump_ctrl(int pressure)
{
   1502c:	defffd04 	addi	sp,sp,-12
   15030:	df000215 	stw	fp,8(sp)
   15034:	df000204 	addi	fp,sp,8
   15038:	e13fff15 	stw	r4,-4(fp)
	static int cnt=0;
	int i=0;
   1503c:	e03ffe15 	stw	zero,-8(fp)
					pressure,
					pRX_Status->ink_supply[i].inkPumpSpeed_set,
					pRX_Status->ink_supply[i].bleedValve);
		}
	}
}
   15040:	e037883a 	mov	sp,fp
   15044:	df000017 	ldw	fp,0(sp)
   15048:	dec00104 	addi	sp,sp,4
   1504c:	f800283a 	ret

00015050 <_pump_ctrl>:

//--- _pump_ctrl -----------------------------------------------------
static void _pump_ctrl(INT32 isNo, INT32 pressure_target, INT32 print_mode)
{
   15050:	defffa04 	addi	sp,sp,-24
   15054:	dfc00515 	stw	ra,20(sp)
   15058:	df000415 	stw	fp,16(sp)
   1505c:	df000404 	addi	fp,sp,16
   15060:	e13ffd15 	stw	r4,-12(fp)
   15064:	e17ffe15 	stw	r5,-8(fp)
   15068:	e1bfff15 	stw	r6,-4(fp)
	#define PUMP_THRESHOLD	5
	#define MAX_PRESSURE	1100


	int set_valve = (pRX_Status->ink_supply[isNo].ctrl_state!=ctrl_test)
   1506c:	008000b4 	movhi	r2,2
   15070:	10b11304 	addi	r2,r2,-15284
   15074:	10c00017 	ldw	r3,0(r2)
   15078:	e0bffd17 	ldw	r2,-12(fp)
   1507c:	10801b24 	muli	r2,r2,108
   15080:	10802a04 	addi	r2,r2,168
   15084:	1885883a 	add	r2,r3,r2
   15088:	10c00017 	ldw	r3,0(r2)
			    && !(pRX_Status->ink_supply[isNo].ctrl_state>=ctrl_fill && pRX_Status->ink_supply[isNo].ctrl_state<ctrl_fill+10);
   1508c:	00800074 	movhi	r2,1
   15090:	10800044 	addi	r2,r2,1
   15094:	18801626 	beq	r3,r2,150f0 <_pump_ctrl+0xa0>
   15098:	008000b4 	movhi	r2,2
   1509c:	10b11304 	addi	r2,r2,-15284
   150a0:	10c00017 	ldw	r3,0(r2)
   150a4:	e0bffd17 	ldw	r2,-12(fp)
   150a8:	10801b24 	muli	r2,r2,108
   150ac:	10802a04 	addi	r2,r2,168
   150b0:	1885883a 	add	r2,r3,r2
   150b4:	10800017 	ldw	r2,0(r2)
   150b8:	10808030 	cmpltui	r2,r2,512
   150bc:	10000a1e 	bne	r2,zero,150e8 <_pump_ctrl+0x98>
   150c0:	008000b4 	movhi	r2,2
   150c4:	10b11304 	addi	r2,r2,-15284
   150c8:	10c00017 	ldw	r3,0(r2)
   150cc:	e0bffd17 	ldw	r2,-12(fp)
   150d0:	10801b24 	muli	r2,r2,108
   150d4:	10802a04 	addi	r2,r2,168
   150d8:	1885883a 	add	r2,r3,r2
   150dc:	10800017 	ldw	r2,0(r2)
   150e0:	108082b0 	cmpltui	r2,r2,522
   150e4:	1000021e 	bne	r2,zero,150f0 <_pump_ctrl+0xa0>
   150e8:	00800044 	movi	r2,1
   150ec:	00000106 	br	150f4 <_pump_ctrl+0xa4>
   150f0:	0005883a 	mov	r2,zero
{
	#define PUMP_THRESHOLD	5
	#define MAX_PRESSURE	1100


	int set_valve = (pRX_Status->ink_supply[isNo].ctrl_state!=ctrl_test)
   150f4:	e0bffc15 	stw	r2,-16(fp)

		//-----------------------------------------------------------------------------------------
		//  PID 1 (setpoints) :  Pressure_IN_cond_setpoint --> PID_setpoint --> Pressure_IS_setpoint
		//-----------------------------------------------------------------------------------------

		pRX_Status->ink_supply[isNo].COND_Pressure_Actual 	= pRX_Config->ink_supply[isNo].condPresIn;
   150f8:	008000b4 	movhi	r2,2
   150fc:	10b11304 	addi	r2,r2,-15284
   15100:	11000017 	ldw	r4,0(r2)
   15104:	008000b4 	movhi	r2,2
   15108:	10b11404 	addi	r2,r2,-15280
   1510c:	10c00017 	ldw	r3,0(r2)
   15110:	e0bffd17 	ldw	r2,-12(fp)
   15114:	10801724 	muli	r2,r2,92
   15118:	10801404 	addi	r2,r2,80
   1511c:	1885883a 	add	r2,r3,r2
   15120:	10c00017 	ldw	r3,0(r2)
   15124:	e0bffd17 	ldw	r2,-12(fp)
   15128:	10801b24 	muli	r2,r2,108
   1512c:	10803104 	addi	r2,r2,196
   15130:	2085883a 	add	r2,r4,r2
   15134:	10c00015 	stw	r3,0(r2)
		if(pRX_Config->headsPerColor == 1) _InkSupply[isNo].pid_Setpoint.P = PID_SETPOINT_P_PRINT_HEAD;
   15138:	008000b4 	movhi	r2,2
   1513c:	10b11404 	addi	r2,r2,-15280
   15140:	10800017 	ldw	r2,0(r2)
   15144:	10800517 	ldw	r2,20(r2)
   15148:	10800058 	cmpnei	r2,r2,1
   1514c:	1000091e 	bne	r2,zero,15174 <_pump_ctrl+0x124>
   15150:	008000b4 	movhi	r2,2
   15154:	10b4d904 	addi	r2,r2,-11420
   15158:	e0fffd17 	ldw	r3,-12(fp)
   1515c:	18c01f24 	muli	r3,r3,124
   15160:	18c00104 	addi	r3,r3,4
   15164:	10c5883a 	add	r2,r2,r3
   15168:	00c01904 	movi	r3,100
   1516c:	10c00015 	stw	r3,0(r2)
   15170:	00000806 	br	15194 <_pump_ctrl+0x144>
		else _InkSupply[isNo].pid_Setpoint.P 				= PID_SETPOINT_P_PRINT_HEADS;
   15174:	008000b4 	movhi	r2,2
   15178:	10b4d904 	addi	r2,r2,-11420
   1517c:	e0fffd17 	ldw	r3,-12(fp)
   15180:	18c01f24 	muli	r3,r3,124
   15184:	18c00104 	addi	r3,r3,4
   15188:	10c5883a 	add	r2,r2,r3
   1518c:	00c00c84 	movi	r3,50
   15190:	10c00015 	stw	r3,0(r2)

		// Regulation of Conditioners Pinlet
		if(print_mode == PUMP_CTRL_MODE_PRINT)
   15194:	e0bfff17 	ldw	r2,-4(fp)
   15198:	10800058 	cmpnei	r2,r2,1
   1519c:	10006a1e 	bne	r2,zero,15348 <_pump_ctrl+0x2f8>
		{
			_InkSupply[isNo].pid_Setpoint.Setpoint = pressure_target;
   151a0:	008000b4 	movhi	r2,2
   151a4:	10b4d904 	addi	r2,r2,-11420
   151a8:	e0fffd17 	ldw	r3,-12(fp)
   151ac:	18c01f24 	muli	r3,r3,124
   151b0:	10c5883a 	add	r2,r2,r3
   151b4:	e0fffe17 	ldw	r3,-8(fp)
   151b8:	10c00015 	stw	r3,0(r2)
			pid_calc(pRX_Status->ink_supply[isNo].COND_Pressure_Actual, &_InkSupply[isNo].pid_Setpoint);
   151bc:	008000b4 	movhi	r2,2
   151c0:	10b11304 	addi	r2,r2,-15284
   151c4:	10c00017 	ldw	r3,0(r2)
   151c8:	e0bffd17 	ldw	r2,-12(fp)
   151cc:	10801b24 	muli	r2,r2,108
   151d0:	10803104 	addi	r2,r2,196
   151d4:	1885883a 	add	r2,r3,r2
   151d8:	11000017 	ldw	r4,0(r2)
   151dc:	e0bffd17 	ldw	r2,-12(fp)
   151e0:	10c01f24 	muli	r3,r2,124
   151e4:	008000b4 	movhi	r2,2
   151e8:	10b4d904 	addi	r2,r2,-11420
   151ec:	1885883a 	add	r2,r3,r2
   151f0:	100b883a 	mov	r5,r2
   151f4:	00165a00 	call	165a0 <pid_calc>
			pRX_Status->ink_supply[isNo].IS_Pressure_Setpoint 	= _InkSupply[isNo].pid_Setpoint.val;
   151f8:	008000b4 	movhi	r2,2
   151fc:	10b11304 	addi	r2,r2,-15284
   15200:	11000017 	ldw	r4,0(r2)
   15204:	008000b4 	movhi	r2,2
   15208:	10b4d904 	addi	r2,r2,-11420
   1520c:	e0fffd17 	ldw	r3,-12(fp)
   15210:	18c01f24 	muli	r3,r3,124
   15214:	18c00304 	addi	r3,r3,12
   15218:	10c5883a 	add	r2,r2,r3
   1521c:	10c00017 	ldw	r3,0(r2)
   15220:	e0bffd17 	ldw	r2,-12(fp)
   15224:	10801b24 	muli	r2,r2,108
   15228:	10803004 	addi	r2,r2,192
   1522c:	2085883a 	add	r2,r4,r2
   15230:	10c00015 	stw	r3,0(r2)
		//	pRX_Status->ink_supply[isNo].PIDsetpoint_Output		= _InkSupply[isNo].pid_Setpoint.val;

			// Save max pressure for purge pressure
			// if ink supply pressure close to setpoint
			if(_InkSupply[isNo].pid_Setpoint.Setpoint - pRX_Status->ink_supply[isNo].COND_Pressure_Actual > 20)
   15234:	008000b4 	movhi	r2,2
   15238:	10b4d904 	addi	r2,r2,-11420
   1523c:	e0fffd17 	ldw	r3,-12(fp)
   15240:	18c01f24 	muli	r3,r3,124
   15244:	10c5883a 	add	r2,r2,r3
   15248:	10c00017 	ldw	r3,0(r2)
   1524c:	008000b4 	movhi	r2,2
   15250:	10b11304 	addi	r2,r2,-15284
   15254:	11000017 	ldw	r4,0(r2)
   15258:	e0bffd17 	ldw	r2,-12(fp)
   1525c:	10801b24 	muli	r2,r2,108
   15260:	10803104 	addi	r2,r2,196
   15264:	2085883a 	add	r2,r4,r2
   15268:	10800017 	ldw	r2,0(r2)
   1526c:	1885c83a 	sub	r2,r3,r2
   15270:	10800550 	cmplti	r2,r2,21
   15274:	10001d1e 	bne	r2,zero,152ec <_pump_ctrl+0x29c>
			{
				if(_InkSupply[isNo].pid_Setpoint.val > _MaxPrintPressure[isNo])
   15278:	008000b4 	movhi	r2,2
   1527c:	10b4d904 	addi	r2,r2,-11420
   15280:	e0fffd17 	ldw	r3,-12(fp)
   15284:	18c01f24 	muli	r3,r3,124
   15288:	18c00304 	addi	r3,r3,12
   1528c:	10c5883a 	add	r2,r2,r3
   15290:	11000017 	ldw	r4,0(r2)
   15294:	008000b4 	movhi	r2,2
   15298:	10b56104 	addi	r2,r2,-10876
   1529c:	e0fffd17 	ldw	r3,-12(fp)
   152a0:	18c7883a 	add	r3,r3,r3
   152a4:	18c7883a 	add	r3,r3,r3
   152a8:	10c5883a 	add	r2,r2,r3
   152ac:	10800017 	ldw	r2,0(r2)
   152b0:	11000e0e 	bge	r2,r4,152ec <_pump_ctrl+0x29c>
					_MaxPrintPressure[isNo] = _InkSupply[isNo].pid_Setpoint.val;
   152b4:	008000b4 	movhi	r2,2
   152b8:	10b4d904 	addi	r2,r2,-11420
   152bc:	e0fffd17 	ldw	r3,-12(fp)
   152c0:	18c01f24 	muli	r3,r3,124
   152c4:	18c00304 	addi	r3,r3,12
   152c8:	10c5883a 	add	r2,r2,r3
   152cc:	11000017 	ldw	r4,0(r2)
   152d0:	008000b4 	movhi	r2,2
   152d4:	10b56104 	addi	r2,r2,-10876
   152d8:	e0fffd17 	ldw	r3,-12(fp)
   152dc:	18c7883a 	add	r3,r3,r3
   152e0:	18c7883a 	add	r3,r3,r3
   152e4:	10c5883a 	add	r2,r2,r3
   152e8:	11000015 	stw	r4,0(r2)
			}
			// reset pid if output at 0, no reason to accumulate negative value (never want pressure negative)
			if(_InkSupply[isNo].pid_Setpoint.val <= _InkSupply[isNo].pid_Setpoint.val_min)
   152ec:	008000b4 	movhi	r2,2
   152f0:	10b4d904 	addi	r2,r2,-11420
   152f4:	e0fffd17 	ldw	r3,-12(fp)
   152f8:	18c01f24 	muli	r3,r3,124
   152fc:	18c00304 	addi	r3,r3,12
   15300:	10c5883a 	add	r2,r2,r3
   15304:	10c00017 	ldw	r3,0(r2)
   15308:	008000b4 	movhi	r2,2
   1530c:	10b4d904 	addi	r2,r2,-11420
   15310:	e13ffd17 	ldw	r4,-12(fp)
   15314:	21001f24 	muli	r4,r4,124
   15318:	21000404 	addi	r4,r4,16
   1531c:	1105883a 	add	r2,r2,r4
   15320:	10800017 	ldw	r2,0(r2)
   15324:	10c04f16 	blt	r2,r3,15464 <_pump_ctrl+0x414>
				pid_reset(&_InkSupply[isNo].pid_Setpoint);
   15328:	e0bffd17 	ldw	r2,-12(fp)
   1532c:	10c01f24 	muli	r3,r2,124
   15330:	008000b4 	movhi	r2,2
   15334:	10b4d904 	addi	r2,r2,-11420
   15338:	1885883a 	add	r2,r3,r2
   1533c:	1009883a 	mov	r4,r2
   15340:	00165780 	call	16578 <pid_reset>
   15344:	00004706 	br	15464 <_pump_ctrl+0x414>
		}

		// Regulation of Conditioners Pump speed
		else if(print_mode == PUMP_CTRL_INK_RECIRCULATION)
   15348:	e0bfff17 	ldw	r2,-4(fp)
   1534c:	10800158 	cmpnei	r2,r2,5
   15350:	1000441e 	bne	r2,zero,15464 <_pump_ctrl+0x414>
		{
			_InkSupply[isNo].pid_Setpoint.P = PID_SETPOINT_P_CHECK;
   15354:	008000b4 	movhi	r2,2
   15358:	10b4d904 	addi	r2,r2,-11420
   1535c:	e0fffd17 	ldw	r3,-12(fp)
   15360:	18c01f24 	muli	r3,r3,124
   15364:	18c00104 	addi	r3,r3,4
   15368:	10c5883a 	add	r2,r2,r3
   1536c:	00c00c84 	movi	r3,50
   15370:	10c00015 	stw	r3,0(r2)

			_InkSupply[isNo].pid_Setpoint.Setpoint = pressure_target;
   15374:	008000b4 	movhi	r2,2
   15378:	10b4d904 	addi	r2,r2,-11420
   1537c:	e0fffd17 	ldw	r3,-12(fp)
   15380:	18c01f24 	muli	r3,r3,124
   15384:	10c5883a 	add	r2,r2,r3
   15388:	e0fffe17 	ldw	r3,-8(fp)
   1538c:	10c00015 	stw	r3,0(r2)
			pid_calc(pRX_Config->ink_supply[isNo].condPumpFeedback, &_InkSupply[isNo].pid_Setpoint);
   15390:	008000b4 	movhi	r2,2
   15394:	10b11404 	addi	r2,r2,-15280
   15398:	10c00017 	ldw	r3,0(r2)
   1539c:	e0bffd17 	ldw	r2,-12(fp)
   153a0:	10801724 	muli	r2,r2,92
   153a4:	10801904 	addi	r2,r2,100
   153a8:	1885883a 	add	r2,r3,r2
   153ac:	10800017 	ldw	r2,0(r2)
   153b0:	1009883a 	mov	r4,r2
   153b4:	e0bffd17 	ldw	r2,-12(fp)
   153b8:	10c01f24 	muli	r3,r2,124
   153bc:	008000b4 	movhi	r2,2
   153c0:	10b4d904 	addi	r2,r2,-11420
   153c4:	1885883a 	add	r2,r3,r2
   153c8:	100b883a 	mov	r5,r2
   153cc:	00165a00 	call	165a0 <pid_calc>
			pRX_Status->ink_supply[isNo].IS_Pressure_Setpoint 	= _InkSupply[isNo].pid_Setpoint.val;
   153d0:	008000b4 	movhi	r2,2
   153d4:	10b11304 	addi	r2,r2,-15284
   153d8:	11000017 	ldw	r4,0(r2)
   153dc:	008000b4 	movhi	r2,2
   153e0:	10b4d904 	addi	r2,r2,-11420
   153e4:	e0fffd17 	ldw	r3,-12(fp)
   153e8:	18c01f24 	muli	r3,r3,124
   153ec:	18c00304 	addi	r3,r3,12
   153f0:	10c5883a 	add	r2,r2,r3
   153f4:	10c00017 	ldw	r3,0(r2)
   153f8:	e0bffd17 	ldw	r2,-12(fp)
   153fc:	10801b24 	muli	r2,r2,108
   15400:	10803004 	addi	r2,r2,192
   15404:	2085883a 	add	r2,r4,r2
   15408:	10c00015 	stw	r3,0(r2)

			// reset pid if output at 0, no reason to accumulate negative value (never want pressure negative)
			if(_InkSupply[isNo].pid_Setpoint.val <= _InkSupply[isNo].pid_Setpoint.val_min)
   1540c:	008000b4 	movhi	r2,2
   15410:	10b4d904 	addi	r2,r2,-11420
   15414:	e0fffd17 	ldw	r3,-12(fp)
   15418:	18c01f24 	muli	r3,r3,124
   1541c:	18c00304 	addi	r3,r3,12
   15420:	10c5883a 	add	r2,r2,r3
   15424:	10c00017 	ldw	r3,0(r2)
   15428:	008000b4 	movhi	r2,2
   1542c:	10b4d904 	addi	r2,r2,-11420
   15430:	e13ffd17 	ldw	r4,-12(fp)
   15434:	21001f24 	muli	r4,r4,124
   15438:	21000404 	addi	r4,r4,16
   1543c:	1105883a 	add	r2,r2,r4
   15440:	10800017 	ldw	r2,0(r2)
   15444:	10c00716 	blt	r2,r3,15464 <_pump_ctrl+0x414>
				pid_reset(&_InkSupply[isNo].pid_Setpoint);
   15448:	e0bffd17 	ldw	r2,-12(fp)
   1544c:	10c01f24 	muli	r3,r2,124
   15450:	008000b4 	movhi	r2,2
   15454:	10b4d904 	addi	r2,r2,-11420
   15458:	1885883a 	add	r2,r3,r2
   1545c:	1009883a 	mov	r4,r2
   15460:	00165780 	call	16578 <pid_reset>

		//-----------------------------------------------------------------------------------------
		//  PID 2 (pump) :  Pressure_IS_setpoint --> PID_pump --> Pump_speed (%)
		//-----------------------------------------------------------------------------------------

		if((print_mode == PUMP_CTRL_MODE_PRINT)||(print_mode == PUMP_CTRL_INK_RECIRCULATION))
   15464:	e0bfff17 	ldw	r2,-4(fp)
   15468:	10800060 	cmpeqi	r2,r2,1
   1546c:	1000031e 	bne	r2,zero,1547c <_pump_ctrl+0x42c>
   15470:	e0bfff17 	ldw	r2,-4(fp)
   15474:	10800158 	cmpnei	r2,r2,5
   15478:	1000101e 	bne	r2,zero,154bc <_pump_ctrl+0x46c>
			_InkSupply[isNo].pid_Pump.Setpoint = pRX_Status->ink_supply[isNo].IS_Pressure_Setpoint;
   1547c:	008000b4 	movhi	r2,2
   15480:	10b11304 	addi	r2,r2,-15284
   15484:	10c00017 	ldw	r3,0(r2)
   15488:	e0bffd17 	ldw	r2,-12(fp)
   1548c:	10801b24 	muli	r2,r2,108
   15490:	10803004 	addi	r2,r2,192
   15494:	1885883a 	add	r2,r3,r2
   15498:	10c00017 	ldw	r3,0(r2)
   1549c:	008000b4 	movhi	r2,2
   154a0:	10b4d904 	addi	r2,r2,-11420
   154a4:	e13ffd17 	ldw	r4,-12(fp)
   154a8:	21001f24 	muli	r4,r4,124
   154ac:	21000804 	addi	r4,r4,32
   154b0:	1105883a 	add	r2,r2,r4
   154b4:	10c00015 	stw	r3,0(r2)
   154b8:	00000806 	br	154dc <_pump_ctrl+0x48c>
		else _InkSupply[isNo].pid_Pump.Setpoint = pressure_target;
   154bc:	008000b4 	movhi	r2,2
   154c0:	10b4d904 	addi	r2,r2,-11420
   154c4:	e0fffd17 	ldw	r3,-12(fp)
   154c8:	18c01f24 	muli	r3,r3,124
   154cc:	18c00804 	addi	r3,r3,32
   154d0:	10c5883a 	add	r2,r2,r3
   154d4:	e0fffe17 	ldw	r3,-8(fp)
   154d8:	10c00015 	stw	r3,0(r2)

		// Special function (putty) : Test bleed line, air valve not used so P divided by 5
		if(print_mode == PUMP_CTRL_MODE_NO_AIR_VALVE) _InkSupply[isNo].pid_Pump.P = 200;
   154dc:	e0bfff17 	ldw	r2,-4(fp)
   154e0:	10800098 	cmpnei	r2,r2,2
   154e4:	1000091e 	bne	r2,zero,1550c <_pump_ctrl+0x4bc>
   154e8:	008000b4 	movhi	r2,2
   154ec:	10b4d904 	addi	r2,r2,-11420
   154f0:	e0fffd17 	ldw	r3,-12(fp)
   154f4:	18c01f24 	muli	r3,r3,124
   154f8:	18c00904 	addi	r3,r3,36
   154fc:	10c5883a 	add	r2,r2,r3
   15500:	00c03204 	movi	r3,200
   15504:	10c00015 	stw	r3,0(r2)
   15508:	00000806 	br	1552c <_pump_ctrl+0x4dc>
		else _InkSupply[isNo].pid_Pump.P = 1000;
   1550c:	008000b4 	movhi	r2,2
   15510:	10b4d904 	addi	r2,r2,-11420
   15514:	e0fffd17 	ldw	r3,-12(fp)
   15518:	18c01f24 	muli	r3,r3,124
   1551c:	18c00904 	addi	r3,r3,36
   15520:	10c5883a 	add	r2,r2,r3
   15524:	00c0fa04 	movi	r3,1000
   15528:	10c00015 	stw	r3,0(r2)

		pRX_Status->ink_supply[isNo].PIDsetpoint_Output = _InkSupply[isNo].pid_Pump.Setpoint;
   1552c:	008000b4 	movhi	r2,2
   15530:	10b11304 	addi	r2,r2,-15284
   15534:	11000017 	ldw	r4,0(r2)
   15538:	008000b4 	movhi	r2,2
   1553c:	10b4d904 	addi	r2,r2,-11420
   15540:	e0fffd17 	ldw	r3,-12(fp)
   15544:	18c01f24 	muli	r3,r3,124
   15548:	18c00804 	addi	r3,r3,32
   1554c:	10c5883a 	add	r2,r2,r3
   15550:	10c00017 	ldw	r3,0(r2)
   15554:	e0bffd17 	ldw	r2,-12(fp)
   15558:	10801b24 	muli	r2,r2,108
   1555c:	10803304 	addi	r2,r2,204
   15560:	2085883a 	add	r2,r4,r2
   15564:	10c00015 	stw	r3,0(r2)
		pRX_Status->ink_supply[isNo].IS_Pressure_Setpoint = _InkSupply[isNo].pid_Pump.Setpoint;
   15568:	008000b4 	movhi	r2,2
   1556c:	10b11304 	addi	r2,r2,-15284
   15570:	11000017 	ldw	r4,0(r2)
   15574:	008000b4 	movhi	r2,2
   15578:	10b4d904 	addi	r2,r2,-11420
   1557c:	e0fffd17 	ldw	r3,-12(fp)
   15580:	18c01f24 	muli	r3,r3,124
   15584:	18c00804 	addi	r3,r3,32
   15588:	10c5883a 	add	r2,r2,r3
   1558c:	10c00017 	ldw	r3,0(r2)
   15590:	e0bffd17 	ldw	r2,-12(fp)
   15594:	10801b24 	muli	r2,r2,108
   15598:	10803004 	addi	r2,r2,192
   1559c:	2085883a 	add	r2,r4,r2
   155a0:	10c00015 	stw	r3,0(r2)
		pid_calc(pRX_Status->ink_supply[isNo].IS_Pressure_Actual, &_InkSupply[isNo].pid_Pump);
   155a4:	008000b4 	movhi	r2,2
   155a8:	10b11304 	addi	r2,r2,-15284
   155ac:	10c00017 	ldw	r3,0(r2)
   155b0:	e0bffd17 	ldw	r2,-12(fp)
   155b4:	10801b24 	muli	r2,r2,108
   155b8:	10802f04 	addi	r2,r2,188
   155bc:	1885883a 	add	r2,r3,r2
   155c0:	11000017 	ldw	r4,0(r2)
   155c4:	e0bffd17 	ldw	r2,-12(fp)
   155c8:	10801f24 	muli	r2,r2,124
   155cc:	10c00804 	addi	r3,r2,32
   155d0:	008000b4 	movhi	r2,2
   155d4:	10b4d904 	addi	r2,r2,-11420
   155d8:	1885883a 	add	r2,r3,r2
   155dc:	100b883a 	mov	r5,r2
   155e0:	00165a00 	call	165a0 <pid_calc>

		if      (_InkSupply[isNo].pid_Pump.val <=0)
   155e4:	008000b4 	movhi	r2,2
   155e8:	10b4d904 	addi	r2,r2,-11420
   155ec:	e0fffd17 	ldw	r3,-12(fp)
   155f0:	18c01f24 	muli	r3,r3,124
   155f4:	18c00b04 	addi	r3,r3,44
   155f8:	10c5883a 	add	r2,r2,r3
   155fc:	10800017 	ldw	r2,0(r2)
   15600:	00800c16 	blt	zero,r2,15634 <_pump_ctrl+0x5e4>
		{
			_set_pump_speed(isNo, 0);
   15604:	e13ffd17 	ldw	r4,-12(fp)
   15608:	000b883a 	mov	r5,zero
   1560c:	00157c80 	call	157c8 <_set_pump_speed>
			// reset integrator if pump at 0 because the air valve manage the pressure decreasing
			pid_reset(&_InkSupply[isNo].pid_Pump);
   15610:	e0bffd17 	ldw	r2,-12(fp)
   15614:	10801f24 	muli	r2,r2,124
   15618:	10c00804 	addi	r3,r2,32
   1561c:	008000b4 	movhi	r2,2
   15620:	10b4d904 	addi	r2,r2,-11420
   15624:	1885883a 	add	r2,r3,r2
   15628:	1009883a 	mov	r4,r2
   1562c:	00165780 	call	16578 <pid_reset>
   15630:	00001706 	br	15690 <_pump_ctrl+0x640>
		}
		else if (_InkSupply[isNo].pid_Pump.val <PUMP_THRESHOLD) _set_pump_speed(isNo, PUMP_THRESHOLD);
   15634:	008000b4 	movhi	r2,2
   15638:	10b4d904 	addi	r2,r2,-11420
   1563c:	e0fffd17 	ldw	r3,-12(fp)
   15640:	18c01f24 	muli	r3,r3,124
   15644:	18c00b04 	addi	r3,r3,44
   15648:	10c5883a 	add	r2,r2,r3
   1564c:	10800017 	ldw	r2,0(r2)
   15650:	10800148 	cmpgei	r2,r2,5
   15654:	1000041e 	bne	r2,zero,15668 <_pump_ctrl+0x618>
   15658:	e13ffd17 	ldw	r4,-12(fp)
   1565c:	01400144 	movi	r5,5
   15660:	00157c80 	call	157c8 <_set_pump_speed>
   15664:	00000a06 	br	15690 <_pump_ctrl+0x640>
		else                                              		_set_pump_speed(isNo, _InkSupply[isNo].pid_Pump.val);
   15668:	008000b4 	movhi	r2,2
   1566c:	10b4d904 	addi	r2,r2,-11420
   15670:	e0fffd17 	ldw	r3,-12(fp)
   15674:	18c01f24 	muli	r3,r3,124
   15678:	18c00b04 	addi	r3,r3,44
   1567c:	10c5883a 	add	r2,r2,r3
   15680:	10800017 	ldw	r2,0(r2)
   15684:	e13ffd17 	ldw	r4,-12(fp)
   15688:	100b883a 	mov	r5,r2
   1568c:	00157c80 	call	157c8 <_set_pump_speed>

		pRX_Status->ink_supply[isNo].PIDpump_Output		= _InkSupply[isNo].pid_Pump.val;
   15690:	008000b4 	movhi	r2,2
   15694:	10b11304 	addi	r2,r2,-15284
   15698:	11000017 	ldw	r4,0(r2)
   1569c:	008000b4 	movhi	r2,2
   156a0:	10b4d904 	addi	r2,r2,-11420
   156a4:	e0fffd17 	ldw	r3,-12(fp)
   156a8:	18c01f24 	muli	r3,r3,124
   156ac:	18c00b04 	addi	r3,r3,44
   156b0:	10c5883a 	add	r2,r2,r3
   156b4:	10c00017 	ldw	r3,0(r2)
   156b8:	e0bffd17 	ldw	r2,-12(fp)
   156bc:	10801b24 	muli	r2,r2,108
   156c0:	10803404 	addi	r2,r2,208
   156c4:	2085883a 	add	r2,r4,r2
   156c8:	10c00015 	stw	r3,0(r2)
		_PumpBeforeOFF = _InkSupply[isNo].pid_Pump.val;
   156cc:	008000b4 	movhi	r2,2
   156d0:	10b4d904 	addi	r2,r2,-11420
   156d4:	e0fffd17 	ldw	r3,-12(fp)
   156d8:	18c01f24 	muli	r3,r3,124
   156dc:	18c00b04 	addi	r3,r3,44
   156e0:	10c5883a 	add	r2,r2,r3
   156e4:	10800017 	ldw	r2,0(r2)
   156e8:	d0a4da15 	stw	r2,-27800(gp)

		//---------------------------------------------------------------------------------------------------
		//  Controller 3 (Air valve) :  Pressure_IS_actual > Pressure_IS_setpoint --> Air valve open 100%
		//---------------------------------------------------------------------------------------------------

		if(print_mode != PUMP_CTRL_MODE_NO_AIR_VALVE)
   156ec:	e0bfff17 	ldw	r2,-4(fp)
   156f0:	108000a0 	cmpeqi	r2,r2,2
   156f4:	10002d1e 	bne	r2,zero,157ac <_pump_ctrl+0x75c>
		{
			if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual > MAX_PRESSURE)	// for safety
   156f8:	008000b4 	movhi	r2,2
   156fc:	10b11304 	addi	r2,r2,-15284
   15700:	10c00017 	ldw	r3,0(r2)
   15704:	e0bffd17 	ldw	r2,-12(fp)
   15708:	10801b24 	muli	r2,r2,108
   1570c:	10802f04 	addi	r2,r2,188
   15710:	1885883a 	add	r2,r3,r2
   15714:	10800017 	ldw	r2,0(r2)
   15718:	10811350 	cmplti	r2,r2,1101
   1571c:	1000041e 	bne	r2,zero,15730 <_pump_ctrl+0x6e0>
			{
				_set_air_valve(isNo, TRUE);
   15720:	e13ffd17 	ldw	r4,-12(fp)
   15724:	01400044 	movi	r5,1
   15728:	0014ddc0 	call	14ddc <_set_air_valve>
   1572c:	00001f06 	br	157ac <_pump_ctrl+0x75c>
			}
			else if(pRX_Status->ink_supply[isNo].IS_Pressure_Actual > _InkSupply[isNo].pid_Pump.Setpoint)
   15730:	008000b4 	movhi	r2,2
   15734:	10b11304 	addi	r2,r2,-15284
   15738:	10c00017 	ldw	r3,0(r2)
   1573c:	e0bffd17 	ldw	r2,-12(fp)
   15740:	10801b24 	muli	r2,r2,108
   15744:	10802f04 	addi	r2,r2,188
   15748:	1885883a 	add	r2,r3,r2
   1574c:	10c00017 	ldw	r3,0(r2)
   15750:	008000b4 	movhi	r2,2
   15754:	10b4d904 	addi	r2,r2,-11420
   15758:	e13ffd17 	ldw	r4,-12(fp)
   1575c:	21001f24 	muli	r4,r4,124
   15760:	21000804 	addi	r4,r4,32
   15764:	1105883a 	add	r2,r2,r4
   15768:	10800017 	ldw	r2,0(r2)
   1576c:	10c00a0e 	bge	r2,r3,15798 <_pump_ctrl+0x748>
			{
				if (set_valve) _set_air_valve(isNo, TRUE);
   15770:	e0bffc17 	ldw	r2,-16(fp)
   15774:	10000426 	beq	r2,zero,15788 <_pump_ctrl+0x738>
   15778:	e13ffd17 	ldw	r4,-12(fp)
   1577c:	01400044 	movi	r5,1
   15780:	0014ddc0 	call	14ddc <_set_air_valve>
   15784:	00000906 	br	157ac <_pump_ctrl+0x75c>
				else _set_air_valve(isNo, TRUE);
   15788:	e13ffd17 	ldw	r4,-12(fp)
   1578c:	01400044 	movi	r5,1
   15790:	0014ddc0 	call	14ddc <_set_air_valve>
   15794:	00000506 	br	157ac <_pump_ctrl+0x75c>
			}
			else
			{
				if (set_valve) _set_air_valve(isNo, FALSE);
   15798:	e0bffc17 	ldw	r2,-16(fp)
   1579c:	10000326 	beq	r2,zero,157ac <_pump_ctrl+0x75c>
   157a0:	e13ffd17 	ldw	r4,-12(fp)
   157a4:	000b883a 	mov	r5,zero
   157a8:	0014ddc0 	call	14ddc <_set_air_valve>
			}
		}

		_trace_pump_ctrl(pressure_target);
   157ac:	e13ffe17 	ldw	r4,-8(fp)
   157b0:	001502c0 	call	1502c <_trace_pump_ctrl>
}
   157b4:	e037883a 	mov	sp,fp
   157b8:	dfc00117 	ldw	ra,4(sp)
   157bc:	df000017 	ldw	fp,0(sp)
   157c0:	dec00204 	addi	sp,sp,8
   157c4:	f800283a 	ret

000157c8 <_set_pump_speed>:


//--- _set_pump_speed --------------------------------
void _set_pump_speed(int isNo, int speed)
{
   157c8:	defffb04 	addi	sp,sp,-20
   157cc:	dfc00415 	stw	ra,16(sp)
   157d0:	df000315 	stw	fp,12(sp)
   157d4:	dc000215 	stw	r16,8(sp)
   157d8:	df000304 	addi	fp,sp,12
   157dc:	e13ffd15 	stw	r4,-12(fp)
   157e0:	e17ffe15 	stw	r5,-8(fp)
	if (speed!=INVALID_VALUE)
   157e4:	e0fffe17 	ldw	r3,-8(fp)
   157e8:	009555b4 	movhi	r2,21846
   157ec:	10aaaa84 	addi	r2,r2,-21846
   157f0:	18803a26 	beq	r3,r2,158dc <_set_pump_speed+0x114>
	{
		IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, DAC_REG_0 + (isNo << 2), speed);
   157f4:	e0bffd17 	ldw	r2,-12(fp)
   157f8:	1085883a 	add	r2,r2,r2
   157fc:	1085883a 	add	r2,r2,r2
   15800:	10840104 	addi	r2,r2,4100
   15804:	1007883a 	mov	r3,r2
   15808:	008000b4 	movhi	r2,2
   1580c:	1885883a 	add	r2,r3,r2
   15810:	e0fffe0b 	ldhu	r3,-8(fp)
   15814:	10c0002d 	sthio	r3,0(r2)
		//if (_InkSupply[isNo].pid.val_max) pRX_Status->ink_supply[isNo].inkPumpSpeed_set  = 600 * speed / _InkSupply[isNo].pid.val_max; // 100%=600 ml
		//if (_InkSupply[isNo].pid.val_max) pRX_Status->ink_supply[isNo].inkPumpSpeed_set = speed * 118 * 98 / 10 / 1023; // linear approximation from Excel
		if (_InkSupply[isNo].pid_Pump.val_max) _PumpSpeed1000[isNo] += 100 * speed / _InkSupply[isNo].pid_Pump.val_max; // in [%]
   15818:	008000b4 	movhi	r2,2
   1581c:	10b4d904 	addi	r2,r2,-11420
   15820:	e0fffd17 	ldw	r3,-12(fp)
   15824:	18c01f24 	muli	r3,r3,124
   15828:	18c00d04 	addi	r3,r3,52
   1582c:	10c5883a 	add	r2,r2,r3
   15830:	10800017 	ldw	r2,0(r2)
   15834:	10001b26 	beq	r2,zero,158a4 <_set_pump_speed+0xdc>
   15838:	008000b4 	movhi	r2,2
   1583c:	10b56904 	addi	r2,r2,-10844
   15840:	e0fffd17 	ldw	r3,-12(fp)
   15844:	18c7883a 	add	r3,r3,r3
   15848:	18c7883a 	add	r3,r3,r3
   1584c:	10c5883a 	add	r2,r2,r3
   15850:	14000017 	ldw	r16,0(r2)
   15854:	e0bffe17 	ldw	r2,-8(fp)
   15858:	11001924 	muli	r4,r2,100
   1585c:	008000b4 	movhi	r2,2
   15860:	10b4d904 	addi	r2,r2,-11420
   15864:	e0fffd17 	ldw	r3,-12(fp)
   15868:	18c01f24 	muli	r3,r3,124
   1586c:	18c00d04 	addi	r3,r3,52
   15870:	10c5883a 	add	r2,r2,r3
   15874:	10800017 	ldw	r2,0(r2)
   15878:	100b883a 	mov	r5,r2
   1587c:	00180380 	call	18038 <__divsi3>
   15880:	8089883a 	add	r4,r16,r2
   15884:	008000b4 	movhi	r2,2
   15888:	10b56904 	addi	r2,r2,-10844
   1588c:	e0fffd17 	ldw	r3,-12(fp)
   15890:	18c7883a 	add	r3,r3,r3
   15894:	18c7883a 	add	r3,r3,r3
   15898:	10c5883a 	add	r2,r2,r3
   1589c:	11000015 	stw	r4,0(r2)
   158a0:	00000e06 	br	158dc <_set_pump_speed+0x114>
		else                              _PumpSpeed1000[isNo] += 0;
   158a4:	008000b4 	movhi	r2,2
   158a8:	10b56904 	addi	r2,r2,-10844
   158ac:	e0fffd17 	ldw	r3,-12(fp)
   158b0:	18c7883a 	add	r3,r3,r3
   158b4:	18c7883a 	add	r3,r3,r3
   158b8:	10c5883a 	add	r2,r2,r3
   158bc:	11000017 	ldw	r4,0(r2)
   158c0:	008000b4 	movhi	r2,2
   158c4:	10b56904 	addi	r2,r2,-10844
   158c8:	e0fffd17 	ldw	r3,-12(fp)
   158cc:	18c7883a 	add	r3,r3,r3
   158d0:	18c7883a 	add	r3,r3,r3
   158d4:	10c5883a 	add	r2,r2,r3
   158d8:	11000015 	stw	r4,0(r2)
	}
}
   158dc:	e6ffff04 	addi	sp,fp,-4
   158e0:	dfc00217 	ldw	ra,8(sp)
   158e4:	df000117 	ldw	fp,4(sp)
   158e8:	dc000017 	ldw	r16,0(sp)
   158ec:	dec00304 	addi	sp,sp,12
   158f0:	f800283a 	ret

000158f4 <_get_pump_ticks>:

//--- _get_pump_ticks -------------------------------------------------
static UINT32 _get_pump_ticks(int isNo)
{
   158f4:	defffe04 	addi	sp,sp,-8
   158f8:	df000115 	stw	fp,4(sp)
   158fc:	df000104 	addi	fp,sp,4
   15900:	e13fff15 	stw	r4,-4(fp)
	return IORD_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, ADC_FREQ_0 + (isNo << 2));
   15904:	e0bfff17 	ldw	r2,-4(fp)
   15908:	1085883a 	add	r2,r2,r2
   1590c:	1085883a 	add	r2,r2,r2
   15910:	10800e04 	addi	r2,r2,56
   15914:	1007883a 	mov	r3,r2
   15918:	008000b4 	movhi	r2,2
   1591c:	1885883a 	add	r2,r3,r2
   15920:	10800037 	ldwio	r2,0(r2)
}
   15924:	e037883a 	mov	sp,fp
   15928:	df000017 	ldw	fp,0(sp)
   1592c:	dec00104 	addi	sp,sp,4
   15930:	f800283a 	ret

00015934 <_set_flush_pump>:

//--- _set_flush_pump ------------------------------------------
static void _set_flush_pump(int isNo, int state)
{
   15934:	defffa04 	addi	sp,sp,-24
   15938:	dfc00515 	stw	ra,20(sp)
   1593c:	df000415 	stw	fp,16(sp)
   15940:	df000404 	addi	fp,sp,16
   15944:	e13ffe15 	stw	r4,-8(fp)
   15948:	e17fff15 	stw	r5,-4(fp)
	if (state) _FlushPump |=  (1<<isNo);
   1594c:	e0bfff17 	ldw	r2,-4(fp)
   15950:	10000726 	beq	r2,zero,15970 <_set_flush_pump+0x3c>
   15954:	00c00044 	movi	r3,1
   15958:	e0bffe17 	ldw	r2,-8(fp)
   1595c:	1886983a 	sll	r3,r3,r2
   15960:	d0a4d517 	ldw	r2,-27820(gp)
   15964:	1884b03a 	or	r2,r3,r2
   15968:	d0a4d515 	stw	r2,-27820(gp)
   1596c:	00000706 	br	1598c <_set_flush_pump+0x58>
	else	   _FlushPump &= ~(1<<isNo);
   15970:	00c00044 	movi	r3,1
   15974:	e0bffe17 	ldw	r2,-8(fp)
   15978:	1884983a 	sll	r2,r3,r2
   1597c:	0086303a 	nor	r3,zero,r2
   15980:	d0a4d517 	ldw	r2,-27820(gp)
   15984:	1884703a 	and	r2,r3,r2
   15988:	d0a4d515 	stw	r2,-27820(gp)

	if (pRX_Config->test_flush) pRX_Status->flush_pump_val = pRX_Config->test_flush;
   1598c:	008000b4 	movhi	r2,2
   15990:	10b11404 	addi	r2,r2,-15280
   15994:	10800017 	ldw	r2,0(r2)
   15998:	10800417 	ldw	r2,16(r2)
   1599c:	10000926 	beq	r2,zero,159c4 <_set_flush_pump+0x90>
   159a0:	008000b4 	movhi	r2,2
   159a4:	10b11304 	addi	r2,r2,-15284
   159a8:	10c00017 	ldw	r3,0(r2)
   159ac:	008000b4 	movhi	r2,2
   159b0:	10b11404 	addi	r2,r2,-15280
   159b4:	10800017 	ldw	r2,0(r2)
   159b8:	10800417 	ldw	r2,16(r2)
   159bc:	18801415 	stw	r2,80(r3)
   159c0:	00004806 	br	15ae4 <_set_flush_pump+0x1b0>
	else
	{
		if (!_FlushPump)  pRX_Status->flush_pump_val=0;
   159c4:	d0a4d517 	ldw	r2,-27820(gp)
   159c8:	1000051e 	bne	r2,zero,159e0 <_set_flush_pump+0xac>
   159cc:	008000b4 	movhi	r2,2
   159d0:	10b11304 	addi	r2,r2,-15284
   159d4:	10800017 	ldw	r2,0(r2)
   159d8:	10001415 	stw	zero,80(r2)
   159dc:	00004106 	br	15ae4 <_set_flush_pump+0x1b0>
		else
		{
			int i;
			int pres=0;
   159e0:	e03ffd15 	stw	zero,-12(fp)

			for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   159e4:	e03ffc15 	stw	zero,-16(fp)
   159e8:	00002606 	br	15a84 <_set_flush_pump+0x150>
			{
				if ((_FlushPump &  (1<<i)) && (pRX_Config->ink_supply[i].condPresIn!=INVALID_VALUE))
   159ec:	d0e4d517 	ldw	r3,-27820(gp)
   159f0:	e0bffc17 	ldw	r2,-16(fp)
   159f4:	1885d83a 	sra	r2,r3,r2
   159f8:	1080004c 	andi	r2,r2,1
   159fc:	10001e26 	beq	r2,zero,15a78 <_set_flush_pump+0x144>
   15a00:	008000b4 	movhi	r2,2
   15a04:	10b11404 	addi	r2,r2,-15280
   15a08:	10c00017 	ldw	r3,0(r2)
   15a0c:	e0bffc17 	ldw	r2,-16(fp)
   15a10:	10801724 	muli	r2,r2,92
   15a14:	10801404 	addi	r2,r2,80
   15a18:	1885883a 	add	r2,r3,r2
   15a1c:	10c00017 	ldw	r3,0(r2)
   15a20:	009555b4 	movhi	r2,21846
   15a24:	10aaaa84 	addi	r2,r2,-21846
   15a28:	18801326 	beq	r3,r2,15a78 <_set_flush_pump+0x144>
				{
					if (pRX_Config->ink_supply[i].condPresIn>pres) pres=pRX_Config->ink_supply[i].condPresIn;
   15a2c:	008000b4 	movhi	r2,2
   15a30:	10b11404 	addi	r2,r2,-15280
   15a34:	10c00017 	ldw	r3,0(r2)
   15a38:	e0bffc17 	ldw	r2,-16(fp)
   15a3c:	10801724 	muli	r2,r2,92
   15a40:	10801404 	addi	r2,r2,80
   15a44:	1885883a 	add	r2,r3,r2
   15a48:	10800017 	ldw	r2,0(r2)
   15a4c:	e0fffd17 	ldw	r3,-12(fp)
   15a50:	1880090e 	bge	r3,r2,15a78 <_set_flush_pump+0x144>
   15a54:	008000b4 	movhi	r2,2
   15a58:	10b11404 	addi	r2,r2,-15280
   15a5c:	10c00017 	ldw	r3,0(r2)
   15a60:	e0bffc17 	ldw	r2,-16(fp)
   15a64:	10801724 	muli	r2,r2,92
   15a68:	10801404 	addi	r2,r2,80
   15a6c:	1885883a 	add	r2,r3,r2
   15a70:	10800017 	ldw	r2,0(r2)
   15a74:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			int i;
			int pres=0;

			for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   15a78:	e0bffc17 	ldw	r2,-16(fp)
   15a7c:	10800044 	addi	r2,r2,1
   15a80:	e0bffc15 	stw	r2,-16(fp)
   15a84:	e0bffc17 	ldw	r2,-16(fp)
   15a88:	10800110 	cmplti	r2,r2,4
   15a8c:	103fd71e 	bne	r2,zero,159ec <__alt_mem_onchip_memory_nios_arm+0xfffc59ec>
				if ((_FlushPump &  (1<<i)) && (pRX_Config->ink_supply[i].condPresIn!=INVALID_VALUE))
				{
					if (pRX_Config->ink_supply[i].condPresIn>pres) pres=pRX_Config->ink_supply[i].condPresIn;
				}
			};
			if (pRX_Status->flush_pres_head<400) pRX_Status->flush_pump_val=100;
   15a90:	008000b4 	movhi	r2,2
   15a94:	10b11304 	addi	r2,r2,-15284
   15a98:	10800017 	ldw	r2,0(r2)
   15a9c:	10801517 	ldw	r2,84(r2)
   15aa0:	10806408 	cmpgei	r2,r2,400
   15aa4:	1000051e 	bne	r2,zero,15abc <_set_flush_pump+0x188>
   15aa8:	008000b4 	movhi	r2,2
   15aac:	10b11304 	addi	r2,r2,-15284
   15ab0:	10800017 	ldw	r2,0(r2)
   15ab4:	00c01904 	movi	r3,100
   15ab8:	10c01415 	stw	r3,80(r2)
			if (pRX_Status->flush_pres_head>450) pRX_Status->flush_pump_val=0;
   15abc:	008000b4 	movhi	r2,2
   15ac0:	10b11304 	addi	r2,r2,-15284
   15ac4:	10800017 	ldw	r2,0(r2)
   15ac8:	10801517 	ldw	r2,84(r2)
   15acc:	108070d0 	cmplti	r2,r2,451
   15ad0:	1000041e 	bne	r2,zero,15ae4 <_set_flush_pump+0x1b0>
   15ad4:	008000b4 	movhi	r2,2
   15ad8:	10b11304 	addi	r2,r2,-15284
   15adc:	10800017 	ldw	r2,0(r2)
   15ae0:	10001415 	stw	zero,80(r2)
		}
	}
	pRX_Status->flush_pump 	= pRX_Status->flush_pump_val>0;
   15ae4:	008000b4 	movhi	r2,2
   15ae8:	10b11304 	addi	r2,r2,-15284
   15aec:	10c00017 	ldw	r3,0(r2)
   15af0:	008000b4 	movhi	r2,2
   15af4:	10b11304 	addi	r2,r2,-15284
   15af8:	10800017 	ldw	r2,0(r2)
   15afc:	10801417 	ldw	r2,80(r2)
   15b00:	0084803a 	cmplt	r2,zero,r2
   15b04:	1080004c 	andi	r2,r2,1
   15b08:	1085883a 	add	r2,r2,r2
   15b0c:	108b883a 	add	r5,r2,r2
   15b10:	19000d03 	ldbu	r4,52(r3)
   15b14:	00bffec4 	movi	r2,-5
   15b18:	2084703a 	and	r2,r4,r2
   15b1c:	1009883a 	mov	r4,r2
   15b20:	2805883a 	mov	r2,r5
   15b24:	2084b03a 	or	r2,r4,r2
   15b28:	18800d05 	stb	r2,52(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(FLUSH_PUMP_PWM_DUTY_CYCLE_BASE,	0x1000*pRX_Status->flush_pump_val/100);	// ON
   15b2c:	008000b4 	movhi	r2,2
   15b30:	10b11304 	addi	r2,r2,-15284
   15b34:	10800017 	ldw	r2,0(r2)
   15b38:	10801417 	ldw	r2,80(r2)
   15b3c:	1004933a 	slli	r2,r2,12
   15b40:	1009883a 	mov	r4,r2
   15b44:	01401904 	movi	r5,100
   15b48:	00180380 	call	18038 <__divsi3>
   15b4c:	1007883a 	mov	r3,r2
   15b50:	00803404 	movi	r2,208
   15b54:	10c00035 	stwio	r3,0(r2)
}
   15b58:	e037883a 	mov	sp,fp
   15b5c:	dfc00117 	ldw	ra,4(sp)
   15b60:	df000017 	ldw	fp,0(sp)
   15b64:	dec00204 	addi	sp,sp,8
   15b68:	f800283a 	ret

00015b6c <_set_air_pump>:

//--- _set_air_pump ---------------------------------------------
static void _set_air_pump(int state)
{
   15b6c:	defffe04 	addi	sp,sp,-8
   15b70:	df000115 	stw	fp,4(sp)
   15b74:	df000104 	addi	fp,sp,4
   15b78:	e13fff15 	stw	r4,-4(fp)
	if (state)
   15b7c:	e0bfff17 	ldw	r2,-4(fp)
   15b80:	10000426 	beq	r2,zero,15b94 <_set_air_pump+0x28>
		IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE, AIR_PUMP_OUT);		// Air Pump = on
   15b84:	00c00804 	movi	r3,32
   15b88:	00800c04 	movi	r2,48
   15b8c:	10c00035 	stwio	r3,0(r2)
   15b90:	00000306 	br	15ba0 <_set_air_pump+0x34>
	else
		IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUTPUT_BASE, AIR_PUMP_OUT);	// Air Pump = off
   15b94:	00c00804 	movi	r3,32
   15b98:	00800d04 	movi	r2,52
   15b9c:	10c00035 	stwio	r3,0(r2)

	pRX_Status->air_pump = state;
   15ba0:	008000b4 	movhi	r2,2
   15ba4:	10b11304 	addi	r2,r2,-15284
   15ba8:	10800017 	ldw	r2,0(r2)
   15bac:	e0ffff17 	ldw	r3,-4(fp)
   15bb0:	18c0004c 	andi	r3,r3,1
   15bb4:	18c0004c 	andi	r3,r3,1
   15bb8:	180a90fa 	slli	r5,r3,3
   15bbc:	11000d03 	ldbu	r4,52(r2)
   15bc0:	00fffdc4 	movi	r3,-9
   15bc4:	20c6703a 	and	r3,r4,r3
   15bc8:	1809883a 	mov	r4,r3
   15bcc:	2807883a 	mov	r3,r5
   15bd0:	20c6b03a 	or	r3,r4,r3
   15bd4:	10c00d05 	stb	r3,52(r2)
}
   15bd8:	e037883a 	mov	sp,fp
   15bdc:	df000017 	ldw	fp,0(sp)
   15be0:	dec00104 	addi	sp,sp,4
   15be4:	f800283a 	ret

00015be8 <log_init>:

static int _cnt=0;

//--- log_init ----------------------------
void log_init(void)
{
   15be8:	deffff04 	addi	sp,sp,-4
   15bec:	df000015 	stw	fp,0(sp)
   15bf0:	d839883a 	mov	fp,sp
	pRX_Status->logInIdx  = 0;
   15bf4:	008000b4 	movhi	r2,2
   15bf8:	10b11304 	addi	r2,r2,-15284
   15bfc:	10800017 	ldw	r2,0(r2)
   15c00:	10009515 	stw	zero,596(r2)
	pRX_Status->logOutIdx = 0;
   15c04:	008000b4 	movhi	r2,2
   15c08:	10b11304 	addi	r2,r2,-15284
   15c0c:	10800017 	ldw	r2,0(r2)
   15c10:	10009615 	stw	zero,600(r2)
}
   15c14:	e037883a 	mov	sp,fp
   15c18:	df000017 	ldw	fp,0(sp)
   15c1c:	dec00104 	addi	sp,sp,4
   15c20:	f800283a 	ret

00015c24 <valstr>:


static int valstr(char *str, INT32 val)
{
   15c24:	defffc04 	addi	sp,sp,-16
   15c28:	dfc00315 	stw	ra,12(sp)
   15c2c:	df000215 	stw	fp,8(sp)
   15c30:	df000204 	addi	fp,sp,8
   15c34:	e13ffe15 	stw	r4,-8(fp)
   15c38:	e17fff15 	stw	r5,-4(fp)
	if (val==INVALID_VALUE) return sprintf(str, "\t");
   15c3c:	e0ffff17 	ldw	r3,-4(fp)
   15c40:	009555b4 	movhi	r2,21846
   15c44:	10aaaa84 	addi	r2,r2,-21846
   15c48:	1880061e 	bne	r3,r2,15c64 <valstr+0x40>
   15c4c:	e0bffe17 	ldw	r2,-8(fp)
   15c50:	00c00244 	movi	r3,9
   15c54:	10c00005 	stb	r3,0(r2)
   15c58:	10000045 	stb	zero,1(r2)
   15c5c:	00800044 	movi	r2,1
   15c60:	00000506 	br	15c78 <valstr+0x54>
	else return sprintf(str, "%d\t", (int)val);
   15c64:	e13ffe17 	ldw	r4,-8(fp)
   15c68:	014000b4 	movhi	r5,2
   15c6c:	2966f904 	addi	r5,r5,-25628
   15c70:	e1bfff17 	ldw	r6,-4(fp)
   15c74:	00181a40 	call	181a4 <sprintf>
}
   15c78:	e037883a 	mov	sp,fp
   15c7c:	dfc00117 	ldw	ra,4(sp)
   15c80:	df000017 	ldw	fp,0(sp)
   15c84:	dec00204 	addi	sp,sp,8
   15c88:	f800283a 	ret

00015c8c <log_tick_10ms>:

//--- log_tick_10ms ------------------------
void log_tick_10ms(void)
{
   15c8c:	defffa04 	addi	sp,sp,-24
   15c90:	dfc00515 	stw	ra,20(sp)
   15c94:	df000415 	stw	fp,16(sp)
   15c98:	dc000315 	stw	r16,12(sp)
   15c9c:	df000404 	addi	fp,sp,16
	char *str;
	int len, i;
	if (pRX_Config->cmd.logging)
   15ca0:	008000b4 	movhi	r2,2
   15ca4:	10b11404 	addi	r2,r2,-15280
   15ca8:	10800017 	ldw	r2,0(r2)
   15cac:	10800017 	ldw	r2,0(r2)
   15cb0:	1080010c 	andi	r2,r2,4
   15cb4:	10011b26 	beq	r2,zero,16124 <log_tick_10ms+0x498>
	{
		if (_cnt==0)
   15cb8:	d0a4db17 	ldw	r2,-27796(gp)
   15cbc:	1000771e 	bne	r2,zero,15e9c <log_tick_10ms+0x210>
		{
			str = pRX_Status->logStr[pRX_Status->logInIdx];
   15cc0:	008000b4 	movhi	r2,2
   15cc4:	10b11304 	addi	r2,r2,-15284
   15cc8:	10c00017 	ldw	r3,0(r2)
   15ccc:	008000b4 	movhi	r2,2
   15cd0:	10b11304 	addi	r2,r2,-15284
   15cd4:	10800017 	ldw	r2,0(r2)
   15cd8:	10809517 	ldw	r2,596(r2)
   15cdc:	1004923a 	slli	r2,r2,8
   15ce0:	10809704 	addi	r2,r2,604
   15ce4:	1885883a 	add	r2,r3,r2
   15ce8:	e0bffe15 	stw	r2,-8(fp)
			len  = sprintf(str, "#:\t");
   15cec:	e0bffe17 	ldw	r2,-8(fp)
   15cf0:	00c008c4 	movi	r3,35
   15cf4:	10c00005 	stb	r3,0(r2)
   15cf8:	00c00e84 	movi	r3,58
   15cfc:	10c00045 	stb	r3,1(r2)
   15d00:	00c00244 	movi	r3,9
   15d04:	10c00085 	stb	r3,2(r2)
   15d08:	100000c5 	stb	zero,3(r2)
   15d0c:	008000c4 	movi	r2,3
   15d10:	e0bffc15 	stw	r2,-16(fp)
			for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   15d14:	e03ffd15 	stw	zero,-12(fp)
   15d18:	00004b06 	br	15e48 <log_tick_10ms+0x1bc>
			{
				len += sprintf(&str[len], "cond%d:\t", i);
   15d1c:	e0bffc17 	ldw	r2,-16(fp)
   15d20:	e0fffe17 	ldw	r3,-8(fp)
   15d24:	1885883a 	add	r2,r3,r2
   15d28:	1009883a 	mov	r4,r2
   15d2c:	014000b4 	movhi	r5,2
   15d30:	2966fa04 	addi	r5,r5,-25624
   15d34:	e1bffd17 	ldw	r6,-12(fp)
   15d38:	00181a40 	call	181a4 <sprintf>
   15d3c:	1007883a 	mov	r3,r2
   15d40:	e0bffc17 	ldw	r2,-16(fp)
   15d44:	10c5883a 	add	r2,r2,r3
   15d48:	e0bffc15 	stw	r2,-16(fp)
				len += sprintf(&str[len], "pset%d:\t", i);
   15d4c:	e0bffc17 	ldw	r2,-16(fp)
   15d50:	e0fffe17 	ldw	r3,-8(fp)
   15d54:	1885883a 	add	r2,r3,r2
   15d58:	1009883a 	mov	r4,r2
   15d5c:	014000b4 	movhi	r5,2
   15d60:	2966fd04 	addi	r5,r5,-25612
   15d64:	e1bffd17 	ldw	r6,-12(fp)
   15d68:	00181a40 	call	181a4 <sprintf>
   15d6c:	1007883a 	mov	r3,r2
   15d70:	e0bffc17 	ldw	r2,-16(fp)
   15d74:	10c5883a 	add	r2,r2,r3
   15d78:	e0bffc15 	stw	r2,-16(fp)
				len += sprintf(&str[len], "pres%d:\t", i);
   15d7c:	e0bffc17 	ldw	r2,-16(fp)
   15d80:	e0fffe17 	ldw	r3,-8(fp)
   15d84:	1885883a 	add	r2,r3,r2
   15d88:	1009883a 	mov	r4,r2
   15d8c:	014000b4 	movhi	r5,2
   15d90:	29670004 	addi	r5,r5,-25600
   15d94:	e1bffd17 	ldw	r6,-12(fp)
   15d98:	00181a40 	call	181a4 <sprintf>
   15d9c:	1007883a 	mov	r3,r2
   15da0:	e0bffc17 	ldw	r2,-16(fp)
   15da4:	10c5883a 	add	r2,r2,r3
   15da8:	e0bffc15 	stw	r2,-16(fp)
				len += sprintf(&str[len], "pumpset%d:\t", i);
   15dac:	e0bffc17 	ldw	r2,-16(fp)
   15db0:	e0fffe17 	ldw	r3,-8(fp)
   15db4:	1885883a 	add	r2,r3,r2
   15db8:	1009883a 	mov	r4,r2
   15dbc:	014000b4 	movhi	r5,2
   15dc0:	29670304 	addi	r5,r5,-25588
   15dc4:	e1bffd17 	ldw	r6,-12(fp)
   15dc8:	00181a40 	call	181a4 <sprintf>
   15dcc:	1007883a 	mov	r3,r2
   15dd0:	e0bffc17 	ldw	r2,-16(fp)
   15dd4:	10c5883a 	add	r2,r2,r3
   15dd8:	e0bffc15 	stw	r2,-16(fp)
//				len += sprintf(&str[len], "pump%d:\t", i);
				len += sprintf(&str[len], "bleed%d:\t", i);
   15ddc:	e0bffc17 	ldw	r2,-16(fp)
   15de0:	e0fffe17 	ldw	r3,-8(fp)
   15de4:	1885883a 	add	r2,r3,r2
   15de8:	1009883a 	mov	r4,r2
   15dec:	014000b4 	movhi	r5,2
   15df0:	29670604 	addi	r5,r5,-25576
   15df4:	e1bffd17 	ldw	r6,-12(fp)
   15df8:	00181a40 	call	181a4 <sprintf>
   15dfc:	1007883a 	mov	r3,r2
   15e00:	e0bffc17 	ldw	r2,-16(fp)
   15e04:	10c5883a 	add	r2,r2,r3
   15e08:	e0bffc15 	stw	r2,-16(fp)
				len += sprintf(&str[len], "air%d:\t", i);
   15e0c:	e0bffc17 	ldw	r2,-16(fp)
   15e10:	e0fffe17 	ldw	r3,-8(fp)
   15e14:	1885883a 	add	r2,r3,r2
   15e18:	1009883a 	mov	r4,r2
   15e1c:	014000b4 	movhi	r5,2
   15e20:	29670904 	addi	r5,r5,-25564
   15e24:	e1bffd17 	ldw	r6,-12(fp)
   15e28:	00181a40 	call	181a4 <sprintf>
   15e2c:	1007883a 	mov	r3,r2
   15e30:	e0bffc17 	ldw	r2,-16(fp)
   15e34:	10c5883a 	add	r2,r2,r3
   15e38:	e0bffc15 	stw	r2,-16(fp)
	{
		if (_cnt==0)
		{
			str = pRX_Status->logStr[pRX_Status->logInIdx];
			len  = sprintf(str, "#:\t");
			for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   15e3c:	e0bffd17 	ldw	r2,-12(fp)
   15e40:	10800044 	addi	r2,r2,1
   15e44:	e0bffd15 	stw	r2,-12(fp)
   15e48:	e0bffd17 	ldw	r2,-12(fp)
   15e4c:	10800110 	cmplti	r2,r2,4
   15e50:	103fb21e 	bne	r2,zero,15d1c <__alt_mem_onchip_memory_nios_arm+0xfffc5d1c>
				len += sprintf(&str[len], "pumpset%d:\t", i);
//				len += sprintf(&str[len], "pump%d:\t", i);
				len += sprintf(&str[len], "bleed%d:\t", i);
				len += sprintf(&str[len], "air%d:\t", i);
			}
			sprintf(&str[len], "\n");
   15e54:	e0bffc17 	ldw	r2,-16(fp)
   15e58:	e0fffe17 	ldw	r3,-8(fp)
   15e5c:	1885883a 	add	r2,r3,r2
   15e60:	00c00284 	movi	r3,10
   15e64:	10c00005 	stb	r3,0(r2)
   15e68:	10000045 	stb	zero,1(r2)
			pRX_Status->logInIdx = (pRX_Status->logInIdx+1) % LOG_STR_CNT;
   15e6c:	008000b4 	movhi	r2,2
   15e70:	10b11304 	addi	r2,r2,-15284
   15e74:	14000017 	ldw	r16,0(r2)
   15e78:	008000b4 	movhi	r2,2
   15e7c:	10b11304 	addi	r2,r2,-15284
   15e80:	10800017 	ldw	r2,0(r2)
   15e84:	10809517 	ldw	r2,596(r2)
   15e88:	10800044 	addi	r2,r2,1
   15e8c:	1009883a 	mov	r4,r2
   15e90:	01400c84 	movi	r5,50
   15e94:	00180f00 	call	180f0 <__umodsi3>
   15e98:	80809515 	stw	r2,596(r16)
		}

		str = pRX_Status->logStr[pRX_Status->logInIdx];
   15e9c:	008000b4 	movhi	r2,2
   15ea0:	10b11304 	addi	r2,r2,-15284
   15ea4:	10c00017 	ldw	r3,0(r2)
   15ea8:	008000b4 	movhi	r2,2
   15eac:	10b11304 	addi	r2,r2,-15284
   15eb0:	10800017 	ldw	r2,0(r2)
   15eb4:	10809517 	ldw	r2,596(r2)
   15eb8:	1004923a 	slli	r2,r2,8
   15ebc:	10809704 	addi	r2,r2,604
   15ec0:	1885883a 	add	r2,r3,r2
   15ec4:	e0bffe15 	stw	r2,-8(fp)
		len = sprintf(str, "%d\t", _cnt);
   15ec8:	d0a4db17 	ldw	r2,-27796(gp)
   15ecc:	e13ffe17 	ldw	r4,-8(fp)
   15ed0:	014000b4 	movhi	r5,2
   15ed4:	2966f904 	addi	r5,r5,-25628
   15ed8:	100d883a 	mov	r6,r2
   15edc:	00181a40 	call	181a4 <sprintf>
   15ee0:	e0bffc15 	stw	r2,-16(fp)
		for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   15ee4:	e03ffd15 	stw	zero,-12(fp)
   15ee8:	00007506 	br	160c0 <log_tick_10ms+0x434>
		{
			len += valstr(&str[len], pRX_Config->ink_supply[i].condPresIn);
   15eec:	e0bffc17 	ldw	r2,-16(fp)
   15ef0:	e0fffe17 	ldw	r3,-8(fp)
   15ef4:	1889883a 	add	r4,r3,r2
   15ef8:	008000b4 	movhi	r2,2
   15efc:	10b11404 	addi	r2,r2,-15280
   15f00:	10c00017 	ldw	r3,0(r2)
   15f04:	e0bffd17 	ldw	r2,-12(fp)
   15f08:	10801724 	muli	r2,r2,92
   15f0c:	10801404 	addi	r2,r2,80
   15f10:	1885883a 	add	r2,r3,r2
   15f14:	10800017 	ldw	r2,0(r2)
   15f18:	100b883a 	mov	r5,r2
   15f1c:	0015c240 	call	15c24 <valstr>
   15f20:	1007883a 	mov	r3,r2
   15f24:	e0bffc17 	ldw	r2,-16(fp)
   15f28:	10c5883a 	add	r2,r2,r3
   15f2c:	e0bffc15 	stw	r2,-16(fp)
			len += valstr(&str[len], pRX_Status->ink_supply[i].cylinderPresSet);
   15f30:	e0bffc17 	ldw	r2,-16(fp)
   15f34:	e0fffe17 	ldw	r3,-8(fp)
   15f38:	1889883a 	add	r4,r3,r2
   15f3c:	008000b4 	movhi	r2,2
   15f40:	10b11304 	addi	r2,r2,-15284
   15f44:	10c00017 	ldw	r3,0(r2)
   15f48:	e0bffd17 	ldw	r2,-12(fp)
   15f4c:	10801b24 	muli	r2,r2,108
   15f50:	10802e04 	addi	r2,r2,184
   15f54:	1885883a 	add	r2,r3,r2
   15f58:	10800017 	ldw	r2,0(r2)
   15f5c:	100b883a 	mov	r5,r2
   15f60:	0015c240 	call	15c24 <valstr>
   15f64:	1007883a 	mov	r3,r2
   15f68:	e0bffc17 	ldw	r2,-16(fp)
   15f6c:	10c5883a 	add	r2,r2,r3
   15f70:	e0bffc15 	stw	r2,-16(fp)
			len += valstr(&str[len], pRX_Status->ink_supply[i].IS_Pressure_Actual);
   15f74:	e0bffc17 	ldw	r2,-16(fp)
   15f78:	e0fffe17 	ldw	r3,-8(fp)
   15f7c:	1889883a 	add	r4,r3,r2
   15f80:	008000b4 	movhi	r2,2
   15f84:	10b11304 	addi	r2,r2,-15284
   15f88:	10c00017 	ldw	r3,0(r2)
   15f8c:	e0bffd17 	ldw	r2,-12(fp)
   15f90:	10801b24 	muli	r2,r2,108
   15f94:	10802f04 	addi	r2,r2,188
   15f98:	1885883a 	add	r2,r3,r2
   15f9c:	10800017 	ldw	r2,0(r2)
   15fa0:	100b883a 	mov	r5,r2
   15fa4:	0015c240 	call	15c24 <valstr>
   15fa8:	1007883a 	mov	r3,r2
   15fac:	e0bffc17 	ldw	r2,-16(fp)
   15fb0:	10c5883a 	add	r2,r2,r3
   15fb4:	e0bffc15 	stw	r2,-16(fp)
			len += valstr(&str[len], pRX_Status->ink_supply[i].inkPumpSpeed_set+110);
   15fb8:	e0bffc17 	ldw	r2,-16(fp)
   15fbc:	e0fffe17 	ldw	r3,-8(fp)
   15fc0:	1889883a 	add	r4,r3,r2
   15fc4:	008000b4 	movhi	r2,2
   15fc8:	10b11304 	addi	r2,r2,-15284
   15fcc:	10c00017 	ldw	r3,0(r2)
   15fd0:	e0bffd17 	ldw	r2,-12(fp)
   15fd4:	10801b24 	muli	r2,r2,108
   15fd8:	10802c04 	addi	r2,r2,176
   15fdc:	1885883a 	add	r2,r3,r2
   15fe0:	10800017 	ldw	r2,0(r2)
   15fe4:	10801b84 	addi	r2,r2,110
   15fe8:	100b883a 	mov	r5,r2
   15fec:	0015c240 	call	15c24 <valstr>
   15ff0:	1007883a 	mov	r3,r2
   15ff4:	e0bffc17 	ldw	r2,-16(fp)
   15ff8:	10c5883a 	add	r2,r2,r3
   15ffc:	e0bffc15 	stw	r2,-16(fp)
//			len += valstr(&str[len], pRX_Status->ink_supply[i].inkPumpSpeed_measured);
			len += sprintf(&str[len], "%d\t", pRX_Status->ink_supply[i].bleedValve);
   16000:	e0bffc17 	ldw	r2,-16(fp)
   16004:	e0fffe17 	ldw	r3,-8(fp)
   16008:	1889883a 	add	r4,r3,r2
   1600c:	008000b4 	movhi	r2,2
   16010:	10b11304 	addi	r2,r2,-15284
   16014:	10c00017 	ldw	r3,0(r2)
   16018:	e0bffd17 	ldw	r2,-12(fp)
   1601c:	10801b24 	muli	r2,r2,108
   16020:	10803904 	addi	r2,r2,228
   16024:	1885883a 	add	r2,r3,r2
   16028:	10800017 	ldw	r2,0(r2)
   1602c:	1080004c 	andi	r2,r2,1
   16030:	10803fcc 	andi	r2,r2,255
   16034:	014000b4 	movhi	r5,2
   16038:	2966f904 	addi	r5,r5,-25628
   1603c:	100d883a 	mov	r6,r2
   16040:	00181a40 	call	181a4 <sprintf>
   16044:	1007883a 	mov	r3,r2
   16048:	e0bffc17 	ldw	r2,-16(fp)
   1604c:	10c5883a 	add	r2,r2,r3
   16050:	e0bffc15 	stw	r2,-16(fp)
			len += sprintf(&str[len], "%d\t", pRX_Status->ink_supply[i].airValve*20+110);
   16054:	e0bffc17 	ldw	r2,-16(fp)
   16058:	e0fffe17 	ldw	r3,-8(fp)
   1605c:	1889883a 	add	r4,r3,r2
   16060:	008000b4 	movhi	r2,2
   16064:	10b11304 	addi	r2,r2,-15284
   16068:	10c00017 	ldw	r3,0(r2)
   1606c:	e0bffd17 	ldw	r2,-12(fp)
   16070:	10801b24 	muli	r2,r2,108
   16074:	10803904 	addi	r2,r2,228
   16078:	1885883a 	add	r2,r3,r2
   1607c:	10800017 	ldw	r2,0(r2)
   16080:	1004d07a 	srli	r2,r2,1
   16084:	1080004c 	andi	r2,r2,1
   16088:	10803fcc 	andi	r2,r2,255
   1608c:	10800524 	muli	r2,r2,20
   16090:	10801b84 	addi	r2,r2,110
   16094:	014000b4 	movhi	r5,2
   16098:	2966f904 	addi	r5,r5,-25628
   1609c:	100d883a 	mov	r6,r2
   160a0:	00181a40 	call	181a4 <sprintf>
   160a4:	1007883a 	mov	r3,r2
   160a8:	e0bffc17 	ldw	r2,-16(fp)
   160ac:	10c5883a 	add	r2,r2,r3
   160b0:	e0bffc15 	stw	r2,-16(fp)
			pRX_Status->logInIdx = (pRX_Status->logInIdx+1) % LOG_STR_CNT;
		}

		str = pRX_Status->logStr[pRX_Status->logInIdx];
		len = sprintf(str, "%d\t", _cnt);
		for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   160b4:	e0bffd17 	ldw	r2,-12(fp)
   160b8:	10800044 	addi	r2,r2,1
   160bc:	e0bffd15 	stw	r2,-12(fp)
   160c0:	e0bffd17 	ldw	r2,-12(fp)
   160c4:	10800110 	cmplti	r2,r2,4
   160c8:	103f881e 	bne	r2,zero,15eec <__alt_mem_onchip_memory_nios_arm+0xfffc5eec>
			len += valstr(&str[len], pRX_Status->ink_supply[i].inkPumpSpeed_set+110);
//			len += valstr(&str[len], pRX_Status->ink_supply[i].inkPumpSpeed_measured);
			len += sprintf(&str[len], "%d\t", pRX_Status->ink_supply[i].bleedValve);
			len += sprintf(&str[len], "%d\t", pRX_Status->ink_supply[i].airValve*20+110);
		}
		sprintf(&str[len], "\n");
   160cc:	e0bffc17 	ldw	r2,-16(fp)
   160d0:	e0fffe17 	ldw	r3,-8(fp)
   160d4:	1885883a 	add	r2,r3,r2
   160d8:	00c00284 	movi	r3,10
   160dc:	10c00005 	stb	r3,0(r2)
   160e0:	10000045 	stb	zero,1(r2)

		pRX_Status->logInIdx = (pRX_Status->logInIdx+1) % LOG_STR_CNT;
   160e4:	008000b4 	movhi	r2,2
   160e8:	10b11304 	addi	r2,r2,-15284
   160ec:	14000017 	ldw	r16,0(r2)
   160f0:	008000b4 	movhi	r2,2
   160f4:	10b11304 	addi	r2,r2,-15284
   160f8:	10800017 	ldw	r2,0(r2)
   160fc:	10809517 	ldw	r2,596(r2)
   16100:	10800044 	addi	r2,r2,1
   16104:	1009883a 	mov	r4,r2
   16108:	01400c84 	movi	r5,50
   1610c:	00180f00 	call	180f0 <__umodsi3>
   16110:	80809515 	stw	r2,596(r16)
		_cnt++;
   16114:	d0a4db17 	ldw	r2,-27796(gp)
   16118:	10800044 	addi	r2,r2,1
   1611c:	d0a4db15 	stw	r2,-27796(gp)
   16120:	00000106 	br	16128 <log_tick_10ms+0x49c>
	}
	else _cnt=FALSE;
   16124:	d024db15 	stw	zero,-27796(gp)
}
   16128:	e6ffff04 	addi	sp,fp,-4
   1612c:	dfc00217 	ldw	ra,8(sp)
   16130:	df000117 	ldw	fp,4(sp)
   16134:	dc000017 	ldw	r16,0(sp)
   16138:	dec00304 	addi	sp,sp,12
   1613c:	f800283a 	ret

00016140 <_delay>:
static UINT32	_StaticErrors;
static UINT32	_Watchdog_ok;

//--- _delay ----------------------------------
static void _delay(void)
{
   16140:	defffe04 	addi	sp,sp,-8
   16144:	df000115 	stw	fp,4(sp)
   16148:	df000104 	addi	fp,sp,4
	UINT32 i;

	for(i = 0; i < 6000; i++)
   1614c:	e03fff15 	stw	zero,-4(fp)
   16150:	00000306 	br	16160 <_delay+0x20>
   16154:	e0bfff17 	ldw	r2,-4(fp)
   16158:	10800044 	addi	r2,r2,1
   1615c:	e0bfff15 	stw	r2,-4(fp)
   16160:	e0bfff17 	ldw	r2,-4(fp)
   16164:	1085dc30 	cmpltui	r2,r2,6000
   16168:	103ffa1e 	bne	r2,zero,16154 <__alt_mem_onchip_memory_nios_arm+0xfffc6154>
		;
}
   1616c:	e037883a 	mov	sp,fp
   16170:	df000017 	ldw	fp,0(sp)
   16174:	dec00104 	addi	sp,sp,4
   16178:	f800283a 	ret

0001617c <main_error_reset>:

//--- main_error_reset ------------------------------
void main_error_reset(void)
{
   1617c:	defffd04 	addi	sp,sp,-12
   16180:	dfc00215 	stw	ra,8(sp)
   16184:	df000115 	stw	fp,4(sp)
   16188:	df000104 	addi	fp,sp,4
	int i;
	pRX_Status->error = _StaticErrors;
   1618c:	d0a4de17 	ldw	r2,-27784(gp)
   16190:	d0e4dc17 	ldw	r3,-27792(gp)
   16194:	10c00915 	stw	r3,36(r2)

	for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   16198:	e03fff15 	stw	zero,-4(fp)
   1619c:	00000906 	br	161c4 <main_error_reset+0x48>
		pRX_Status->ink_supply[i].error = 0;
   161a0:	d0e4de17 	ldw	r3,-27784(gp)
   161a4:	e0bfff17 	ldw	r2,-4(fp)
   161a8:	10801b24 	muli	r2,r2,108
   161ac:	10802904 	addi	r2,r2,164
   161b0:	1885883a 	add	r2,r3,r2
   161b4:	10000015 	stw	zero,0(r2)
void main_error_reset(void)
{
	int i;
	pRX_Status->error = _StaticErrors;

	for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   161b8:	e0bfff17 	ldw	r2,-4(fp)
   161bc:	10800044 	addi	r2,r2,1
   161c0:	e0bfff15 	stw	r2,-4(fp)
   161c4:	e0bfff17 	ldw	r2,-4(fp)
   161c8:	10800110 	cmplti	r2,r2,4
   161cc:	103ff41e 	bne	r2,zero,161a0 <__alt_mem_onchip_memory_nios_arm+0xfffc61a0>
		pRX_Status->ink_supply[i].error = 0;

	// re-initialize SPI after error to be able to read temperature
	init_AMC7891(AVALON_SPI_AMC7891_1_BASE);
   161d0:	01004004 	movi	r4,256
   161d4:	00101c80 	call	101c8 <init_AMC7891>
	_Watchdog_ok = IORD_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, WATCHDOG_ERR);
   161d8:	008000b4 	movhi	r2,2
   161dc:	10801604 	addi	r2,r2,88
   161e0:	10800037 	ldwio	r2,0(r2)
   161e4:	d0a4dd15 	stw	r2,-27788(gp)
	//init_AMC7891(AXI_LW_SLAVE_REGISTER_0_BASE);
}
   161e8:	e037883a 	mov	sp,fp
   161ec:	dfc00117 	ldw	ra,4(sp)
   161f0:	df000017 	ldw	fp,0(sp)
   161f4:	dec00204 	addi	sp,sp,8
   161f8:	f800283a 	ret

000161fc <main>:

//--- main --------------------------
int main()
{
   161fc:	defffb04 	addi	sp,sp,-20
   16200:	dfc00415 	stw	ra,16(sp)
   16204:	df000315 	stw	fp,12(sp)
   16208:	df000304 	addi	fp,sp,12

	// _DEBUG must only be enabled when downloading through hardware debugger.
	// Otherwise modes (PRINT, OFF, ..) do not work correctly
	// tr_debug();

	arm_ptr	= (SNiosFluidMemory *) ONCHIP_MEMORY_NIOS_ARM_BASE;
   1620c:	00800174 	movhi	r2,5
   16210:	e0bfff15 	stw	r2,-4(fp)
	pRX_Status = &arm_ptr->stat;
   16214:	e0bfff17 	ldw	r2,-4(fp)
   16218:	d0a4de15 	stw	r2,-27784(gp)
	pRX_Config = &arm_ptr->cfg;
   1621c:	e0bfff17 	ldw	r2,-4(fp)
   16220:	10900004 	addi	r2,r2,16384
   16224:	d0a4df15 	stw	r2,-27780(gp)

	memset(pRX_Status, 0, sizeof(*pRX_Status));
   16228:	d0a4de17 	ldw	r2,-27784(gp)
   1622c:	1009883a 	mov	r4,r2
   16230:	000b883a 	mov	r5,zero
   16234:	018d1b04 	movi	r6,13420
   16238:	00181200 	call	18120 <memset>
	memset(pRX_Config, 0, sizeof(*pRX_Config));
   1623c:	d0a4df17 	ldw	r2,-27780(gp)
   16240:	1009883a 	mov	r4,r2
   16244:	000b883a 	mov	r5,zero
   16248:	01806404 	movi	r6,400
   1624c:	00181200 	call	18120 <memset>
	pRX_Status->info.is_shutdown = 0;
   16250:	d0a4de17 	ldw	r2,-27784(gp)
   16254:	11000817 	ldw	r4,32(r2)
   16258:	00ffff84 	movi	r3,-2
   1625c:	20c6703a 	and	r3,r4,r3
   16260:	10c00815 	stw	r3,32(r2)

	//--- FPGA Version -------------------------------------------------
	pRX_Status->FpgaVersion.major 		= IORD_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, 0x00);
   16264:	d0a4de17 	ldw	r2,-27784(gp)
   16268:	00c000b4 	movhi	r3,2
   1626c:	18c00037 	ldwio	r3,0(r3)
   16270:	10c00415 	stw	r3,16(r2)
	pRX_Status->FpgaVersion.minor 		= IORD_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, 0x04);
   16274:	d0e4de17 	ldw	r3,-27784(gp)
   16278:	008000b4 	movhi	r2,2
   1627c:	10800104 	addi	r2,r2,4
   16280:	10800037 	ldwio	r2,0(r2)
   16284:	18800515 	stw	r2,20(r3)
	pRX_Status->FpgaVersion.revision 	= IORD_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, 0x08);
   16288:	d0e4de17 	ldw	r3,-27784(gp)
   1628c:	008000b4 	movhi	r2,2
   16290:	10800204 	addi	r2,r2,8
   16294:	10800037 	ldwio	r2,0(r2)
   16298:	18800615 	stw	r2,24(r3)
	pRX_Status->FpgaVersion.build 		= IORD_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, 0x0c);
   1629c:	d0e4de17 	ldw	r3,-27784(gp)
   162a0:	008000b4 	movhi	r2,2
   162a4:	10800304 	addi	r2,r2,12
   162a8:	10800037 	ldwio	r2,0(r2)
   162ac:	18800715 	stw	r2,28(r3)

	//--- check QSYS-ID and Timestamp ----------------------------------
	pRX_Status->qsys_id  		= SYSID_ID;
   162b0:	d0a4de17 	ldw	r2,-27784(gp)
   162b4:	00c00184 	movi	r3,6
   162b8:	10c00a15 	stw	r3,40(r2)
	pRX_Status->qsys_timestamp 	= SYSID_TIMESTAMP;
   162bc:	d0e4de17 	ldw	r3,-27784(gp)
   162c0:	0096dff4 	movhi	r2,23423
   162c4:	10aaf3c4 	addi	r2,r2,-21553
   162c8:	18800b15 	stw	r2,44(r3)

	if (alt_avalon_sysid_qsys_test())
   162cc:	00195f00 	call	195f0 <alt_avalon_sysid_qsys_test>
   162d0:	10000526 	beq	r2,zero,162e8 <main+0xec>
		pRX_Status->error |= err_fpga_incompatible;
   162d4:	d0a4de17 	ldw	r2,-27784(gp)
   162d8:	d0e4de17 	ldw	r3,-27784(gp)
   162dc:	18c00917 	ldw	r3,36(r3)
   162e0:	18c00214 	ori	r3,r3,8
   162e4:	10c00915 	stw	r3,36(r2)

	//--- NIOS Version -------------------------------------------------
	get_version(&pRX_Status->version);
   162e8:	d0a4de17 	ldw	r2,-27784(gp)
   162ec:	1009883a 	mov	r4,r2
   162f0:	00178400 	call	17840 <get_version>
	
	for(i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   162f4:	e03ffd15 	stw	zero,-12(fp)
   162f8:	00001206 	br	16344 <main+0x148>
	{
		pRX_Config->ink_supply[i].ctrl_mode = ctrl_off;
   162fc:	d0e4df17 	ldw	r3,-27780(gp)
   16300:	e0bffd17 	ldw	r2,-12(fp)
   16304:	10801724 	muli	r2,r2,92
   16308:	10800904 	addi	r2,r2,36
   1630c:	1885883a 	add	r2,r3,r2
   16310:	00c00104 	movi	r3,4
   16314:	10c00015 	stw	r3,0(r2)
		pRX_Config->ink_supply[i].condPresIn = INVALID_VALUE;
   16318:	d0e4df17 	ldw	r3,-27780(gp)
   1631c:	e0bffd17 	ldw	r2,-12(fp)
   16320:	10801724 	muli	r2,r2,92
   16324:	10801404 	addi	r2,r2,80
   16328:	1887883a 	add	r3,r3,r2
   1632c:	009555b4 	movhi	r2,21846
   16330:	10aaaa84 	addi	r2,r2,-21846
   16334:	18800015 	stw	r2,0(r3)
		pRX_Status->error |= err_fpga_incompatible;

	//--- NIOS Version -------------------------------------------------
	get_version(&pRX_Status->version);
	
	for(i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   16338:	e0bffd17 	ldw	r2,-12(fp)
   1633c:	10800044 	addi	r2,r2,1
   16340:	e0bffd15 	stw	r2,-12(fp)
   16344:	e0bffd17 	ldw	r2,-12(fp)
   16348:	10800110 	cmplti	r2,r2,4
   1634c:	103feb1e 	bne	r2,zero,162fc <__alt_mem_onchip_memory_nios_arm+0xfffc62fc>
	{
		pRX_Config->ink_supply[i].ctrl_mode = ctrl_off;
		pRX_Config->ink_supply[i].condPresIn = INVALID_VALUE;
	}

	IOWR_ALTERA_AVALON_PIO_DATA    (PIO_OUTPUT_BASE,	0x0000);				// All output off
   16350:	0007883a 	mov	r3,zero
   16354:	00800804 	movi	r2,32
   16358:	10c00035 	stwio	r3,0(r2)

	// PWM Initialisation
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE,	SENSOR_POWER_ENABLE);	// 24V Enable
   1635c:	00c00084 	movi	r3,2
   16360:	00800c04 	movi	r2,48
   16364:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(FLUSH_PUMP_PWM_DUTY_CYCLE_BASE,	0x0000);		// PWM OFF
   16368:	0007883a 	mov	r3,zero
   1636c:	00803404 	movi	r2,208
   16370:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(FLUSH_PUMP_PWM_FREQ_BASE,		0x1000);		// PWM OFF
   16374:	00c40004 	movi	r3,4096
   16378:	00803004 	movi	r2,192
   1637c:	10c00035 	stwio	r3,0(r2)

	// I2C initialisation
	init_I2C(I2C_MASTER_IS1_BASE);	// IS Adapter 1
   16380:	01002c04 	movi	r4,176
   16384:	0011b1c0 	call	11b1c <init_I2C>
	init_I2C(I2C_MASTER_IS2_BASE);	// IS Adapter 2
   16388:	01002a04 	movi	r4,168
   1638c:	0011b1c0 	call	11b1c <init_I2C>
	init_I2C(I2C_MASTER_IS3_BASE);	// IS Adapter 3
   16390:	01002804 	movi	r4,160
   16394:	0011b1c0 	call	11b1c <init_I2C>
	init_I2C(I2C_MASTER_IS4_BASE);	// IS Adapter 4
   16398:	01002604 	movi	r4,152
   1639c:	0011b1c0 	call	11b1c <init_I2C>
	init_I2C(I2C_MASTER_F_BASE);	// Flush
   163a0:	01002204 	movi	r4,136
   163a4:	0011b1c0 	call	11b1c <init_I2C>
	init_I2C(I2C_MASTER_D_BASE);	// Pressure
   163a8:	01002404 	movi	r4,144
   163ac:	0011b1c0 	call	11b1c <init_I2C>
	init_I2C(I2C_MASTER_P_BASE);	// Vacuum
   163b0:	01002004 	movi	r4,128
   163b4:	0011b1c0 	call	11b1c <init_I2C>

	// Analog monitor initialisation FluidBoard
	for(retry=0; (init_AMC7891(AVALON2FPGA_SLAVE_0_BASE)!=0) && (retry<RETRY); retry++)
   163b8:	e03ffe15 	stw	zero,-8(fp)
   163bc:	00000406 	br	163d0 <main+0x1d4>
		_delay();
   163c0:	00161400 	call	16140 <_delay>
	init_I2C(I2C_MASTER_F_BASE);	// Flush
	init_I2C(I2C_MASTER_D_BASE);	// Pressure
	init_I2C(I2C_MASTER_P_BASE);	// Vacuum

	// Analog monitor initialisation FluidBoard
	for(retry=0; (init_AMC7891(AVALON2FPGA_SLAVE_0_BASE)!=0) && (retry<RETRY); retry++)
   163c4:	e0bffe17 	ldw	r2,-8(fp)
   163c8:	10800044 	addi	r2,r2,1
   163cc:	e0bffe15 	stw	r2,-8(fp)
   163d0:	01008004 	movi	r4,512
   163d4:	00101c80 	call	101c8 <init_AMC7891>
   163d8:	10000326 	beq	r2,zero,163e8 <main+0x1ec>
   163dc:	008000c4 	movi	r2,3
   163e0:	e0fffe17 	ldw	r3,-8(fp)
   163e4:	18bff616 	blt	r3,r2,163c0 <__alt_mem_onchip_memory_nios_arm+0xfffc63c0>
		_delay();

	if(retry>=RETRY) pRX_Status->error |= err_amc_fluid;
   163e8:	008000c4 	movi	r2,3
   163ec:	e0fffe17 	ldw	r3,-8(fp)
   163f0:	18800516 	blt	r3,r2,16408 <main+0x20c>
   163f4:	d0a4de17 	ldw	r2,-27784(gp)
   163f8:	d0e4de17 	ldw	r3,-27784(gp)
   163fc:	18c00917 	ldw	r3,36(r3)
   16400:	18c00414 	ori	r3,r3,16
   16404:	10c00915 	stw	r3,36(r2)

	// Analog monitor initialisation HeaterBoard
	for(retry=0; (init_AMC7891(AVALON_SPI_AMC7891_1_BASE)!=0) && (retry<RETRY); retry++)
   16408:	e03ffe15 	stw	zero,-8(fp)
   1640c:	00000406 	br	16420 <main+0x224>
	//for(retry=0; (init_AMC7891(AXI_LW_SLAVE_REGISTER_0_BASE)!=0) && (retry<RETRY); retry++)
		_delay();
   16410:	00161400 	call	16140 <_delay>
		_delay();

	if(retry>=RETRY) pRX_Status->error |= err_amc_fluid;

	// Analog monitor initialisation HeaterBoard
	for(retry=0; (init_AMC7891(AVALON_SPI_AMC7891_1_BASE)!=0) && (retry<RETRY); retry++)
   16414:	e0bffe17 	ldw	r2,-8(fp)
   16418:	10800044 	addi	r2,r2,1
   1641c:	e0bffe15 	stw	r2,-8(fp)
   16420:	01004004 	movi	r4,256
   16424:	00101c80 	call	101c8 <init_AMC7891>
   16428:	10000326 	beq	r2,zero,16438 <main+0x23c>
   1642c:	008000c4 	movi	r2,3
   16430:	e0fffe17 	ldw	r3,-8(fp)
   16434:	18bff616 	blt	r3,r2,16410 <__alt_mem_onchip_memory_nios_arm+0xfffc6410>
	//for(retry=0; (init_AMC7891(AXI_LW_SLAVE_REGISTER_0_BASE)!=0) && (retry<RETRY); retry++)
		_delay();

	if(retry>=RETRY) pRX_Status->error |= err_amc_heater;
   16438:	008000c4 	movi	r2,3
   1643c:	e0fffe17 	ldw	r3,-8(fp)
   16440:	18800616 	blt	r3,r2,1645c <main+0x260>
   16444:	d0a4de17 	ldw	r2,-27784(gp)
   16448:	d0e4de17 	ldw	r3,-27784(gp)
   1644c:	18c00917 	ldw	r3,36(r3)
   16450:	18c00814 	ori	r3,r3,32
   16454:	10c00915 	stw	r3,36(r2)
   16458:	00000106 	br	16460 <main+0x264>
	else			 heater_init();
   1645c:	0010f940 	call	10f94 <heater_init>

	//todo if no heater board is connected on purpose there should *NOT* be an error!

	// PT100 ADC initialisation
	init_MAX31865();
   16460:	00103ac0 	call	103ac <init_MAX31865>

	// SPI Board 1
	IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, DAC_REG_0, 0x0000);	// Pumpe IS1
   16464:	0007883a 	mov	r3,zero
   16468:	008000b4 	movhi	r2,2
   1646c:	10840104 	addi	r2,r2,4100
   16470:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, DAC_REG_1, 0x0000);	// Pumpe IS2
   16474:	0007883a 	mov	r3,zero
   16478:	008000b4 	movhi	r2,2
   1647c:	10840204 	addi	r2,r2,4104
   16480:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, DAC_REG_2, 0x0000);	// Pumpe IS3
   16484:	0007883a 	mov	r3,zero
   16488:	008000b4 	movhi	r2,2
   1648c:	10840304 	addi	r2,r2,4108
   16490:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, DAC_REG_3, 0x0000);	// Pumpe IS4
   16494:	0007883a 	mov	r3,zero
   16498:	008000b4 	movhi	r2,2
   1649c:	10840404 	addi	r2,r2,4112
   164a0:	10c0002d 	sthio	r3,0(r2)

	// Watchdog
	IOWR_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, WATCHDOG_FREQ, WATCHDOG_PERIOD_10MS);
   164a4:	00d86a04 	movi	r3,25000
   164a8:	008000b4 	movhi	r2,2
   164ac:	10840f04 	addi	r2,r2,4156
   164b0:	10c00035 	stwio	r3,0(r2)

	pres_init();
   164b4:	00166e80 	call	166e8 <pres_init>
	ink_init();
   164b8:	0011bac0 	call	11bac <ink_init>
	timer_init();
   164bc:	00176cc0 	call	176cc <timer_init>
	log_init();
   164c0:	0015be80 	call	15be8 <log_init>

	// turn on output for chiller
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE, CHILLER_OUT);
   164c4:	00c80004 	movi	r3,8192
   164c8:	00800c04 	movi	r2,48
   164cc:	10c00035 	stwio	r3,0(r2)

	_StaticErrors = pRX_Status->error;
   164d0:	d0a4de17 	ldw	r2,-27784(gp)
   164d4:	10800917 	ldw	r2,36(r2)
   164d8:	d0a4dc15 	stw	r2,-27792(gp)

	// turn off LEDs
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE, FPGA_LED_1_OUT);
   164dc:	00d00004 	movi	r3,16384
   164e0:	00800c04 	movi	r2,48
   164e4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE, FPGA_LED_2_OUT);
   164e8:	00e00014 	movui	r3,32768
   164ec:	00800c04 	movi	r2,48
   164f0:	10c00035 	stwio	r3,0(r2)

	IOWR_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, WATCHDOG_CNT, (WATCHDOG_OUTPUT_MASK | WATCHDOG_RELOAD_VALUE));
   164f4:	00c20074 	movhi	r3,2049
   164f8:	18ffffc4 	addi	r3,r3,-1
   164fc:	008000b4 	movhi	r2,2
   16500:	10841004 	addi	r2,r2,4160
   16504:	10c00035 	stwio	r3,0(r2)
	_Watchdog_ok = IORD_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, WATCHDOG_ERR);
   16508:	008000b4 	movhi	r2,2
   1650c:	10801604 	addi	r2,r2,88
   16510:	10800037 	ldwio	r2,0(r2)
   16514:	d0a4dd15 	stw	r2,-27788(gp)
	// Event loop never exits
	while (1)
	{
		// reload watchdog
		if (tr_debug_on())
   16518:	00177bc0 	call	177bc <tr_debug_on>
   1651c:	10000426 	beq	r2,zero,16530 <main+0x334>
			IOWR_ALTERA_AVALON_PIO_DATA(PIO_WATCHDOG_CNT_BASE, 0xffffffff);	// bit 31 set -> watchdog automatically reloaded
   16520:	00ffffc4 	movi	r3,-1
   16524:	0080d804 	movi	r2,864
   16528:	10c00035 	stwio	r3,0(r2)
   1652c:	00000506 	br	16544 <main+0x348>
		else
			IOWR_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, WATCHDOG_CNT, (WATCHDOG_OUTPUT_MASK | WATCHDOG_RELOAD_VALUE));
   16530:	00c20074 	movhi	r3,2049
   16534:	18ffffc4 	addi	r3,r3,-1
   16538:	008000b4 	movhi	r2,2
   1653c:	10841004 	addi	r2,r2,4160
   16540:	10c00035 	stwio	r3,0(r2)

		if (IORD_32DIRECT(AXI_LW_SLAVE_REGISTER_0_BASE, WATCHDOG_ERR)!=_Watchdog_ok)
   16544:	008000b4 	movhi	r2,2
   16548:	10801604 	addi	r2,r2,88
   1654c:	10800037 	ldwio	r2,0(r2)
   16550:	1007883a 	mov	r3,r2
   16554:	d0a4dd17 	ldw	r2,-27788(gp)
   16558:	18800526 	beq	r3,r2,16570 <main+0x374>
			pRX_Status->error |= err_watchdog;
   1655c:	d0a4de17 	ldw	r2,-27784(gp)
   16560:	d0e4de17 	ldw	r3,-27784(gp)
   16564:	18c00917 	ldw	r3,36(r3)
   16568:	18c04014 	ori	r3,r3,256
   1656c:	10c00915 	stw	r3,36(r2)

		timer_main();
   16570:	00172900 	call	17290 <timer_main>
	}
   16574:	003fe806 	br	16518 <__alt_mem_onchip_memory_nios_arm+0xfffc6518>

00016578 <pid_reset>:
/******************************************************************************/

#include "pid.h"

void pid_reset(SPID_par* pPID)
{
   16578:	defffe04 	addi	sp,sp,-8
   1657c:	df000115 	stw	fp,4(sp)
   16580:	df000104 	addi	fp,sp,4
   16584:	e13fff15 	stw	r4,-4(fp)
	pPID->diff_I = 0;
   16588:	e0bfff17 	ldw	r2,-4(fp)
   1658c:	10000715 	stw	zero,28(r2)
}
   16590:	e037883a 	mov	sp,fp
   16594:	df000017 	ldw	fp,0(sp)
   16598:	dec00104 	addi	sp,sp,4
   1659c:	f800283a 	ret

000165a0 <pid_calc>:
 ** \param [in] setVal target value
 ** \param [in] pPID   Pointer to PID instance
 ** 
 ******************************************************************************/
void pid_calc(const INT32 actVal, SPID_par* pPID)
{
   165a0:	defff904 	addi	sp,sp,-28
   165a4:	dfc00615 	stw	ra,24(sp)
   165a8:	df000515 	stw	fp,20(sp)
   165ac:	dc000415 	stw	r16,16(sp)
   165b0:	df000504 	addi	fp,sp,20
   165b4:	e13ffd15 	stw	r4,-12(fp)
   165b8:	e17ffe15 	stw	r5,-8(fp)
	INT32 diff;
	INT32 val;
	
	// check fo valid values
	if (actVal == INVALID_VALUE) diff = 0;
   165bc:	e0fffd17 	ldw	r3,-12(fp)
   165c0:	009555b4 	movhi	r2,21846
   165c4:	10aaaa84 	addi	r2,r2,-21846
   165c8:	1880021e 	bne	r3,r2,165d4 <pid_calc+0x34>
   165cc:	e03ffb15 	stw	zero,-20(fp)
   165d0:	00000506 	br	165e8 <pid_calc+0x48>
	else diff = pPID->Setpoint - actVal;
   165d4:	e0bffe17 	ldw	r2,-8(fp)
   165d8:	10c00017 	ldw	r3,0(r2)
   165dc:	e0bffd17 	ldw	r2,-12(fp)
   165e0:	1885c83a 	sub	r2,r3,r2
   165e4:	e0bffb15 	stw	r2,-20(fp)

	if ((pPID->I > 0)&&(pPID->Start_Integrator))
   165e8:	e0bffe17 	ldw	r2,-8(fp)
   165ec:	10800217 	ldw	r2,8(r2)
   165f0:	0080110e 	bge	zero,r2,16638 <pid_calc+0x98>
   165f4:	e0bffe17 	ldw	r2,-8(fp)
   165f8:	10800617 	ldw	r2,24(r2)
   165fc:	10000e26 	beq	r2,zero,16638 <pid_calc+0x98>
    {
        // start integrating after timeout as in ramp up I value runs into anti windup
        if (pPID->val < pPID->val_max) pPID->diff_I += (diff * 10);
   16600:	e0bffe17 	ldw	r2,-8(fp)
   16604:	10c00317 	ldw	r3,12(r2)
   16608:	e0bffe17 	ldw	r2,-8(fp)
   1660c:	10800517 	ldw	r2,20(r2)
   16610:	1880080e 	bge	r3,r2,16634 <pid_calc+0x94>
   16614:	e0bffe17 	ldw	r2,-8(fp)
   16618:	10c00717 	ldw	r3,28(r2)
   1661c:	e0bffb17 	ldw	r2,-20(fp)
   16620:	108002a4 	muli	r2,r2,10
   16624:	1887883a 	add	r3,r3,r2
   16628:	e0bffe17 	ldw	r2,-8(fp)
   1662c:	10c00715 	stw	r3,28(r2)
   16630:	00000306 	br	16640 <pid_calc+0xa0>
   16634:	00000206 	br	16640 <pid_calc+0xa0>
    }
	else pPID->diff_I = 0;
   16638:	e0bffe17 	ldw	r2,-8(fp)
   1663c:	10000715 	stw	zero,28(r2)

	// pid function
	val = pPID->P * (diff + (pPID->diff_I / pPID->I));  // + (pPID->D * (diff - pPID->diff_old)));
   16640:	e0bffe17 	ldw	r2,-8(fp)
   16644:	14000117 	ldw	r16,4(r2)
   16648:	e0bffe17 	ldw	r2,-8(fp)
   1664c:	10c00717 	ldw	r3,28(r2)
   16650:	e0bffe17 	ldw	r2,-8(fp)
   16654:	10800217 	ldw	r2,8(r2)
   16658:	1809883a 	mov	r4,r3
   1665c:	100b883a 	mov	r5,r2
   16660:	00180380 	call	18038 <__divsi3>
   16664:	1007883a 	mov	r3,r2
   16668:	e0bffb17 	ldw	r2,-20(fp)
   1666c:	1885883a 	add	r2,r3,r2
   16670:	8085383a 	mul	r2,r16,r2
   16674:	e0bffc15 	stw	r2,-16(fp)
	val /= 1000;
   16678:	e0bffc17 	ldw	r2,-16(fp)
   1667c:	1009883a 	mov	r4,r2
   16680:	0140fa04 	movi	r5,1000
   16684:	00180380 	call	18038 <__divsi3>
   16688:	e0bffc15 	stw	r2,-16(fp)

	// check boundries
	if (val < pPID->val_min)	val = pPID->val_min;
   1668c:	e0bffe17 	ldw	r2,-8(fp)
   16690:	10800417 	ldw	r2,16(r2)
   16694:	e0fffc17 	ldw	r3,-16(fp)
   16698:	1880030e 	bge	r3,r2,166a8 <pid_calc+0x108>
   1669c:	e0bffe17 	ldw	r2,-8(fp)
   166a0:	10800417 	ldw	r2,16(r2)
   166a4:	e0bffc15 	stw	r2,-16(fp)
	if (val > pPID->val_max)	val = pPID->val_max;
   166a8:	e0bffe17 	ldw	r2,-8(fp)
   166ac:	10c00517 	ldw	r3,20(r2)
   166b0:	e0bffc17 	ldw	r2,-16(fp)
   166b4:	1880030e 	bge	r3,r2,166c4 <pid_calc+0x124>
   166b8:	e0bffe17 	ldw	r2,-8(fp)
   166bc:	10800517 	ldw	r2,20(r2)
   166c0:	e0bffc15 	stw	r2,-16(fp)

	// set values
	pPID->val = val;
   166c4:	e0bffe17 	ldw	r2,-8(fp)
   166c8:	e0fffc17 	ldw	r3,-16(fp)
   166cc:	10c00315 	stw	r3,12(r2)
}
   166d0:	e6ffff04 	addi	sp,fp,-4
   166d4:	dfc00217 	ldw	ra,8(sp)
   166d8:	df000117 	ldw	fp,4(sp)
   166dc:	dc000017 	ldw	r16,0(sp)
   166e0:	dec00304 	addi	sp,sp,12
   166e4:	f800283a 	ret

000166e8 <pres_init>:
static void _i2c_wait_time(void);


//--- pres_init -----------------------
void pres_init(void)
{
   166e8:	defffd04 	addi	sp,sp,-12
   166ec:	dfc00215 	stw	ra,8(sp)
   166f0:	df000115 	stw	fp,4(sp)
   166f4:	df000104 	addi	fp,sp,4
	int i;
	memset(_Sensor, 0, sizeof(_Sensor));
   166f8:	010000b4 	movhi	r4,2
   166fc:	21359104 	addi	r4,r4,-10684
   16700:	000b883a 	mov	r5,zero
   16704:	01805404 	movi	r6,336
   16708:	00181200 	call	18120 <memset>

	_Sensor[IS1_SENSOR].i2c 		= I2C_MASTER_IS1_BASE;
   1670c:	008000b4 	movhi	r2,2
   16710:	10b59104 	addi	r2,r2,-10684
   16714:	00c02c04 	movi	r3,176
   16718:	10c00015 	stw	r3,0(r2)
	_Sensor[IS1_SENSOR].pSensorID 	= &pRX_Status->ink_supply[0].sensorID;
   1671c:	008000b4 	movhi	r2,2
   16720:	10b11304 	addi	r2,r2,-15284
   16724:	10800017 	ldw	r2,0(r2)
   16728:	10c02b04 	addi	r3,r2,172
   1672c:	008000b4 	movhi	r2,2
   16730:	10b59104 	addi	r2,r2,-10684
   16734:	10c00115 	stw	r3,4(r2)
	_Sensor[IS1_SENSOR].pPressure 	= &pRX_Status->ink_supply[0].IS_Pressure_Actual;
   16738:	008000b4 	movhi	r2,2
   1673c:	10b11304 	addi	r2,r2,-15284
   16740:	10800017 	ldw	r2,0(r2)
   16744:	10c02f04 	addi	r3,r2,188
   16748:	008000b4 	movhi	r2,2
   1674c:	10b59104 	addi	r2,r2,-10684
   16750:	10c00215 	stw	r3,8(r2)

	_Sensor[IS2_SENSOR].i2c 		= I2C_MASTER_IS2_BASE;
   16754:	008000b4 	movhi	r2,2
   16758:	10b59104 	addi	r2,r2,-10684
   1675c:	00c02a04 	movi	r3,168
   16760:	10c00c15 	stw	r3,48(r2)
	_Sensor[IS2_SENSOR].pSensorID 	= &pRX_Status->ink_supply[1].sensorID;
   16764:	008000b4 	movhi	r2,2
   16768:	10b11304 	addi	r2,r2,-15284
   1676c:	10800017 	ldw	r2,0(r2)
   16770:	10c04604 	addi	r3,r2,280
   16774:	008000b4 	movhi	r2,2
   16778:	10b59104 	addi	r2,r2,-10684
   1677c:	10c00d15 	stw	r3,52(r2)
	_Sensor[IS2_SENSOR].pPressure 	= &pRX_Status->ink_supply[1].IS_Pressure_Actual;
   16780:	008000b4 	movhi	r2,2
   16784:	10b11304 	addi	r2,r2,-15284
   16788:	10800017 	ldw	r2,0(r2)
   1678c:	10c04a04 	addi	r3,r2,296
   16790:	008000b4 	movhi	r2,2
   16794:	10b59104 	addi	r2,r2,-10684
   16798:	10c00e15 	stw	r3,56(r2)

	_Sensor[IS3_SENSOR].i2c 		= I2C_MASTER_IS3_BASE;
   1679c:	008000b4 	movhi	r2,2
   167a0:	10b59104 	addi	r2,r2,-10684
   167a4:	00c02804 	movi	r3,160
   167a8:	10c01815 	stw	r3,96(r2)
	_Sensor[IS3_SENSOR].pSensorID 	= &pRX_Status->ink_supply[2].sensorID;
   167ac:	008000b4 	movhi	r2,2
   167b0:	10b11304 	addi	r2,r2,-15284
   167b4:	10800017 	ldw	r2,0(r2)
   167b8:	10c06104 	addi	r3,r2,388
   167bc:	008000b4 	movhi	r2,2
   167c0:	10b59104 	addi	r2,r2,-10684
   167c4:	10c01915 	stw	r3,100(r2)
	_Sensor[IS3_SENSOR].pPressure 	= &pRX_Status->ink_supply[2].IS_Pressure_Actual;
   167c8:	008000b4 	movhi	r2,2
   167cc:	10b11304 	addi	r2,r2,-15284
   167d0:	10800017 	ldw	r2,0(r2)
   167d4:	10c06504 	addi	r3,r2,404
   167d8:	008000b4 	movhi	r2,2
   167dc:	10b59104 	addi	r2,r2,-10684
   167e0:	10c01a15 	stw	r3,104(r2)

	_Sensor[IS4_SENSOR].i2c 		= I2C_MASTER_IS4_BASE;
   167e4:	008000b4 	movhi	r2,2
   167e8:	10b59104 	addi	r2,r2,-10684
   167ec:	00c02604 	movi	r3,152
   167f0:	10c02415 	stw	r3,144(r2)
	_Sensor[IS4_SENSOR].pSensorID 	= &pRX_Status->ink_supply[3].sensorID;
   167f4:	008000b4 	movhi	r2,2
   167f8:	10b11304 	addi	r2,r2,-15284
   167fc:	10800017 	ldw	r2,0(r2)
   16800:	10c07c04 	addi	r3,r2,496
   16804:	008000b4 	movhi	r2,2
   16808:	10b59104 	addi	r2,r2,-10684
   1680c:	10c02515 	stw	r3,148(r2)
	_Sensor[IS4_SENSOR].pPressure 	= &pRX_Status->ink_supply[3].IS_Pressure_Actual;
   16810:	008000b4 	movhi	r2,2
   16814:	10b11304 	addi	r2,r2,-15284
   16818:	10800017 	ldw	r2,0(r2)
   1681c:	10c08004 	addi	r3,r2,512
   16820:	008000b4 	movhi	r2,2
   16824:	10b59104 	addi	r2,r2,-10684
   16828:	10c02615 	stw	r3,152(r2)

	_Sensor[F_SENSOR].i2c 			= I2C_MASTER_F_BASE;
   1682c:	008000b4 	movhi	r2,2
   16830:	10b59104 	addi	r2,r2,-10684
   16834:	00c02204 	movi	r3,136
   16838:	10c03015 	stw	r3,192(r2)
	_Sensor[F_SENSOR].pSensorID		= &pRX_Status->flush_sensorID;
   1683c:	008000b4 	movhi	r2,2
   16840:	10b11304 	addi	r2,r2,-15284
   16844:	10800017 	ldw	r2,0(r2)
   16848:	10c00f04 	addi	r3,r2,60
   1684c:	008000b4 	movhi	r2,2
   16850:	10b59104 	addi	r2,r2,-10684
   16854:	10c03115 	stw	r3,196(r2)
	_Sensor[F_SENSOR].pPressure 	= &pRX_Status->flush_pressure;
   16858:	008000b4 	movhi	r2,2
   1685c:	10b11304 	addi	r2,r2,-15284
   16860:	10800017 	ldw	r2,0(r2)
   16864:	10c01304 	addi	r3,r2,76
   16868:	008000b4 	movhi	r2,2
   1686c:	10b59104 	addi	r2,r2,-10684
   16870:	10c03215 	stw	r3,200(r2)

	_Sensor[D_SENSOR].i2c 			= I2C_MASTER_D_BASE;
   16874:	008000b4 	movhi	r2,2
   16878:	10b59104 	addi	r2,r2,-10684
   1687c:	00c02404 	movi	r3,144
   16880:	10c03c15 	stw	r3,240(r2)
	_Sensor[D_SENSOR].pSensorID		= &pRX_Status->degas_sensorID;
   16884:	008000b4 	movhi	r2,2
   16888:	10b11304 	addi	r2,r2,-15284
   1688c:	10800017 	ldw	r2,0(r2)
   16890:	10c01004 	addi	r3,r2,64
   16894:	008000b4 	movhi	r2,2
   16898:	10b59104 	addi	r2,r2,-10684
   1689c:	10c03d15 	stw	r3,244(r2)
	_Sensor[D_SENSOR].pPressure 	= &pRX_Status->degass_pressure;
   168a0:	008000b4 	movhi	r2,2
   168a4:	10b11304 	addi	r2,r2,-15284
   168a8:	10800017 	ldw	r2,0(r2)
   168ac:	10c01204 	addi	r3,r2,72
   168b0:	008000b4 	movhi	r2,2
   168b4:	10b59104 	addi	r2,r2,-10684
   168b8:	10c03e15 	stw	r3,248(r2)

	_Sensor[P_SENSOR].i2c 			= I2C_MASTER_P_BASE;
   168bc:	008000b4 	movhi	r2,2
   168c0:	10b59104 	addi	r2,r2,-10684
   168c4:	00c02004 	movi	r3,128
   168c8:	10c04815 	stw	r3,288(r2)
	_Sensor[P_SENSOR].pSensorID		= &pRX_Status->air_sensorID;
   168cc:	008000b4 	movhi	r2,2
   168d0:	10b11304 	addi	r2,r2,-15284
   168d4:	10800017 	ldw	r2,0(r2)
   168d8:	10c01104 	addi	r3,r2,68
   168dc:	008000b4 	movhi	r2,2
   168e0:	10b59104 	addi	r2,r2,-10684
   168e4:	10c04915 	stw	r3,292(r2)
	_Sensor[P_SENSOR].pPressure 	= &pRX_Status->air_pressure;
   168e8:	008000b4 	movhi	r2,2
   168ec:	10b11304 	addi	r2,r2,-15284
   168f0:	10800017 	ldw	r2,0(r2)
   168f4:	10c01604 	addi	r3,r2,88
   168f8:	008000b4 	movhi	r2,2
   168fc:	10b59104 	addi	r2,r2,-10684
   16900:	10c04a15 	stw	r3,296(r2)

	for (i=0; i<SENSOR_CNT; i++)
   16904:	e03fff15 	stw	zero,-4(fp)
   16908:	00000a06 	br	16934 <pres_init+0x24c>
	{
		_sensor_reset(&_Sensor[i]);
   1690c:	e0bfff17 	ldw	r2,-4(fp)
   16910:	10c00c24 	muli	r3,r2,48
   16914:	008000b4 	movhi	r2,2
   16918:	10b59104 	addi	r2,r2,-10684
   1691c:	1885883a 	add	r2,r3,r2
   16920:	1009883a 	mov	r4,r2
   16924:	0016b080 	call	16b08 <_sensor_reset>

	_Sensor[P_SENSOR].i2c 			= I2C_MASTER_P_BASE;
	_Sensor[P_SENSOR].pSensorID		= &pRX_Status->air_sensorID;
	_Sensor[P_SENSOR].pPressure 	= &pRX_Status->air_pressure;

	for (i=0; i<SENSOR_CNT; i++)
   16928:	e0bfff17 	ldw	r2,-4(fp)
   1692c:	10800044 	addi	r2,r2,1
   16930:	e0bfff15 	stw	r2,-4(fp)
   16934:	e0bfff17 	ldw	r2,-4(fp)
   16938:	108001d0 	cmplti	r2,r2,7
   1693c:	103ff31e 	bne	r2,zero,1690c <__alt_mem_onchip_memory_nios_arm+0xfffc690c>
	{
		_sensor_reset(&_Sensor[i]);
	}
}
   16940:	e037883a 	mov	sp,fp
   16944:	dfc00117 	ldw	ra,4(sp)
   16948:	df000017 	ldw	fp,0(sp)
   1694c:	dec00204 	addi	sp,sp,8
   16950:	f800283a 	ret

00016954 <_set_power>:

//--- _set_power ----------------------------
static void _set_power(SSensor *s, int on)
{
   16954:	defffb04 	addi	sp,sp,-20
   16958:	dfc00415 	stw	ra,16(sp)
   1695c:	df000315 	stw	fp,12(sp)
   16960:	df000304 	addi	fp,sp,12
   16964:	e13ffe15 	stw	r4,-8(fp)
   16968:	e17fff15 	stw	r5,-4(fp)
	static int _on=FALSE;
	if (on!=_on)
   1696c:	d0a4e017 	ldw	r2,-27776(gp)
   16970:	e0ffff17 	ldw	r3,-4(fp)
   16974:	18805f26 	beq	r3,r2,16af4 <_set_power+0x1a0>
	{
		int i;
		// turn on/off Power for Fluid Pressure Sensors (not IS-Adapter one's)
		if(on)
   16978:	e0bfff17 	ldw	r2,-4(fp)
   1697c:	10002826 	beq	r2,zero,16a20 <_set_power+0xcc>
		{
			trprintf("_set_power(Sensor=%d, ON)\n", s-_Sensor);
   16980:	e0fffe17 	ldw	r3,-8(fp)
   16984:	008000b4 	movhi	r2,2
   16988:	10b59104 	addi	r2,r2,-10684
   1698c:	1885c83a 	sub	r2,r3,r2
   16990:	1007d13a 	srai	r3,r2,4
   16994:	00aaaaf4 	movhi	r2,43691
   16998:	10aaaac4 	addi	r2,r2,-21845
   1699c:	1885383a 	mul	r2,r3,r2
   169a0:	010000b4 	movhi	r4,2
   169a4:	21270b04 	addi	r4,r4,-25556
   169a8:	100b883a 	mov	r5,r2
   169ac:	00177dc0 	call	177dc <trprintf>
			IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE,	SENSOR_POWER_ENABLE);	// Fluid Pressure Sensor Power Enable
   169b0:	00c00084 	movi	r3,2
   169b4:	00800c04 	movi	r2,48
   169b8:	10c00035 	stwio	r3,0(r2)
			for (i=0; i<SENSOR_CNT; i++)
   169bc:	e03ffd15 	stw	zero,-12(fp)
   169c0:	00001306 	br	16a10 <_set_power+0xbc>
				if (_Sensor[i].power_timer<=0) _Sensor[i].power_timer=POWER_ON_DELAY-1;
   169c4:	008000b4 	movhi	r2,2
   169c8:	10b59104 	addi	r2,r2,-10684
   169cc:	e0fffd17 	ldw	r3,-12(fp)
   169d0:	18c00c24 	muli	r3,r3,48
   169d4:	18c00b04 	addi	r3,r3,44
   169d8:	10c5883a 	add	r2,r2,r3
   169dc:	10800017 	ldw	r2,0(r2)
   169e0:	00800816 	blt	zero,r2,16a04 <_set_power+0xb0>
   169e4:	008000b4 	movhi	r2,2
   169e8:	10b59104 	addi	r2,r2,-10684
   169ec:	e0fffd17 	ldw	r3,-12(fp)
   169f0:	18c00c24 	muli	r3,r3,48
   169f4:	18c00b04 	addi	r3,r3,44
   169f8:	10c5883a 	add	r2,r2,r3
   169fc:	00c004c4 	movi	r3,19
   16a00:	10c00015 	stw	r3,0(r2)
		// turn on/off Power for Fluid Pressure Sensors (not IS-Adapter one's)
		if(on)
		{
			trprintf("_set_power(Sensor=%d, ON)\n", s-_Sensor);
			IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUTPUT_BASE,	SENSOR_POWER_ENABLE);	// Fluid Pressure Sensor Power Enable
			for (i=0; i<SENSOR_CNT; i++)
   16a04:	e0bffd17 	ldw	r2,-12(fp)
   16a08:	10800044 	addi	r2,r2,1
   16a0c:	e0bffd15 	stw	r2,-12(fp)
   16a10:	e0bffd17 	ldw	r2,-12(fp)
   16a14:	108001d0 	cmplti	r2,r2,7
   16a18:	103fea1e 	bne	r2,zero,169c4 <__alt_mem_onchip_memory_nios_arm+0xfffc69c4>
   16a1c:	00003306 	br	16aec <_set_power+0x198>
				if (_Sensor[i].power_timer<=0) _Sensor[i].power_timer=POWER_ON_DELAY-1;
		}
		else
		{
			trprintf("_set_power(Sensor=%d, OFF)\n", s-_Sensor);
   16a20:	e0fffe17 	ldw	r3,-8(fp)
   16a24:	008000b4 	movhi	r2,2
   16a28:	10b59104 	addi	r2,r2,-10684
   16a2c:	1885c83a 	sub	r2,r3,r2
   16a30:	1007d13a 	srai	r3,r2,4
   16a34:	00aaaaf4 	movhi	r2,43691
   16a38:	10aaaac4 	addi	r2,r2,-21845
   16a3c:	1885383a 	mul	r2,r3,r2
   16a40:	010000b4 	movhi	r4,2
   16a44:	21271204 	addi	r4,r4,-25528
   16a48:	100b883a 	mov	r5,r2
   16a4c:	00177dc0 	call	177dc <trprintf>
			for (i=0; i<SENSOR_CNT; i++)
   16a50:	e03ffd15 	stw	zero,-12(fp)
   16a54:	00001f06 	br	16ad4 <_set_power+0x180>
			{
				if (_Sensor[i].power)
   16a58:	008000b4 	movhi	r2,2
   16a5c:	10b59104 	addi	r2,r2,-10684
   16a60:	e0fffd17 	ldw	r3,-12(fp)
   16a64:	18c00c24 	muli	r3,r3,48
   16a68:	18c00a04 	addi	r3,r3,40
   16a6c:	10c5883a 	add	r2,r2,r3
   16a70:	10800017 	ldw	r2,0(r2)
   16a74:	10001426 	beq	r2,zero,16ac8 <_set_power+0x174>
				{
					_Sensor[i].power	   = FALSE;
   16a78:	008000b4 	movhi	r2,2
   16a7c:	10b59104 	addi	r2,r2,-10684
   16a80:	e0fffd17 	ldw	r3,-12(fp)
   16a84:	18c00c24 	muli	r3,r3,48
   16a88:	18c00a04 	addi	r3,r3,40
   16a8c:	10c5883a 	add	r2,r2,r3
   16a90:	10000015 	stw	zero,0(r2)
					_Sensor[i].power_timer = POWERUP_TIME;
   16a94:	008000b4 	movhi	r2,2
   16a98:	10b59104 	addi	r2,r2,-10684
   16a9c:	e0fffd17 	ldw	r3,-12(fp)
   16aa0:	18c00c24 	muli	r3,r3,48
   16aa4:	18c00b04 	addi	r3,r3,44
   16aa8:	10c5883a 	add	r2,r2,r3
   16aac:	00c00784 	movi	r3,30
   16ab0:	10c00015 	stw	r3,0(r2)
					*s->pPressure		   = INVALID_VALUE;
   16ab4:	e0bffe17 	ldw	r2,-8(fp)
   16ab8:	10c00217 	ldw	r3,8(r2)
   16abc:	009555b4 	movhi	r2,21846
   16ac0:	10aaaa84 	addi	r2,r2,-21846
   16ac4:	18800015 	stw	r2,0(r3)
				if (_Sensor[i].power_timer<=0) _Sensor[i].power_timer=POWER_ON_DELAY-1;
		}
		else
		{
			trprintf("_set_power(Sensor=%d, OFF)\n", s-_Sensor);
			for (i=0; i<SENSOR_CNT; i++)
   16ac8:	e0bffd17 	ldw	r2,-12(fp)
   16acc:	10800044 	addi	r2,r2,1
   16ad0:	e0bffd15 	stw	r2,-12(fp)
   16ad4:	e0bffd17 	ldw	r2,-12(fp)
   16ad8:	108001d0 	cmplti	r2,r2,7
   16adc:	103fde1e 	bne	r2,zero,16a58 <__alt_mem_onchip_memory_nios_arm+0xfffc6a58>
					_Sensor[i].power	   = FALSE;
					_Sensor[i].power_timer = POWERUP_TIME;
					*s->pPressure		   = INVALID_VALUE;
				}
			}
			IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUTPUT_BASE,	SENSOR_POWER_ENABLE);	// Fluid Pressure Sensor Power Enable
   16ae0:	00c00084 	movi	r3,2
   16ae4:	00800d04 	movi	r2,52
   16ae8:	10c00035 	stwio	r3,0(r2)
			// IS sensors get a power OFF/ON by not requesting data for longer than 90 ms
		}
		_on=on;
   16aec:	e0bfff17 	ldw	r2,-4(fp)
   16af0:	d0a4e015 	stw	r2,-27776(gp)
	}
}
   16af4:	e037883a 	mov	sp,fp
   16af8:	dfc00117 	ldw	ra,4(sp)
   16afc:	df000017 	ldw	fp,0(sp)
   16b00:	dec00204 	addi	sp,sp,8
   16b04:	f800283a 	ret

00016b08 <_sensor_reset>:

//--- _sensor_reset -------------
static void _sensor_reset(SSensor *s)
{
   16b08:	defffe04 	addi	sp,sp,-8
   16b0c:	df000115 	stw	fp,4(sp)
   16b10:	df000104 	addi	fp,sp,4
   16b14:	e13fff15 	stw	r4,-4(fp)
	s->buf_idx   = 0;
   16b18:	e0bfff17 	ldw	r2,-4(fp)
   16b1c:	10000815 	stw	zero,32(r2)
	s->buf_valid = FALSE;
   16b20:	e0bfff17 	ldw	r2,-4(fp)
   16b24:	10000915 	stw	zero,36(r2)
  (*s->pPressure)= INVALID_VALUE;
   16b28:	e0bfff17 	ldw	r2,-4(fp)
   16b2c:	10c00217 	ldw	r3,8(r2)
   16b30:	009555b4 	movhi	r2,21846
   16b34:	10aaaa84 	addi	r2,r2,-21846
   16b38:	18800015 	stw	r2,0(r3)
}
   16b3c:	e037883a 	mov	sp,fp
   16b40:	df000017 	ldw	fp,0(sp)
   16b44:	dec00104 	addi	sp,sp,4
   16b48:	f800283a 	ret

00016b4c <_sensor_read>:

//--- _sensor_read -------------------------------
static void _sensor_read(SSensor *s, int no)
{	
   16b4c:	defff604 	addi	sp,sp,-40
   16b50:	dfc00915 	stw	ra,36(sp)
   16b54:	df000815 	stw	fp,32(sp)
   16b58:	dc000715 	stw	r16,28(sp)
   16b5c:	df000804 	addi	fp,sp,32
   16b60:	e13ffd15 	stw	r4,-12(fp)
   16b64:	e17ffe15 	stw	r5,-8(fp)
	int		pressure=0;
   16b68:	e03ffc15 	stw	zero,-16(fp)
	
	//--- repower sensor ---
	if (!s->power)
   16b6c:	e0bffd17 	ldw	r2,-12(fp)
   16b70:	10800a17 	ldw	r2,40(r2)
   16b74:	1000181e 	bne	r2,zero,16bd8 <_sensor_read+0x8c>
	{
		if (s->power_timer==POWER_ON_DELAY) _set_power(s, TRUE);
   16b78:	e0bffd17 	ldw	r2,-12(fp)
   16b7c:	10800b17 	ldw	r2,44(r2)
   16b80:	10800518 	cmpnei	r2,r2,20
   16b84:	1000031e 	bne	r2,zero,16b94 <_sensor_read+0x48>
   16b88:	e13ffd17 	ldw	r4,-12(fp)
   16b8c:	01400044 	movi	r5,1
   16b90:	00169540 	call	16954 <_set_power>
		if ((--s->power_timer)<=0)
   16b94:	e0bffd17 	ldw	r2,-12(fp)
   16b98:	10800b17 	ldw	r2,44(r2)
   16b9c:	10ffffc4 	addi	r3,r2,-1
   16ba0:	e0bffd17 	ldw	r2,-12(fp)
   16ba4:	10c00b15 	stw	r3,44(r2)
   16ba8:	e0bffd17 	ldw	r2,-12(fp)
   16bac:	10800b17 	ldw	r2,44(r2)
   16bb0:	00809a16 	blt	zero,r2,16e1c <_sensor_read+0x2d0>
		{
			_set_power(s, TRUE);
   16bb4:	e13ffd17 	ldw	r4,-12(fp)
   16bb8:	01400044 	movi	r5,1
   16bbc:	00169540 	call	16954 <_set_power>
			_sensor_reset(s);
   16bc0:	e13ffd17 	ldw	r4,-12(fp)
   16bc4:	0016b080 	call	16b08 <_sensor_reset>
			s->power=TRUE;
   16bc8:	e0bffd17 	ldw	r2,-12(fp)
   16bcc:	00c00044 	movi	r3,1
   16bd0:	10c00a15 	stw	r3,40(r2)
			return;
   16bd4:	00009106 	br	16e1c <_sensor_read+0x2d0>
		}
	}
	else
	{
		I2C_start(s->i2c, ADDR_SENSOR, 1);
   16bd8:	e0bffd17 	ldw	r2,-12(fp)
   16bdc:	10800017 	ldw	r2,0(r2)
   16be0:	1009883a 	mov	r4,r2
   16be4:	01401e04 	movi	r5,120
   16be8:	01800044 	movi	r6,1
   16bec:	001971c0 	call	1971c <I2C_start>
		pressure = (I2C_read(s->i2c, FALSE) << 8) | I2C_read(s->i2c, TRUE);
   16bf0:	e0bffd17 	ldw	r2,-12(fp)
   16bf4:	10800017 	ldw	r2,0(r2)
   16bf8:	1009883a 	mov	r4,r2
   16bfc:	000b883a 	mov	r5,zero
   16c00:	00197680 	call	19768 <I2C_read>
   16c04:	1020923a 	slli	r16,r2,8
   16c08:	e0bffd17 	ldw	r2,-12(fp)
   16c0c:	10800017 	ldw	r2,0(r2)
   16c10:	1009883a 	mov	r4,r2
   16c14:	01400044 	movi	r5,1
   16c18:	00197680 	call	19768 <I2C_read>
   16c1c:	8084b03a 	or	r2,r16,r2
   16c20:	e0bffc15 	stw	r2,-16(fp)

		trprintf("Sensor[%d]: raw=0x%x\n", s-_Sensor, pressure);
   16c24:	e0fffd17 	ldw	r3,-12(fp)
   16c28:	008000b4 	movhi	r2,2
   16c2c:	10b59104 	addi	r2,r2,-10684
   16c30:	1885c83a 	sub	r2,r3,r2
   16c34:	1007d13a 	srai	r3,r2,4
   16c38:	00aaaaf4 	movhi	r2,43691
   16c3c:	10aaaac4 	addi	r2,r2,-21845
   16c40:	1885383a 	mul	r2,r3,r2
   16c44:	010000b4 	movhi	r4,2
   16c48:	21271904 	addi	r4,r4,-25500
   16c4c:	100b883a 	mov	r5,r2
   16c50:	e1bffc17 	ldw	r6,-16(fp)
   16c54:	00177dc0 	call	177dc <trprintf>

		if(pressure == 0xffff || pressure == 0)				// pressure sensor error, reset
   16c58:	e0fffc17 	ldw	r3,-16(fp)
   16c5c:	00bfffd4 	movui	r2,65535
   16c60:	18800226 	beq	r3,r2,16c6c <_sensor_read+0x120>
   16c64:	e0bffc17 	ldw	r2,-16(fp)
   16c68:	1000041e 	bne	r2,zero,16c7c <_sensor_read+0x130>
		{
			_set_power(s, FALSE);						// DS1_3V3 OFF
   16c6c:	e13ffd17 	ldw	r4,-12(fp)
   16c70:	000b883a 	mov	r5,zero
   16c74:	00169540 	call	16954 <_set_power>
   16c78:	00006806 	br	16e1c <_sensor_read+0x2d0>
		}
		else if (pressure==0xf1ff)
   16c7c:	e0fffc17 	ldw	r3,-16(fp)
   16c80:	00bc7fd4 	movui	r2,61951
   16c84:	18806526 	beq	r3,r2,16e1c <_sensor_read+0x2d0>
		{ // first after power on
		}
		else
		{	
			//--- convert value --------------
			pressure = ((pressure-16500) *2)/27; // *13.5
   16c88:	e0bffc17 	ldw	r2,-16(fp)
   16c8c:	10afe304 	addi	r2,r2,-16500
   16c90:	1085883a 	add	r2,r2,r2
   16c94:	1009883a 	mov	r4,r2
   16c98:	014006c4 	movi	r5,27
   16c9c:	00180380 	call	18038 <__divsi3>
   16ca0:	e0bffc15 	stw	r2,-16(fp)

			//--- save to buffer -----
			s->buf[s->buf_idx++] = pressure;
   16ca4:	e0bffd17 	ldw	r2,-12(fp)
   16ca8:	10800817 	ldw	r2,32(r2)
   16cac:	11000044 	addi	r4,r2,1
   16cb0:	e0fffd17 	ldw	r3,-12(fp)
   16cb4:	19000815 	stw	r4,32(r3)
   16cb8:	e0fffd17 	ldw	r3,-12(fp)
   16cbc:	108000c4 	addi	r2,r2,3
   16cc0:	1085883a 	add	r2,r2,r2
   16cc4:	1085883a 	add	r2,r2,r2
   16cc8:	1885883a 	add	r2,r3,r2
   16ccc:	e0fffc17 	ldw	r3,-16(fp)
   16cd0:	10c00015 	stw	r3,0(r2)
			if (s->buf_idx>=BUF_SIZE)
   16cd4:	e0bffd17 	ldw	r2,-12(fp)
   16cd8:	10800817 	ldw	r2,32(r2)
   16cdc:	10800150 	cmplti	r2,r2,5
   16ce0:	1000051e 	bne	r2,zero,16cf8 <_sensor_read+0x1ac>
			{
				s->buf_valid = TRUE;
   16ce4:	e0bffd17 	ldw	r2,-12(fp)
   16ce8:	00c00044 	movi	r3,1
   16cec:	10c00915 	stw	r3,36(r2)
				s->buf_idx   = 0;
   16cf0:	e0bffd17 	ldw	r2,-12(fp)
   16cf4:	10000815 	stw	zero,32(r2)
			}
			
			if (s->buf_valid)
   16cf8:	e0bffd17 	ldw	r2,-12(fp)
   16cfc:	10800917 	ldw	r2,36(r2)
   16d00:	10004626 	beq	r2,zero,16e1c <_sensor_read+0x2d0>
			{
				//--- filter (average without the two extreme values) -----------
				INT32 min=s->buf[0];
   16d04:	e0bffd17 	ldw	r2,-12(fp)
   16d08:	10800317 	ldw	r2,12(r2)
   16d0c:	e0bff815 	stw	r2,-32(fp)
				INT32 max=s->buf[0];
   16d10:	e0bffd17 	ldw	r2,-12(fp)
   16d14:	10800317 	ldw	r2,12(r2)
   16d18:	e0bff915 	stw	r2,-28(fp)
				INT32 sum=0;
   16d1c:	e03ffa15 	stw	zero,-24(fp)
				int i;
				for (i=0; i<BUF_SIZE; i++)
   16d20:	e03ffb15 	stw	zero,-20(fp)
   16d24:	00002f06 	br	16de4 <_sensor_read+0x298>
				{
					sum += s->buf[i];
   16d28:	e0fffd17 	ldw	r3,-12(fp)
   16d2c:	e0bffb17 	ldw	r2,-20(fp)
   16d30:	108000c4 	addi	r2,r2,3
   16d34:	1085883a 	add	r2,r2,r2
   16d38:	1085883a 	add	r2,r2,r2
   16d3c:	1885883a 	add	r2,r3,r2
   16d40:	10800017 	ldw	r2,0(r2)
   16d44:	e0fffa17 	ldw	r3,-24(fp)
   16d48:	1885883a 	add	r2,r3,r2
   16d4c:	e0bffa15 	stw	r2,-24(fp)
					if (s->buf[i]<min) min=s->buf[i];
   16d50:	e0fffd17 	ldw	r3,-12(fp)
   16d54:	e0bffb17 	ldw	r2,-20(fp)
   16d58:	108000c4 	addi	r2,r2,3
   16d5c:	1085883a 	add	r2,r2,r2
   16d60:	1085883a 	add	r2,r2,r2
   16d64:	1885883a 	add	r2,r3,r2
   16d68:	10c00017 	ldw	r3,0(r2)
   16d6c:	e0bff817 	ldw	r2,-32(fp)
   16d70:	1880080e 	bge	r3,r2,16d94 <_sensor_read+0x248>
   16d74:	e0fffd17 	ldw	r3,-12(fp)
   16d78:	e0bffb17 	ldw	r2,-20(fp)
   16d7c:	108000c4 	addi	r2,r2,3
   16d80:	1085883a 	add	r2,r2,r2
   16d84:	1085883a 	add	r2,r2,r2
   16d88:	1885883a 	add	r2,r3,r2
   16d8c:	10800017 	ldw	r2,0(r2)
   16d90:	e0bff815 	stw	r2,-32(fp)
					if (s->buf[i]>max) max=s->buf[i];
   16d94:	e0fffd17 	ldw	r3,-12(fp)
   16d98:	e0bffb17 	ldw	r2,-20(fp)
   16d9c:	108000c4 	addi	r2,r2,3
   16da0:	1085883a 	add	r2,r2,r2
   16da4:	1085883a 	add	r2,r2,r2
   16da8:	1885883a 	add	r2,r3,r2
   16dac:	10800017 	ldw	r2,0(r2)
   16db0:	e0fff917 	ldw	r3,-28(fp)
   16db4:	1880080e 	bge	r3,r2,16dd8 <_sensor_read+0x28c>
   16db8:	e0fffd17 	ldw	r3,-12(fp)
   16dbc:	e0bffb17 	ldw	r2,-20(fp)
   16dc0:	108000c4 	addi	r2,r2,3
   16dc4:	1085883a 	add	r2,r2,r2
   16dc8:	1085883a 	add	r2,r2,r2
   16dcc:	1885883a 	add	r2,r3,r2
   16dd0:	10800017 	ldw	r2,0(r2)
   16dd4:	e0bff915 	stw	r2,-28(fp)
				//--- filter (average without the two extreme values) -----------
				INT32 min=s->buf[0];
				INT32 max=s->buf[0];
				INT32 sum=0;
				int i;
				for (i=0; i<BUF_SIZE; i++)
   16dd8:	e0bffb17 	ldw	r2,-20(fp)
   16ddc:	10800044 	addi	r2,r2,1
   16de0:	e0bffb15 	stw	r2,-20(fp)
   16de4:	e0bffb17 	ldw	r2,-20(fp)
   16de8:	10800150 	cmplti	r2,r2,5
   16dec:	103fce1e 	bne	r2,zero,16d28 <__alt_mem_onchip_memory_nios_arm+0xfffc6d28>
				{
					sum += s->buf[i];
					if (s->buf[i]<min) min=s->buf[i];
					if (s->buf[i]>max) max=s->buf[i];
				}
				*s->pPressure = (sum-min-max) / (BUF_SIZE-2);
   16df0:	e0bffd17 	ldw	r2,-12(fp)
   16df4:	14000217 	ldw	r16,8(r2)
   16df8:	e0fffa17 	ldw	r3,-24(fp)
   16dfc:	e0bff817 	ldw	r2,-32(fp)
   16e00:	1887c83a 	sub	r3,r3,r2
   16e04:	e0bff917 	ldw	r2,-28(fp)
   16e08:	1885c83a 	sub	r2,r3,r2
   16e0c:	1009883a 	mov	r4,r2
   16e10:	014000c4 	movi	r5,3
   16e14:	00180380 	call	18038 <__divsi3>
   16e18:	80800015 	stw	r2,0(r16)
			}
		}
	}
}
   16e1c:	e6ffff04 	addi	sp,fp,-4
   16e20:	dfc00217 	ldw	ra,8(sp)
   16e24:	df000117 	ldw	fp,4(sp)
   16e28:	dc000017 	ldw	r16,0(sp)
   16e2c:	dec00304 	addi	sp,sp,12
   16e30:	f800283a 	ret

00016e34 <pres_valid>:

//--- pres_valid --------------------------
int  pres_valid(int i)
{
   16e34:	defffe04 	addi	sp,sp,-8
   16e38:	df000115 	stw	fp,4(sp)
   16e3c:	df000104 	addi	fp,sp,4
   16e40:	e13fff15 	stw	r4,-4(fp)
	return _Sensor[i].buf_valid;
   16e44:	008000b4 	movhi	r2,2
   16e48:	10b59104 	addi	r2,r2,-10684
   16e4c:	e0ffff17 	ldw	r3,-4(fp)
   16e50:	18c00c24 	muli	r3,r3,48
   16e54:	18c00904 	addi	r3,r3,36
   16e58:	10c5883a 	add	r2,r2,r3
   16e5c:	10800017 	ldw	r2,0(r2)
}
   16e60:	e037883a 	mov	sp,fp
   16e64:	df000017 	ldw	fp,0(sp)
   16e68:	dec00104 	addi	sp,sp,4
   16e6c:	f800283a 	ret

00016e70 <pres_tick_10ms>:

//--- pres_tick_10ms ------------------
void pres_tick_10ms(void)
{
   16e70:	defffc04 	addi	sp,sp,-16
   16e74:	dfc00315 	stw	ra,12(sp)
   16e78:	df000215 	stw	fp,8(sp)
   16e7c:	dc000115 	stw	r16,4(sp)
   16e80:	df000204 	addi	fp,sp,8
	int i;
	static int init=4;

	if (init)
   16e84:	d0a00117 	ldw	r2,-32764(gp)
   16e88:	10004a26 	beq	r2,zero,16fb4 <pres_tick_10ms+0x144>
	{
		switch(init++)
   16e8c:	d0a00117 	ldw	r2,-32764(gp)
   16e90:	10c00044 	addi	r3,r2,1
   16e94:	d0e00115 	stw	r3,-32764(gp)
   16e98:	10c000a0 	cmpeqi	r3,r2,2
   16e9c:	18000f1e 	bne	r3,zero,16edc <pres_tick_10ms+0x6c>
   16ea0:	10c000c8 	cmpgei	r3,r2,3
   16ea4:	1800031e 	bne	r3,zero,16eb4 <pres_tick_10ms+0x44>
   16ea8:	10800060 	cmpeqi	r2,r2,1
   16eac:	1000061e 	bne	r2,zero,16ec8 <pres_tick_10ms+0x58>
   16eb0:	00005c06 	br	17024 <pres_tick_10ms+0x1b4>
   16eb4:	10c000e0 	cmpeqi	r3,r2,3
   16eb8:	18001b1e 	bne	r3,zero,16f28 <pres_tick_10ms+0xb8>
   16ebc:	10800120 	cmpeqi	r2,r2,4
   16ec0:	1000351e 	bne	r2,zero,16f98 <pres_tick_10ms+0x128>
   16ec4:	00005706 	br	17024 <pres_tick_10ms+0x1b4>
		{
		case 1: _set_power(&_Sensor[0], TRUE); break;
   16ec8:	010000b4 	movhi	r4,2
   16ecc:	21359104 	addi	r4,r4,-10684
   16ed0:	01400044 	movi	r5,1
   16ed4:	00169540 	call	16954 <_set_power>
   16ed8:	00003506 	br	16fb0 <pres_tick_10ms+0x140>
		case 2: //--- activate ----
				for(i=0; i<4; i++)
   16edc:	e03ffe15 	stw	zero,-8(fp)
   16ee0:	00000d06 	br	16f18 <pres_tick_10ms+0xa8>
				{
					I2C_start(_Sensor[i].i2c, ADDR_SENSOR, 1);
   16ee4:	008000b4 	movhi	r2,2
   16ee8:	10b59104 	addi	r2,r2,-10684
   16eec:	e0fffe17 	ldw	r3,-8(fp)
   16ef0:	18c00c24 	muli	r3,r3,48
   16ef4:	10c5883a 	add	r2,r2,r3
   16ef8:	10800017 	ldw	r2,0(r2)
   16efc:	1009883a 	mov	r4,r2
   16f00:	01401e04 	movi	r5,120
   16f04:	01800044 	movi	r6,1
   16f08:	001971c0 	call	1971c <I2C_start>
	{
		switch(init++)
		{
		case 1: _set_power(&_Sensor[0], TRUE); break;
		case 2: //--- activate ----
				for(i=0; i<4; i++)
   16f0c:	e0bffe17 	ldw	r2,-8(fp)
   16f10:	10800044 	addi	r2,r2,1
   16f14:	e0bffe15 	stw	r2,-8(fp)
   16f18:	e0bffe17 	ldw	r2,-8(fp)
   16f1c:	10800110 	cmplti	r2,r2,4
   16f20:	103ff01e 	bne	r2,zero,16ee4 <__alt_mem_onchip_memory_nios_arm+0xfffc6ee4>
				{
					I2C_start(_Sensor[i].i2c, ADDR_SENSOR, 1);
				}
				break;
   16f24:	00002206 	br	16fb0 <pres_tick_10ms+0x140>

		case 3: for(i=0; i<SENSOR_CNT; i++)
   16f28:	e03ffe15 	stw	zero,-8(fp)
   16f2c:	00001206 	br	16f78 <pres_tick_10ms+0x108>
				{
					*_Sensor[i].pSensorID =_read_Sensor_ID(&_Sensor[i]);
   16f30:	008000b4 	movhi	r2,2
   16f34:	10b59104 	addi	r2,r2,-10684
   16f38:	e0fffe17 	ldw	r3,-8(fp)
   16f3c:	18c00c24 	muli	r3,r3,48
   16f40:	18c00104 	addi	r3,r3,4
   16f44:	10c5883a 	add	r2,r2,r3
   16f48:	14000017 	ldw	r16,0(r2)
   16f4c:	e0bffe17 	ldw	r2,-8(fp)
   16f50:	10c00c24 	muli	r3,r2,48
   16f54:	008000b4 	movhi	r2,2
   16f58:	10b59104 	addi	r2,r2,-10684
   16f5c:	1885883a 	add	r2,r3,r2
   16f60:	1009883a 	mov	r4,r2
   16f64:	001703c0 	call	1703c <_read_Sensor_ID>
   16f68:	80800015 	stw	r2,0(r16)
				{
					I2C_start(_Sensor[i].i2c, ADDR_SENSOR, 1);
				}
				break;

		case 3: for(i=0; i<SENSOR_CNT; i++)
   16f6c:	e0bffe17 	ldw	r2,-8(fp)
   16f70:	10800044 	addi	r2,r2,1
   16f74:	e0bffe15 	stw	r2,-8(fp)
   16f78:	e0bffe17 	ldw	r2,-8(fp)
   16f7c:	108001d0 	cmplti	r2,r2,7
   16f80:	103feb1e 	bne	r2,zero,16f30 <__alt_mem_onchip_memory_nios_arm+0xfffc6f30>
				{
					*_Sensor[i].pSensorID =_read_Sensor_ID(&_Sensor[i]);
				}
				_set_power(&_Sensor[0], FALSE);
   16f84:	010000b4 	movhi	r4,2
   16f88:	21359104 	addi	r4,r4,-10684
   16f8c:	000b883a 	mov	r5,zero
   16f90:	00169540 	call	16954 <_set_power>
				break;
   16f94:	00000606 	br	16fb0 <pres_tick_10ms+0x140>

		case 4: _set_power(&_Sensor[0], TRUE);
   16f98:	010000b4 	movhi	r4,2
   16f9c:	21359104 	addi	r4,r4,-10684
   16fa0:	01400044 	movi	r5,1
   16fa4:	00169540 	call	16954 <_set_power>
				 init=0;
   16fa8:	d0200115 	stw	zero,-32764(gp)
				 break;
   16fac:	0001883a 	nop
   16fb0:	00001c06 	br	17024 <pres_tick_10ms+0x1b4>
		}
	}
	else
	{
		for (i=0; i<SENSOR_CNT; i++)
   16fb4:	e03ffe15 	stw	zero,-8(fp)
   16fb8:	00001706 	br	17018 <pres_tick_10ms+0x1a8>
		{
			if (i>=NIOS_INK_SUPPLY_CNT || pRX_Config->ink_supply[i].present) _sensor_read(&_Sensor[i], i);
   16fbc:	e0bffe17 	ldw	r2,-8(fp)
   16fc0:	10800108 	cmpgei	r2,r2,4
   16fc4:	1000091e 	bne	r2,zero,16fec <pres_tick_10ms+0x17c>
   16fc8:	008000b4 	movhi	r2,2
   16fcc:	10b11404 	addi	r2,r2,-15280
   16fd0:	10c00017 	ldw	r3,0(r2)
   16fd4:	e0bffe17 	ldw	r2,-8(fp)
   16fd8:	10801724 	muli	r2,r2,92
   16fdc:	10800804 	addi	r2,r2,32
   16fe0:	1885883a 	add	r2,r3,r2
   16fe4:	10800017 	ldw	r2,0(r2)
   16fe8:	10000826 	beq	r2,zero,1700c <pres_tick_10ms+0x19c>
   16fec:	e0bffe17 	ldw	r2,-8(fp)
   16ff0:	10c00c24 	muli	r3,r2,48
   16ff4:	008000b4 	movhi	r2,2
   16ff8:	10b59104 	addi	r2,r2,-10684
   16ffc:	1885883a 	add	r2,r3,r2
   17000:	1009883a 	mov	r4,r2
   17004:	e17ffe17 	ldw	r5,-8(fp)
   17008:	0016b4c0 	call	16b4c <_sensor_read>
				 break;
		}
	}
	else
	{
		for (i=0; i<SENSOR_CNT; i++)
   1700c:	e0bffe17 	ldw	r2,-8(fp)
   17010:	10800044 	addi	r2,r2,1
   17014:	e0bffe15 	stw	r2,-8(fp)
   17018:	e0bffe17 	ldw	r2,-8(fp)
   1701c:	108001d0 	cmplti	r2,r2,7
   17020:	103fe61e 	bne	r2,zero,16fbc <__alt_mem_onchip_memory_nios_arm+0xfffc6fbc>
		{
			if (i>=NIOS_INK_SUPPLY_CNT || pRX_Config->ink_supply[i].present) _sensor_read(&_Sensor[i], i);
		}
	}
}
   17024:	e6ffff04 	addi	sp,fp,-4
   17028:	dfc00217 	ldw	ra,8(sp)
   1702c:	df000117 	ldw	fp,4(sp)
   17030:	dc000017 	ldw	r16,0(sp)
   17034:	dec00304 	addi	sp,sp,12
   17038:	f800283a 	ret

0001703c <_read_Sensor_ID>:

//--- _read_Sensor_ID ------------------
static int _read_Sensor_ID(SSensor *s)
{
   1703c:	defff804 	addi	sp,sp,-32
   17040:	dfc00715 	stw	ra,28(sp)
   17044:	df000615 	stw	fp,24(sp)
   17048:	dc000515 	stw	r16,20(sp)
   1704c:	df000604 	addi	fp,sp,24
   17050:	e13ffe15 	stw	r4,-8(fp)
#define		WRITE		0
#define		READ		1
#define		LAST_BYTE	1

	UINT32  id=0;
   17054:	e03ffd15 	stw	zero,-12(fp)
	UCHAR	*pid = (UCHAR*)&id;
   17058:	e0bffd04 	addi	r2,fp,-12
   1705c:	e0bffc15 	stw	r2,-16(fp)

	// Read Sensor ID Back
	if (I2C_start(s->i2c, ADDR_SENSOR, WRITE))
   17060:	e0bffe17 	ldw	r2,-8(fp)
   17064:	10800017 	ldw	r2,0(r2)
   17068:	1009883a 	mov	r4,r2
   1706c:	01401e04 	movi	r5,120
   17070:	000d883a 	mov	r6,zero
   17074:	001971c0 	call	1971c <I2C_start>
   17078:	10000226 	beq	r2,zero,17084 <_read_Sensor_ID+0x48>
		return 1;
   1707c:	00800044 	movi	r2,1
   17080:	00006e06 	br	1723c <_read_Sensor_ID+0x200>
	if (I2C_write(s->i2c, 0x4e, LAST_BYTE))
   17084:	e0bffe17 	ldw	r2,-8(fp)
   17088:	10800017 	ldw	r2,0(r2)
   1708c:	1009883a 	mov	r4,r2
   17090:	01401384 	movi	r5,78
   17094:	01800044 	movi	r6,1
   17098:	00197b80 	call	197b8 <I2C_write>
   1709c:	10000226 	beq	r2,zero,170a8 <_read_Sensor_ID+0x6c>
		return 2;						// ask for first two Sensor ID values
   170a0:	00800084 	movi	r2,2
   170a4:	00006506 	br	1723c <_read_Sensor_ID+0x200>

	_i2c_wait_time();
   170a8:	00172540 	call	17254 <_i2c_wait_time>

	if (I2C_start(s->i2c, ADDR_SENSOR, READ))
   170ac:	e0bffe17 	ldw	r2,-8(fp)
   170b0:	10800017 	ldw	r2,0(r2)
   170b4:	1009883a 	mov	r4,r2
   170b8:	01401e04 	movi	r5,120
   170bc:	01800044 	movi	r6,1
   170c0:	001971c0 	call	1971c <I2C_start>
   170c4:	10000226 	beq	r2,zero,170d0 <_read_Sensor_ID+0x94>
		return 3;
   170c8:	008000c4 	movi	r2,3
   170cc:	00005b06 	br	1723c <_read_Sensor_ID+0x200>
	pid[0] = I2C_read(s->i2c, !LAST_BYTE);			// read first two Sensor ID values
   170d0:	e0bffe17 	ldw	r2,-8(fp)
   170d4:	10800017 	ldw	r2,0(r2)
   170d8:	1009883a 	mov	r4,r2
   170dc:	000b883a 	mov	r5,zero
   170e0:	00197680 	call	19768 <I2C_read>
   170e4:	1007883a 	mov	r3,r2
   170e8:	e0bffc17 	ldw	r2,-16(fp)
   170ec:	10c00005 	stb	r3,0(r2)
	pid[1] = I2C_read(s->i2c, LAST_BYTE);				// read first two Sensor ID values
   170f0:	e0bffc17 	ldw	r2,-16(fp)
   170f4:	14000044 	addi	r16,r2,1
   170f8:	e0bffe17 	ldw	r2,-8(fp)
   170fc:	10800017 	ldw	r2,0(r2)
   17100:	1009883a 	mov	r4,r2
   17104:	01400044 	movi	r5,1
   17108:	00197680 	call	19768 <I2C_read>
   1710c:	80800005 	stb	r2,0(r16)

	_i2c_wait_time();
   17110:	00172540 	call	17254 <_i2c_wait_time>

	if (I2C_start(s->i2c, ADDR_SENSOR, WRITE))
   17114:	e0bffe17 	ldw	r2,-8(fp)
   17118:	10800017 	ldw	r2,0(r2)
   1711c:	1009883a 	mov	r4,r2
   17120:	01401e04 	movi	r5,120
   17124:	000d883a 	mov	r6,zero
   17128:	001971c0 	call	1971c <I2C_start>
   1712c:	10000226 	beq	r2,zero,17138 <_read_Sensor_ID+0xfc>
		return 4;
   17130:	00800104 	movi	r2,4
   17134:	00004106 	br	1723c <_read_Sensor_ID+0x200>
	if (I2C_write(s->i2c, 0x4f, LAST_BYTE))
   17138:	e0bffe17 	ldw	r2,-8(fp)
   1713c:	10800017 	ldw	r2,0(r2)
   17140:	1009883a 	mov	r4,r2
   17144:	014013c4 	movi	r5,79
   17148:	01800044 	movi	r6,1
   1714c:	00197b80 	call	197b8 <I2C_write>
   17150:	10000226 	beq	r2,zero,1715c <_read_Sensor_ID+0x120>
		return 5;						// ask for second two Sensor ID values
   17154:	00800144 	movi	r2,5
   17158:	00003806 	br	1723c <_read_Sensor_ID+0x200>

	_i2c_wait_time();
   1715c:	00172540 	call	17254 <_i2c_wait_time>

	if (I2C_start(s->i2c, ADDR_SENSOR, READ))
   17160:	e0bffe17 	ldw	r2,-8(fp)
   17164:	10800017 	ldw	r2,0(r2)
   17168:	1009883a 	mov	r4,r2
   1716c:	01401e04 	movi	r5,120
   17170:	01800044 	movi	r6,1
   17174:	001971c0 	call	1971c <I2C_start>
   17178:	10000226 	beq	r2,zero,17184 <_read_Sensor_ID+0x148>
		return 6;
   1717c:	00800184 	movi	r2,6
   17180:	00002e06 	br	1723c <_read_Sensor_ID+0x200>
	pid[2] = I2C_read(s->i2c, !LAST_BYTE);			// read first two Sensor ID values
   17184:	e0bffc17 	ldw	r2,-16(fp)
   17188:	14000084 	addi	r16,r2,2
   1718c:	e0bffe17 	ldw	r2,-8(fp)
   17190:	10800017 	ldw	r2,0(r2)
   17194:	1009883a 	mov	r4,r2
   17198:	000b883a 	mov	r5,zero
   1719c:	00197680 	call	19768 <I2C_read>
   171a0:	80800005 	stb	r2,0(r16)
	pid[3] = I2C_read(s->i2c, LAST_BYTE);			// read first two Sensor ID values
   171a4:	e0bffc17 	ldw	r2,-16(fp)
   171a8:	140000c4 	addi	r16,r2,3
   171ac:	e0bffe17 	ldw	r2,-8(fp)
   171b0:	10800017 	ldw	r2,0(r2)
   171b4:	1009883a 	mov	r4,r2
   171b8:	01400044 	movi	r5,1
   171bc:	00197680 	call	19768 <I2C_read>
   171c0:	80800005 	stb	r2,0(r16)

	trprintf("Sensor[%d]. read ID=%d.%d.%d.%d\n", s-_Sensor, pid[0], pid[1], pid[2], pid[3]);
   171c4:	e0fffe17 	ldw	r3,-8(fp)
   171c8:	008000b4 	movhi	r2,2
   171cc:	10b59104 	addi	r2,r2,-10684
   171d0:	1885c83a 	sub	r2,r3,r2
   171d4:	1007d13a 	srai	r3,r2,4
   171d8:	00aaaaf4 	movhi	r2,43691
   171dc:	10aaaac4 	addi	r2,r2,-21845
   171e0:	1885383a 	mul	r2,r3,r2
   171e4:	100b883a 	mov	r5,r2
   171e8:	e0bffc17 	ldw	r2,-16(fp)
   171ec:	10800003 	ldbu	r2,0(r2)
   171f0:	11803fcc 	andi	r6,r2,255
   171f4:	e0bffc17 	ldw	r2,-16(fp)
   171f8:	10800044 	addi	r2,r2,1
   171fc:	10800003 	ldbu	r2,0(r2)
   17200:	11c03fcc 	andi	r7,r2,255
   17204:	e0bffc17 	ldw	r2,-16(fp)
   17208:	10800084 	addi	r2,r2,2
   1720c:	10800003 	ldbu	r2,0(r2)
   17210:	10c03fcc 	andi	r3,r2,255
   17214:	e0bffc17 	ldw	r2,-16(fp)
   17218:	108000c4 	addi	r2,r2,3
   1721c:	10800003 	ldbu	r2,0(r2)
   17220:	10803fcc 	andi	r2,r2,255
   17224:	d8c00015 	stw	r3,0(sp)
   17228:	d8800115 	stw	r2,4(sp)
   1722c:	010000b4 	movhi	r4,2
   17230:	21271f04 	addi	r4,r4,-25476
   17234:	00177dc0 	call	177dc <trprintf>
	return id;
   17238:	e0bffd17 	ldw	r2,-12(fp)
}
   1723c:	e6ffff04 	addi	sp,fp,-4
   17240:	dfc00217 	ldw	ra,8(sp)
   17244:	df000117 	ldw	fp,4(sp)
   17248:	dc000017 	ldw	r16,0(sp)
   1724c:	dec00304 	addi	sp,sp,12
   17250:	f800283a 	ret

00017254 <_i2c_wait_time>:

//--- _i2c_wait_time ------------------
static void _i2c_wait_time(void)
{
   17254:	defffe04 	addi	sp,sp,-8
   17258:	df000115 	stw	fp,4(sp)
   1725c:	df000104 	addi	fp,sp,4
	int i;
	// dummy wait for about 110us //TODO verify on fluid!!
	for (i = 0; i < 500; i++)
   17260:	e03fff15 	stw	zero,-4(fp)
   17264:	00000306 	br	17274 <_i2c_wait_time+0x20>
   17268:	e0bfff17 	ldw	r2,-4(fp)
   1726c:	10800044 	addi	r2,r2,1
   17270:	e0bfff15 	stw	r2,-4(fp)
   17274:	e0bfff17 	ldw	r2,-4(fp)
   17278:	10807d10 	cmplti	r2,r2,500
   1727c:	103ffa1e 	bne	r2,zero,17268 <__alt_mem_onchip_memory_nios_arm+0xfffc7268>
		;
}
   17280:	e037883a 	mov	sp,fp
   17284:	df000017 	ldw	fp,0(sp)
   17288:	dec00104 	addi	sp,sp,4
   1728c:	f800283a 	ret

00017290 <timer_main>:
static void _do_1000ms_timer(void);


//--- timer_main -------------------------
void timer_main(void)
{
   17290:	defffe04 	addi	sp,sp,-8
   17294:	dfc00115 	stw	ra,4(sp)
   17298:	df000015 	stw	fp,0(sp)
   1729c:	d839883a 	mov	fp,sp
	while (Timer_10_out  !=Timer_10_in) 	{ _do_10ms_timer();  Timer_10_out++;}
   172a0:	00000406 	br	172b4 <timer_main+0x24>
   172a4:	00172f40 	call	172f4 <_do_10ms_timer>
   172a8:	d0a4e217 	ldw	r2,-27768(gp)
   172ac:	10800044 	addi	r2,r2,1
   172b0:	d0a4e215 	stw	r2,-27768(gp)
   172b4:	d0e4e217 	ldw	r3,-27768(gp)
   172b8:	d0a4e117 	ldw	r2,-27772(gp)
   172bc:	18bff91e 	bne	r3,r2,172a4 <__alt_mem_onchip_memory_nios_arm+0xfffc72a4>
	while (Timer_1000_out!=Timer_1000_in)   { _do_1000ms_timer();Timer_1000_out++;}
   172c0:	00000406 	br	172d4 <timer_main+0x44>
   172c4:	00173280 	call	17328 <_do_1000ms_timer>
   172c8:	d0a4e417 	ldw	r2,-27760(gp)
   172cc:	10800044 	addi	r2,r2,1
   172d0:	d0a4e415 	stw	r2,-27760(gp)
   172d4:	d0e4e417 	ldw	r3,-27760(gp)
   172d8:	d0a4e317 	ldw	r2,-27764(gp)
   172dc:	18bff91e 	bne	r3,r2,172c4 <__alt_mem_onchip_memory_nios_arm+0xfffc72c4>
}
   172e0:	e037883a 	mov	sp,fp
   172e4:	dfc00117 	ldw	ra,4(sp)
   172e8:	df000017 	ldw	fp,0(sp)
   172ec:	dec00204 	addi	sp,sp,8
   172f0:	f800283a 	ret

000172f4 <_do_10ms_timer>:

//--- _do_10ms_timer ----------------------------------
static void _do_10ms_timer(void)
{
   172f4:	defffe04 	addi	sp,sp,-8
   172f8:	dfc00115 	stw	ra,4(sp)
   172fc:	df000015 	stw	fp,0(sp)
   17300:	d839883a 	mov	fp,sp
	pres_tick_10ms();
   17304:	0016e700 	call	16e70 <pres_tick_10ms>
	ink_tick_10ms();
   17308:	0011e800 	call	11e80 <ink_tick_10ms>
	log_tick_10ms();
   1730c:	0015c8c0 	call	15c8c <log_tick_10ms>
	heater_tick_10ms();
   17310:	0010ff00 	call	10ff0 <heater_tick_10ms>

	//IOWR_ALTERA_AVALON_PIO_DATA(PIO_WATCHDOG_CNT_BASE,0x0FFFFFFF);			// 5 sec
	//IOWR_ALTERA_AVALON_PIO_DATA(PIO_WATCHDOG_CNT_BASE,0x4FFFFFFF);			// 5 sec
}
   17314:	e037883a 	mov	sp,fp
   17318:	dfc00117 	ldw	ra,4(sp)
   1731c:	df000017 	ldw	fp,0(sp)
   17320:	dec00204 	addi	sp,sp,8
   17324:	f800283a 	ret

00017328 <_do_1000ms_timer>:

//--- _do_1000ms_timer ------------------------------------------
static void _do_1000ms_timer(void)
{
   17328:	defffb04 	addi	sp,sp,-20
   1732c:	dfc00415 	stw	ra,16(sp)
   17330:	df000315 	stw	fp,12(sp)
   17334:	df000304 	addi	fp,sp,12
	alt_u16				val;
	int					count;

	ink_tick_1000ms();
   17338:	00147040 	call	14704 <ink_tick_1000ms>

	heater_tick_1000ms();
   1733c:	0011af40 	call	11af4 <heater_tick_1000ms>

	if(pRX_Config->cmd.shutdown)
   17340:	008000b4 	movhi	r2,2
   17344:	10b11404 	addi	r2,r2,-15280
   17348:	10800017 	ldw	r2,0(r2)
   1734c:	10800017 	ldw	r2,0(r2)
   17350:	1080004c 	andi	r2,r2,1
   17354:	10000d26 	beq	r2,zero,1738c <_do_1000ms_timer+0x64>
	{
		// todo alles ausschalten

		pRX_Config->cmd.shutdown 		 = 0;
   17358:	008000b4 	movhi	r2,2
   1735c:	10b11404 	addi	r2,r2,-15280
   17360:	10800017 	ldw	r2,0(r2)
   17364:	11000017 	ldw	r4,0(r2)
   17368:	00ffff84 	movi	r3,-2
   1736c:	20c6703a 	and	r3,r4,r3
   17370:	10c00015 	stw	r3,0(r2)
		pRX_Status->info.is_shutdown	 = 1;
   17374:	008000b4 	movhi	r2,2
   17378:	10b11304 	addi	r2,r2,-15284
   1737c:	10800017 	ldw	r2,0(r2)
   17380:	10c00817 	ldw	r3,32(r2)
   17384:	18c00054 	ori	r3,r3,1
   17388:	10c00815 	stw	r3,32(r2)
	}

	if(pRX_Config->cmd.error_reset)
   1738c:	008000b4 	movhi	r2,2
   17390:	10b11404 	addi	r2,r2,-15280
   17394:	10800017 	ldw	r2,0(r2)
   17398:	10800017 	ldw	r2,0(r2)
   1739c:	1080008c 	andi	r2,r2,2
   173a0:	10000826 	beq	r2,zero,173c4 <_do_1000ms_timer+0x9c>
	{
		main_error_reset();
   173a4:	001617c0 	call	1617c <main_error_reset>
		pRX_Config->cmd.error_reset = FALSE;
   173a8:	008000b4 	movhi	r2,2
   173ac:	10b11404 	addi	r2,r2,-15280
   173b0:	10800017 	ldw	r2,0(r2)
   173b4:	11000017 	ldw	r4,0(r2)
   173b8:	00ffff44 	movi	r3,-3
   173bc:	20c6703a 	and	r3,r4,r3
   173c0:	10c00015 	stw	r3,0(r2)
	}

	// MAX31865 Status
	val = IORD_8DIRECT(AVALON_SPI_MAX31865_0_BASE, MAX31865_CONFIG);		// Configuration
   173c4:	0080c004 	movi	r2,768
   173c8:	10800023 	ldbuio	r2,0(r2)
   173cc:	10803fcc 	andi	r2,r2,255
   173d0:	e0bffd0d 	sth	r2,-12(fp)

	// MAX31865 Fault Status
	val = IORD_8DIRECT(AVALON_SPI_MAX31865_0_BASE, MAX31865_FAULT_STATUS);		// Fault Status
   173d4:	0080c1c4 	movi	r2,775
   173d8:	10800023 	ldbuio	r2,0(r2)
   173dc:	10803fcc 	andi	r2,r2,255
   173e0:	e0bffd0d 	sth	r2,-12(fp)

	//--- check conditioner connected -------------------------------------
	{
		int i;
		for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   173e4:	e03fff15 	stw	zero,-4(fp)
   173e8:	00002d06 	br	174a0 <_do_1000ms_timer+0x178>
		{
			if (pRX_Config->ink_supply[i].alive == _Alive[i])
   173ec:	008000b4 	movhi	r2,2
   173f0:	10b11404 	addi	r2,r2,-15280
   173f4:	10c00017 	ldw	r3,0(r2)
   173f8:	e0bfff17 	ldw	r2,-4(fp)
   173fc:	10801724 	muli	r2,r2,92
   17400:	10801304 	addi	r2,r2,76
   17404:	1885883a 	add	r2,r3,r2
   17408:	11000017 	ldw	r4,0(r2)
   1740c:	008000b4 	movhi	r2,2
   17410:	10b5e504 	addi	r2,r2,-10348
   17414:	e0ffff17 	ldw	r3,-4(fp)
   17418:	18c7883a 	add	r3,r3,r3
   1741c:	18c7883a 	add	r3,r3,r3
   17420:	10c5883a 	add	r2,r2,r3
   17424:	10800017 	ldw	r2,0(r2)
   17428:	20800b1e 	bne	r4,r2,17458 <_do_1000ms_timer+0x130>
			{
				pRX_Config->ink_supply[i].condPresIn = INVALID_VALUE;
   1742c:	008000b4 	movhi	r2,2
   17430:	10b11404 	addi	r2,r2,-15280
   17434:	10c00017 	ldw	r3,0(r2)
   17438:	e0bfff17 	ldw	r2,-4(fp)
   1743c:	10801724 	muli	r2,r2,92
   17440:	10801404 	addi	r2,r2,80
   17444:	1887883a 	add	r3,r3,r2
   17448:	009555b4 	movhi	r2,21846
   1744c:	10aaaa84 	addi	r2,r2,-21846
   17450:	18800015 	stw	r2,0(r3)
   17454:	00000f06 	br	17494 <_do_1000ms_timer+0x16c>
			}
			else _Alive[i] = pRX_Config->ink_supply[i].alive;
   17458:	008000b4 	movhi	r2,2
   1745c:	10b11404 	addi	r2,r2,-15280
   17460:	10c00017 	ldw	r3,0(r2)
   17464:	e0bfff17 	ldw	r2,-4(fp)
   17468:	10801724 	muli	r2,r2,92
   1746c:	10801304 	addi	r2,r2,76
   17470:	1885883a 	add	r2,r3,r2
   17474:	11000017 	ldw	r4,0(r2)
   17478:	008000b4 	movhi	r2,2
   1747c:	10b5e504 	addi	r2,r2,-10348
   17480:	e0ffff17 	ldw	r3,-4(fp)
   17484:	18c7883a 	add	r3,r3,r3
   17488:	18c7883a 	add	r3,r3,r3
   1748c:	10c5883a 	add	r2,r2,r3
   17490:	11000015 	stw	r4,0(r2)
	val = IORD_8DIRECT(AVALON_SPI_MAX31865_0_BASE, MAX31865_FAULT_STATUS);		// Fault Status

	//--- check conditioner connected -------------------------------------
	{
		int i;
		for (i=0; i<NIOS_INK_SUPPLY_CNT; i++)
   17494:	e0bfff17 	ldw	r2,-4(fp)
   17498:	10800044 	addi	r2,r2,1
   1749c:	e0bfff15 	stw	r2,-4(fp)
   174a0:	e0bfff17 	ldw	r2,-4(fp)
   174a4:	10800110 	cmplti	r2,r2,4
   174a8:	103fd01e 	bne	r2,zero,173ec <__alt_mem_onchip_memory_nios_arm+0xfffc73ec>
			else _Alive[i] = pRX_Config->ink_supply[i].alive;
		}
	}

	// Read PT100 Temperature
	for(count = 0 ; count < 6 ; count++)
   174ac:	e03ffe15 	stw	zero,-8(fp)
   174b0:	00002e06 	br	1756c <_do_1000ms_timer+0x244>
	{
		//IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_CONFIG, 0xA1); // single shot
		val = (IORD_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10,MAX31865_RTD_DATA_MSB) <<8);	// Read Resistance MSB
   174b4:	e0bffe17 	ldw	r2,-8(fp)
   174b8:	1004913a 	slli	r2,r2,4
   174bc:	1080c044 	addi	r2,r2,769
   174c0:	10800023 	ldbuio	r2,0(r2)
   174c4:	10803fcc 	andi	r2,r2,255
   174c8:	1004923a 	slli	r2,r2,8
   174cc:	e0bffd0d 	sth	r2,-12(fp)
		val += IORD_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10,MAX31865_RTD_DATA_LSB);		// Read Resistance LSB
   174d0:	e0bffe17 	ldw	r2,-8(fp)
   174d4:	1004913a 	slli	r2,r2,4
   174d8:	1080c084 	addi	r2,r2,770
   174dc:	10800023 	ldbuio	r2,0(r2)
   174e0:	10803fcc 	andi	r2,r2,255
   174e4:	1007883a 	mov	r3,r2
   174e8:	e0bffd0b 	ldhu	r2,-12(fp)
   174ec:	1885883a 	add	r2,r3,r2
   174f0:	e0bffd0d 	sth	r2,-12(fp)

		if((val&0x01)==0) //temp is valid
   174f4:	e0bffd0b 	ldhu	r2,-12(fp)
   174f8:	1080004c 	andi	r2,r2,1
   174fc:	1000071e 	bne	r2,zero,1751c <_do_1000ms_timer+0x1f4>
		{
			val =  (val>>6); // shift 1 bit for valid bit and 5 bit for conversion to Celsius
   17500:	e0bffd0b 	ldhu	r2,-12(fp)
   17504:	1004d1ba 	srli	r2,r2,6
   17508:	e0bffd0d 	sth	r2,-12(fp)
			val =  val-256; // Temp in Celsius
   1750c:	e0bffd0b 	ldhu	r2,-12(fp)
   17510:	10bfc004 	addi	r2,r2,-256
   17514:	e0bffd0d 	sth	r2,-12(fp)
   17518:	00000706 	br	17538 <_do_1000ms_timer+0x210>
		}
		else
		{
			val=0;
   1751c:	e03ffd0d 	sth	zero,-12(fp)
			IOWR_8DIRECT(AVALON_SPI_MAX31865_0_BASE + count*0x10, MAX31865_CONFIG, 0xC3); // Reset fault
   17520:	e0bffe17 	ldw	r2,-8(fp)
   17524:	10800c04 	addi	r2,r2,48
   17528:	1004913a 	slli	r2,r2,4
   1752c:	1007883a 	mov	r3,r2
   17530:	00bff0c4 	movi	r2,-61
   17534:	18800025 	stbio	r2,0(r3)
		}
		pRX_Status->pt100[count]=val;
   17538:	008000b4 	movhi	r2,2
   1753c:	10b11304 	addi	r2,r2,-15284
   17540:	11000017 	ldw	r4,0(r2)
   17544:	e0fffd0b 	ldhu	r3,-12(fp)
   17548:	e0bffe17 	ldw	r2,-8(fp)
   1754c:	108005c4 	addi	r2,r2,23
   17550:	1085883a 	add	r2,r2,r2
   17554:	1085883a 	add	r2,r2,r2
   17558:	2085883a 	add	r2,r4,r2
   1755c:	10c00015 	stw	r3,0(r2)
			else _Alive[i] = pRX_Config->ink_supply[i].alive;
		}
	}

	// Read PT100 Temperature
	for(count = 0 ; count < 6 ; count++)
   17560:	e0bffe17 	ldw	r2,-8(fp)
   17564:	10800044 	addi	r2,r2,1
   17568:	e0bffe15 	stw	r2,-8(fp)
   1756c:	e0bffe17 	ldw	r2,-8(fp)
   17570:	10800190 	cmplti	r2,r2,6
   17574:	103fcf1e 	bne	r2,zero,174b4 <__alt_mem_onchip_memory_nios_arm+0xfffc74b4>
		}
		pRX_Status->pt100[count]=val;
	}

	// Report to Marcel
	pRX_Status->input		= (alt_u32)(~(IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_BASE) >> 8) & 0x0f);
   17578:	008000b4 	movhi	r2,2
   1757c:	10b11304 	addi	r2,r2,-15284
   17580:	10800017 	ldw	r2,0(r2)
   17584:	00c00404 	movi	r3,16
   17588:	18c00037 	ldwio	r3,0(r3)
   1758c:	1807d23a 	srai	r3,r3,8
   17590:	00c6303a 	nor	r3,zero,r3
   17594:	18c003cc 	andi	r3,r3,15
   17598:	10c02815 	stw	r3,160(r2)

	pRX_Status->alive++;
   1759c:	008000b4 	movhi	r2,2
   175a0:	10b11304 	addi	r2,r2,-15284
   175a4:	10800017 	ldw	r2,0(r2)
   175a8:	10c00c17 	ldw	r3,48(r2)
   175ac:	18c00044 	addi	r3,r3,1
   175b0:	10c00c15 	stw	r3,48(r2)

	if(pRX_Status->alive & 0x01)	IOWR_ALTERA_AVALON_PIO_SET_BITS  (PIO_OUTPUT_BASE, FPGA_LED_1_OUT);
   175b4:	008000b4 	movhi	r2,2
   175b8:	10b11304 	addi	r2,r2,-15284
   175bc:	10800017 	ldw	r2,0(r2)
   175c0:	10800c17 	ldw	r2,48(r2)
   175c4:	1080004c 	andi	r2,r2,1
   175c8:	10000426 	beq	r2,zero,175dc <_do_1000ms_timer+0x2b4>
   175cc:	00d00004 	movi	r3,16384
   175d0:	00800c04 	movi	r2,48
   175d4:	10c00035 	stwio	r3,0(r2)
   175d8:	00000306 	br	175e8 <_do_1000ms_timer+0x2c0>
	else							IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUTPUT_BASE, FPGA_LED_1_OUT);
   175dc:	00d00004 	movi	r3,16384
   175e0:	00800d04 	movi	r2,52
   175e4:	10c00035 	stwio	r3,0(r2)

	trprintf("Alive %d, timer 10ms=%d\n", pRX_Status->alive, Timer_10_in);
   175e8:	008000b4 	movhi	r2,2
   175ec:	10b11304 	addi	r2,r2,-15284
   175f0:	10800017 	ldw	r2,0(r2)
   175f4:	10c00c17 	ldw	r3,48(r2)
   175f8:	d0a4e117 	ldw	r2,-27772(gp)
   175fc:	010000b4 	movhi	r4,2
   17600:	21272804 	addi	r4,r4,-25440
   17604:	180b883a 	mov	r5,r3
   17608:	100d883a 	mov	r6,r2
   1760c:	00177dc0 	call	177dc <trprintf>
}
   17610:	e037883a 	mov	sp,fp
   17614:	dfc00117 	ldw	ra,4(sp)
   17618:	df000017 	ldw	fp,0(sp)
   1761c:	dec00204 	addi	sp,sp,8
   17620:	f800283a 	ret

00017624 <handle_timer_0_interrupt>:

//--- TIMER 0 -> 10ms -----------------------------------------------------
static void handle_timer_0_interrupt(void* context)
{
   17624:	defffd04 	addi	sp,sp,-12
   17628:	df000215 	stw	fp,8(sp)
   1762c:	df000204 	addi	fp,sp,8
   17630:	e13fff15 	stw	r4,-4(fp)
	alt_u32 				tmp;

	Timer_10_in++;
   17634:	d0a4e117 	ldw	r2,-27772(gp)
   17638:	10800044 	addi	r2,r2,1
   1763c:	d0a4e115 	stw	r2,-27772(gp)

    // Clear the TO bit in the status register (read-modify-write)
    tmp 	= IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE);
   17640:	00801804 	movi	r2,96
   17644:	10800037 	ldwio	r2,0(r2)
   17648:	e0bffe15 	stw	r2,-8(fp)
    tmp 	&= ~ALTERA_AVALON_TIMER_STATUS_TO_MSK;
   1764c:	e0fffe17 	ldw	r3,-8(fp)
   17650:	00bfff84 	movi	r2,-2
   17654:	1884703a 	and	r2,r3,r2
   17658:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, tmp);
   1765c:	e0fffe17 	ldw	r3,-8(fp)
   17660:	00801804 	movi	r2,96
   17664:	10c00035 	stwio	r3,0(r2)
}
   17668:	e037883a 	mov	sp,fp
   1766c:	df000017 	ldw	fp,0(sp)
   17670:	dec00104 	addi	sp,sp,4
   17674:	f800283a 	ret

00017678 <handle_timer_1_interrupt>:

// TIMER 1 -> 1s
static void handle_timer_1_interrupt(void* context)
{
   17678:	defffd04 	addi	sp,sp,-12
   1767c:	df000215 	stw	fp,8(sp)
   17680:	df000204 	addi	fp,sp,8
   17684:	e13fff15 	stw	r4,-4(fp)
	alt_u32 			tmp;

	Timer_1000_in++;
   17688:	d0a4e317 	ldw	r2,-27764(gp)
   1768c:	10800044 	addi	r2,r2,1
   17690:	d0a4e315 	stw	r2,-27764(gp)

    // Clear the TO bit in the status register (read-modify-write)
    tmp 	= IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE);
   17694:	00801004 	movi	r2,64
   17698:	10800037 	ldwio	r2,0(r2)
   1769c:	e0bffe15 	stw	r2,-8(fp)
    tmp 	&= ~ALTERA_AVALON_TIMER_STATUS_TO_MSK;
   176a0:	e0fffe17 	ldw	r3,-8(fp)
   176a4:	00bfff84 	movi	r2,-2
   176a8:	1884703a 	and	r2,r3,r2
   176ac:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, tmp);
   176b0:	e0fffe17 	ldw	r3,-8(fp)
   176b4:	00801004 	movi	r2,64
   176b8:	10c00035 	stwio	r3,0(r2)
}
   176bc:	e037883a 	mov	sp,fp
   176c0:	df000017 	ldw	fp,0(sp)
   176c4:	dec00104 	addi	sp,sp,4
   176c8:	f800283a 	ret

000176cc <timer_init>:

//--- timer_init -----------------------------------
int timer_init(void)
{
   176cc:	defffd04 	addi	sp,sp,-12
   176d0:	dfc00215 	stw	ra,8(sp)
   176d4:	df000115 	stw	fp,4(sp)
   176d8:	df000104 	addi	fp,sp,4
    memset(_Alive, 0, sizeof(_Alive));
   176dc:	010000b4 	movhi	r4,2
   176e0:	2135e504 	addi	r4,r4,-10348
   176e4:	000b883a 	mov	r5,zero
   176e8:	01800404 	movi	r6,16
   176ec:	00181200 	call	18120 <memset>

    int ret = -1;
   176f0:	00bfffc4 	movi	r2,-1
   176f4:	e0bfff15 	stw	r2,-4(fp)


    // TIMER 0

    // Set Timer Period Register
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, period_timer_0 >> 16);
   176f8:	d0a00217 	ldw	r2,-32760(gp)
   176fc:	1004d43a 	srli	r2,r2,16
   17700:	1007883a 	mov	r3,r2
   17704:	00801b04 	movi	r2,108
   17708:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period_timer_0 & 0xffff);
   1770c:	d0a00217 	ldw	r2,-32760(gp)
   17710:	10ffffcc 	andi	r3,r2,65535
   17714:	00801a04 	movi	r2,104
   17718:	10c00035 	stwio	r3,0(r2)

    // Set Timer Control Register
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
   1771c:	00c001c4 	movi	r3,7
   17720:	00801904 	movi	r2,100
   17724:	10c00035 	stwio	r3,0(r2)
                                                      ALTERA_AVALON_TIMER_CONTROL_START_MSK |
                                                      ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );

    // Register ISR
    alt_irq_register(TIMER_0_IRQ, NULL, handle_timer_0_interrupt);
   17728:	0009883a 	mov	r4,zero
   1772c:	000b883a 	mov	r5,zero
   17730:	01800074 	movhi	r6,1
   17734:	319d8904 	addi	r6,r6,30244
   17738:	00190100 	call	19010 <alt_irq_register>

    // TIMER 1

    // Set Timer Period Register
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_1_BASE, period_timer_1 >> 16);
   1773c:	d0a00317 	ldw	r2,-32756(gp)
   17740:	1004d43a 	srli	r2,r2,16
   17744:	1007883a 	mov	r3,r2
   17748:	00801304 	movi	r2,76
   1774c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_1_BASE, period_timer_1 & 0xffff);
   17750:	d0a00317 	ldw	r2,-32756(gp)
   17754:	10ffffcc 	andi	r3,r2,65535
   17758:	00801204 	movi	r2,72
   1775c:	10c00035 	stwio	r3,0(r2)

    // Set Timer Control Register
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
   17760:	00c001c4 	movi	r3,7
   17764:	00801104 	movi	r2,68
   17768:	10c00035 	stwio	r3,0(r2)
                                                      ALTERA_AVALON_TIMER_CONTROL_START_MSK |
                                                      ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );

    // Register ISR
    alt_irq_register(TIMER_1_IRQ, NULL, handle_timer_1_interrupt);
   1776c:	01000044 	movi	r4,1
   17770:	000b883a 	mov	r5,zero
   17774:	01800074 	movhi	r6,1
   17778:	319d9e04 	addi	r6,r6,30328
   1777c:	00190100 	call	19010 <alt_irq_register>

	return (ret);
   17780:	e0bfff17 	ldw	r2,-4(fp)
}
   17784:	e037883a 	mov	sp,fp
   17788:	dfc00117 	ldw	ra,4(sp)
   1778c:	df000017 	ldw	fp,0(sp)
   17790:	dec00204 	addi	sp,sp,8
   17794:	f800283a 	ret

00017798 <tr_debug>:

static int _DEBUG = 0;

//--- tr_debug --------------------
void tr_debug(void)
{
   17798:	deffff04 	addi	sp,sp,-4
   1779c:	df000015 	stw	fp,0(sp)
   177a0:	d839883a 	mov	fp,sp
	_DEBUG = 1;
   177a4:	00800044 	movi	r2,1
   177a8:	d0a4e515 	stw	r2,-27756(gp)
}
   177ac:	e037883a 	mov	sp,fp
   177b0:	df000017 	ldw	fp,0(sp)
   177b4:	dec00104 	addi	sp,sp,4
   177b8:	f800283a 	ret

000177bc <tr_debug_on>:

//--- tr_debug_on ----------------
int  tr_debug_on(void)
{
   177bc:	deffff04 	addi	sp,sp,-4
   177c0:	df000015 	stw	fp,0(sp)
   177c4:	d839883a 	mov	fp,sp
	return _DEBUG;
   177c8:	d0a4e517 	ldw	r2,-27756(gp)
}
   177cc:	e037883a 	mov	sp,fp
   177d0:	df000017 	ldw	fp,0(sp)
   177d4:	dec00104 	addi	sp,sp,4
   177d8:	f800283a 	ret

000177dc <trprintf>:

//--- trprintf --------------------------
int trprintf(const char *format, ...)
{
   177dc:	defff804 	addi	sp,sp,-32
   177e0:	dfc00415 	stw	ra,16(sp)
   177e4:	df000315 	stw	fp,12(sp)
   177e8:	df000304 	addi	fp,sp,12
   177ec:	e1400215 	stw	r5,8(fp)
   177f0:	e1800315 	stw	r6,12(fp)
   177f4:	e1c00415 	stw	r7,16(fp)
   177f8:	e13fff15 	stw	r4,-4(fp)
	if (_DEBUG)
   177fc:	d0a4e517 	ldw	r2,-27756(gp)
   17800:	10000926 	beq	r2,zero,17828 <trprintf+0x4c>
	{
		int ret;
		va_list ap;
		va_start(ap, format);
   17804:	e0800204 	addi	r2,fp,8
   17808:	e0bffe15 	stw	r2,-8(fp)
		ret = vprintf(format, ap);
   1780c:	e0bffe17 	ldw	r2,-8(fp)
   17810:	e13fff17 	ldw	r4,-4(fp)
   17814:	100b883a 	mov	r5,r2
   17818:	00187f00 	call	187f0 <vprintf>
   1781c:	e0bffd15 	stw	r2,-12(fp)
		va_end(ap);
		return ret;
   17820:	e0bffd17 	ldw	r2,-12(fp)
   17824:	00000106 	br	1782c <trprintf+0x50>
	}
	return 0;
   17828:	0005883a 	mov	r2,zero
}
   1782c:	e037883a 	mov	sp,fp
   17830:	dfc00117 	ldw	ra,4(sp)
   17834:	df000017 	ldw	fp,0(sp)
   17838:	dec00504 	addi	sp,sp,20
   1783c:	f800283a 	ret

00017840 <get_version>:
#include "string.h"

const char version[32]="1.0.1.1052";

void get_version(SVersion *pversion)
{
   17840:	defff704 	addi	sp,sp,-36
   17844:	dfc00815 	stw	ra,32(sp)
   17848:	df000715 	stw	fp,28(sp)
   1784c:	df000704 	addi	fp,sp,28
   17850:	e13fff15 	stw	r4,-4(fp)
	int val[4], i;
	const char *ch;
	memset(val, 0, sizeof(val));
   17854:	e0bffb04 	addi	r2,fp,-20
   17858:	1009883a 	mov	r4,r2
   1785c:	000b883a 	mov	r5,zero
   17860:	01800404 	movi	r6,16
   17864:	00181200 	call	18120 <memset>
	for (i=0,ch=version; *ch; ch++)
   17868:	e03ff915 	stw	zero,-28(fp)
   1786c:	008000b4 	movhi	r2,2
   17870:	10a72f04 	addi	r2,r2,-25412
   17874:	e0bffa15 	stw	r2,-24(fp)
   17878:	00003106 	br	17940 <get_version+0x100>
	{
		if (*ch=='.') i++;
   1787c:	e0bffa17 	ldw	r2,-24(fp)
   17880:	10800003 	ldbu	r2,0(r2)
   17884:	10803fcc 	andi	r2,r2,255
   17888:	1080201c 	xori	r2,r2,128
   1788c:	10bfe004 	addi	r2,r2,-128
   17890:	10800b98 	cmpnei	r2,r2,46
   17894:	1000031e 	bne	r2,zero,178a4 <get_version+0x64>
   17898:	e0bff917 	ldw	r2,-28(fp)
   1789c:	10800044 	addi	r2,r2,1
   178a0:	e0bff915 	stw	r2,-28(fp)
		if (*ch>='0' && *ch<='9') val[i] = 10*val[i]+*ch-'0';
   178a4:	e0bffa17 	ldw	r2,-24(fp)
   178a8:	10800003 	ldbu	r2,0(r2)
   178ac:	10803fcc 	andi	r2,r2,255
   178b0:	1080201c 	xori	r2,r2,128
   178b4:	10bfe004 	addi	r2,r2,-128
   178b8:	10800c10 	cmplti	r2,r2,48
   178bc:	10001d1e 	bne	r2,zero,17934 <get_version+0xf4>
   178c0:	e0bffa17 	ldw	r2,-24(fp)
   178c4:	10800003 	ldbu	r2,0(r2)
   178c8:	10803fcc 	andi	r2,r2,255
   178cc:	1080201c 	xori	r2,r2,128
   178d0:	10bfe004 	addi	r2,r2,-128
   178d4:	10800e88 	cmpgei	r2,r2,58
   178d8:	1000161e 	bne	r2,zero,17934 <get_version+0xf4>
   178dc:	e0bff917 	ldw	r2,-28(fp)
   178e0:	1085883a 	add	r2,r2,r2
   178e4:	1085883a 	add	r2,r2,r2
   178e8:	e0fff904 	addi	r3,fp,-28
   178ec:	1885883a 	add	r2,r3,r2
   178f0:	10800204 	addi	r2,r2,8
   178f4:	10800017 	ldw	r2,0(r2)
   178f8:	10c002a4 	muli	r3,r2,10
   178fc:	e0bffa17 	ldw	r2,-24(fp)
   17900:	10800003 	ldbu	r2,0(r2)
   17904:	10803fcc 	andi	r2,r2,255
   17908:	1080201c 	xori	r2,r2,128
   1790c:	10bfe004 	addi	r2,r2,-128
   17910:	1885883a 	add	r2,r3,r2
   17914:	10fff404 	addi	r3,r2,-48
   17918:	e0bff917 	ldw	r2,-28(fp)
   1791c:	1085883a 	add	r2,r2,r2
   17920:	1085883a 	add	r2,r2,r2
   17924:	e13ff904 	addi	r4,fp,-28
   17928:	2085883a 	add	r2,r4,r2
   1792c:	10800204 	addi	r2,r2,8
   17930:	10c00015 	stw	r3,0(r2)
void get_version(SVersion *pversion)
{
	int val[4], i;
	const char *ch;
	memset(val, 0, sizeof(val));
	for (i=0,ch=version; *ch; ch++)
   17934:	e0bffa17 	ldw	r2,-24(fp)
   17938:	10800044 	addi	r2,r2,1
   1793c:	e0bffa15 	stw	r2,-24(fp)
   17940:	e0bffa17 	ldw	r2,-24(fp)
   17944:	10800003 	ldbu	r2,0(r2)
   17948:	10803fcc 	andi	r2,r2,255
   1794c:	1080201c 	xori	r2,r2,128
   17950:	10bfe004 	addi	r2,r2,-128
   17954:	103fc91e 	bne	r2,zero,1787c <__alt_mem_onchip_memory_nios_arm+0xfffc787c>
	{
		if (*ch=='.') i++;
		if (*ch>='0' && *ch<='9') val[i] = 10*val[i]+*ch-'0';
	}
	pversion->major 	= val[0];
   17958:	e0bffb17 	ldw	r2,-20(fp)
   1795c:	1007883a 	mov	r3,r2
   17960:	e0bfff17 	ldw	r2,-4(fp)
   17964:	10c00015 	stw	r3,0(r2)
	pversion->minor 	= val[1];
   17968:	e0bffc17 	ldw	r2,-16(fp)
   1796c:	1007883a 	mov	r3,r2
   17970:	e0bfff17 	ldw	r2,-4(fp)
   17974:	10c00115 	stw	r3,4(r2)
	pversion->revision 	= val[2];
   17978:	e0bffd17 	ldw	r2,-12(fp)
   1797c:	1007883a 	mov	r3,r2
   17980:	e0bfff17 	ldw	r2,-4(fp)
   17984:	10c00215 	stw	r3,8(r2)
	pversion->build 	= val[3];
   17988:	e0bffe17 	ldw	r2,-8(fp)
   1798c:	1007883a 	mov	r3,r2
   17990:	e0bfff17 	ldw	r2,-4(fp)
   17994:	10c00315 	stw	r3,12(r2)
};
   17998:	e037883a 	mov	sp,fp
   1799c:	dfc00117 	ldw	ra,4(sp)
   179a0:	df000017 	ldw	fp,0(sp)
   179a4:	dec00204 	addi	sp,sp,8
   179a8:	f800283a 	ret

000179ac <__divdi3>:
   179ac:	defff404 	addi	sp,sp,-48
   179b0:	dfc00b15 	stw	ra,44(sp)
   179b4:	df000a15 	stw	fp,40(sp)
   179b8:	ddc00915 	stw	r23,36(sp)
   179bc:	dd800815 	stw	r22,32(sp)
   179c0:	dd400715 	stw	r21,28(sp)
   179c4:	dd000615 	stw	r20,24(sp)
   179c8:	dcc00515 	stw	r19,20(sp)
   179cc:	dc800415 	stw	r18,16(sp)
   179d0:	dc400315 	stw	r17,12(sp)
   179d4:	dc000215 	stw	r16,8(sp)
   179d8:	2800b916 	blt	r5,zero,17cc0 <__divdi3+0x314>
   179dc:	2029883a 	mov	r20,r4
   179e0:	2821883a 	mov	r16,r5
   179e4:	0023883a 	mov	r17,zero
   179e8:	3800af16 	blt	r7,zero,17ca8 <__divdi3+0x2fc>
   179ec:	3027883a 	mov	r19,r6
   179f0:	a025883a 	mov	r18,r20
   179f4:	802f883a 	mov	r23,r16
   179f8:	3800401e 	bne	r7,zero,17afc <__divdi3+0x150>
   179fc:	81806a2e 	bgeu	r16,r6,17ba8 <__divdi3+0x1fc>
   17a00:	00bfffd4 	movui	r2,65535
   17a04:	1180ba2e 	bgeu	r2,r6,17cf0 <__divdi3+0x344>
   17a08:	00804034 	movhi	r2,256
   17a0c:	10bfffc4 	addi	r2,r2,-1
   17a10:	1181562e 	bgeu	r2,r6,17f6c <__divdi3+0x5c0>
   17a14:	00800604 	movi	r2,24
   17a18:	1011883a 	mov	r8,r2
   17a1c:	3084d83a 	srl	r2,r6,r2
   17a20:	00c000b4 	movhi	r3,2
   17a24:	18e73704 	addi	r3,r3,-25380
   17a28:	1885883a 	add	r2,r3,r2
   17a2c:	11c00003 	ldbu	r7,0(r2)
   17a30:	00800804 	movi	r2,32
   17a34:	3a0f883a 	add	r7,r7,r8
   17a38:	11c5c83a 	sub	r2,r2,r7
   17a3c:	10000526 	beq	r2,zero,17a54 <__divdi3+0xa8>
   17a40:	808a983a 	sll	r5,r16,r2
   17a44:	a1ced83a 	srl	r7,r20,r7
   17a48:	30a6983a 	sll	r19,r6,r2
   17a4c:	a0a4983a 	sll	r18,r20,r2
   17a50:	29eeb03a 	or	r23,r5,r7
   17a54:	982cd43a 	srli	r22,r19,16
   17a58:	b809883a 	mov	r4,r23
   17a5c:	9d7fffcc 	andi	r21,r19,65535
   17a60:	b00b883a 	mov	r5,r22
   17a64:	00180f00 	call	180f0 <__umodsi3>
   17a68:	b809883a 	mov	r4,r23
   17a6c:	b00b883a 	mov	r5,r22
   17a70:	1029883a 	mov	r20,r2
   17a74:	00180e80 	call	180e8 <__udivsi3>
   17a78:	1021883a 	mov	r16,r2
   17a7c:	9006d43a 	srli	r3,r18,16
   17a80:	a004943a 	slli	r2,r20,16
   17a84:	8569383a 	mul	r20,r16,r21
   17a88:	10c4b03a 	or	r2,r2,r3
   17a8c:	1500052e 	bgeu	r2,r20,17aa4 <__divdi3+0xf8>
   17a90:	14c5883a 	add	r2,r2,r19
   17a94:	80ffffc4 	addi	r3,r16,-1
   17a98:	14c00136 	bltu	r2,r19,17aa0 <__divdi3+0xf4>
   17a9c:	15014536 	bltu	r2,r20,17fb4 <__divdi3+0x608>
   17aa0:	1821883a 	mov	r16,r3
   17aa4:	1529c83a 	sub	r20,r2,r20
   17aa8:	a009883a 	mov	r4,r20
   17aac:	b00b883a 	mov	r5,r22
   17ab0:	00180f00 	call	180f0 <__umodsi3>
   17ab4:	102f883a 	mov	r23,r2
   17ab8:	b00b883a 	mov	r5,r22
   17abc:	a009883a 	mov	r4,r20
   17ac0:	00180e80 	call	180e8 <__udivsi3>
   17ac4:	b82e943a 	slli	r23,r23,16
   17ac8:	156b383a 	mul	r21,r2,r21
   17acc:	917fffcc 	andi	r5,r18,65535
   17ad0:	b94ab03a 	or	r5,r23,r5
   17ad4:	2d40052e 	bgeu	r5,r21,17aec <__divdi3+0x140>
   17ad8:	2ccb883a 	add	r5,r5,r19
   17adc:	10ffffc4 	addi	r3,r2,-1
   17ae0:	2cc00136 	bltu	r5,r19,17ae8 <__divdi3+0x13c>
   17ae4:	2d413136 	bltu	r5,r21,17fac <__divdi3+0x600>
   17ae8:	1805883a 	mov	r2,r3
   17aec:	8020943a 	slli	r16,r16,16
   17af0:	0029883a 	mov	r20,zero
   17af4:	1404b03a 	or	r2,r2,r16
   17af8:	00000306 	br	17b08 <__divdi3+0x15c>
   17afc:	81c0162e 	bgeu	r16,r7,17b58 <__divdi3+0x1ac>
   17b00:	0029883a 	mov	r20,zero
   17b04:	0005883a 	mov	r2,zero
   17b08:	8808c03a 	cmpne	r4,r17,zero
   17b0c:	010dc83a 	sub	r6,zero,r4
   17b10:	308cf03a 	xor	r6,r6,r2
   17b14:	3105883a 	add	r2,r6,r4
   17b18:	0109c83a 	sub	r4,zero,r4
   17b1c:	2506f03a 	xor	r3,r4,r20
   17b20:	118d803a 	cmpltu	r6,r2,r6
   17b24:	30c7883a 	add	r3,r6,r3
   17b28:	dfc00b17 	ldw	ra,44(sp)
   17b2c:	df000a17 	ldw	fp,40(sp)
   17b30:	ddc00917 	ldw	r23,36(sp)
   17b34:	dd800817 	ldw	r22,32(sp)
   17b38:	dd400717 	ldw	r21,28(sp)
   17b3c:	dd000617 	ldw	r20,24(sp)
   17b40:	dcc00517 	ldw	r19,20(sp)
   17b44:	dc800417 	ldw	r18,16(sp)
   17b48:	dc400317 	ldw	r17,12(sp)
   17b4c:	dc000217 	ldw	r16,8(sp)
   17b50:	dec00c04 	addi	sp,sp,48
   17b54:	f800283a 	ret
   17b58:	00bfffd4 	movui	r2,65535
   17b5c:	11c0692e 	bgeu	r2,r7,17d04 <__divdi3+0x358>
   17b60:	00804034 	movhi	r2,256
   17b64:	10bfffc4 	addi	r2,r2,-1
   17b68:	11c0f12e 	bgeu	r2,r7,17f30 <__divdi3+0x584>
   17b6c:	00800604 	movi	r2,24
   17b70:	1007883a 	mov	r3,r2
   17b74:	3884d83a 	srl	r2,r7,r2
   17b78:	010000b4 	movhi	r4,2
   17b7c:	21273704 	addi	r4,r4,-25380
   17b80:	2085883a 	add	r2,r4,r2
   17b84:	10800003 	ldbu	r2,0(r2)
   17b88:	10c7883a 	add	r3,r2,r3
   17b8c:	00800804 	movi	r2,32
   17b90:	10ebc83a 	sub	r21,r2,r3
   17b94:	a800921e 	bne	r21,zero,17de0 <__divdi3+0x434>
   17b98:	3c00eb36 	bltu	r7,r16,17f48 <__divdi3+0x59c>
   17b9c:	a185403a 	cmpgeu	r2,r20,r6
   17ba0:	0029883a 	mov	r20,zero
   17ba4:	003fd806 	br	17b08 <__alt_mem_onchip_memory_nios_arm+0xfffc7b08>
   17ba8:	3000041e 	bne	r6,zero,17bbc <__divdi3+0x210>
   17bac:	01000044 	movi	r4,1
   17bb0:	000b883a 	mov	r5,zero
   17bb4:	00180e80 	call	180e8 <__udivsi3>
   17bb8:	1027883a 	mov	r19,r2
   17bbc:	00bfffd4 	movui	r2,65535
   17bc0:	14c0462e 	bgeu	r2,r19,17cdc <__divdi3+0x330>
   17bc4:	00804034 	movhi	r2,256
   17bc8:	10bfffc4 	addi	r2,r2,-1
   17bcc:	14c0e42e 	bgeu	r2,r19,17f60 <__divdi3+0x5b4>
   17bd0:	00800604 	movi	r2,24
   17bd4:	1007883a 	mov	r3,r2
   17bd8:	9884d83a 	srl	r2,r19,r2
   17bdc:	010000b4 	movhi	r4,2
   17be0:	21273704 	addi	r4,r4,-25380
   17be4:	2085883a 	add	r2,r4,r2
   17be8:	10800003 	ldbu	r2,0(r2)
   17bec:	01c00804 	movi	r7,32
   17bf0:	10c5883a 	add	r2,r2,r3
   17bf4:	388fc83a 	sub	r7,r7,r2
   17bf8:	3800471e 	bne	r7,zero,17d18 <__divdi3+0x36c>
   17bfc:	982cd43a 	srli	r22,r19,16
   17c00:	84e1c83a 	sub	r16,r16,r19
   17c04:	9dffffcc 	andi	r23,r19,65535
   17c08:	05000044 	movi	r20,1
   17c0c:	8009883a 	mov	r4,r16
   17c10:	b00b883a 	mov	r5,r22
   17c14:	00180f00 	call	180f0 <__umodsi3>
   17c18:	8009883a 	mov	r4,r16
   17c1c:	b00b883a 	mov	r5,r22
   17c20:	102b883a 	mov	r21,r2
   17c24:	00180e80 	call	180e8 <__udivsi3>
   17c28:	1021883a 	mov	r16,r2
   17c2c:	9006d43a 	srli	r3,r18,16
   17c30:	a804943a 	slli	r2,r21,16
   17c34:	85eb383a 	mul	r21,r16,r23
   17c38:	10c4b03a 	or	r2,r2,r3
   17c3c:	1540052e 	bgeu	r2,r21,17c54 <__divdi3+0x2a8>
   17c40:	14c5883a 	add	r2,r2,r19
   17c44:	80ffffc4 	addi	r3,r16,-1
   17c48:	14c00136 	bltu	r2,r19,17c50 <__divdi3+0x2a4>
   17c4c:	1540dc36 	bltu	r2,r21,17fc0 <__divdi3+0x614>
   17c50:	1821883a 	mov	r16,r3
   17c54:	156bc83a 	sub	r21,r2,r21
   17c58:	a809883a 	mov	r4,r21
   17c5c:	b00b883a 	mov	r5,r22
   17c60:	00180f00 	call	180f0 <__umodsi3>
   17c64:	1039883a 	mov	fp,r2
   17c68:	b00b883a 	mov	r5,r22
   17c6c:	a809883a 	mov	r4,r21
   17c70:	00180e80 	call	180e8 <__udivsi3>
   17c74:	e038943a 	slli	fp,fp,16
   17c78:	15ef383a 	mul	r23,r2,r23
   17c7c:	917fffcc 	andi	r5,r18,65535
   17c80:	e14ab03a 	or	r5,fp,r5
   17c84:	2dc0052e 	bgeu	r5,r23,17c9c <__divdi3+0x2f0>
   17c88:	2ccb883a 	add	r5,r5,r19
   17c8c:	10ffffc4 	addi	r3,r2,-1
   17c90:	2cc00136 	bltu	r5,r19,17c98 <__divdi3+0x2ec>
   17c94:	2dc0c336 	bltu	r5,r23,17fa4 <__divdi3+0x5f8>
   17c98:	1805883a 	mov	r2,r3
   17c9c:	8020943a 	slli	r16,r16,16
   17ca0:	1404b03a 	or	r2,r2,r16
   17ca4:	003f9806 	br	17b08 <__alt_mem_onchip_memory_nios_arm+0xfffc7b08>
   17ca8:	018dc83a 	sub	r6,zero,r6
   17cac:	3004c03a 	cmpne	r2,r6,zero
   17cb0:	01cfc83a 	sub	r7,zero,r7
   17cb4:	0462303a 	nor	r17,zero,r17
   17cb8:	388fc83a 	sub	r7,r7,r2
   17cbc:	003f4b06 	br	179ec <__alt_mem_onchip_memory_nios_arm+0xfffc79ec>
   17cc0:	0105c83a 	sub	r2,zero,r4
   17cc4:	1006c03a 	cmpne	r3,r2,zero
   17cc8:	014bc83a 	sub	r5,zero,r5
   17ccc:	1029883a 	mov	r20,r2
   17cd0:	28e1c83a 	sub	r16,r5,r3
   17cd4:	047fffc4 	movi	r17,-1
   17cd8:	003f4306 	br	179e8 <__alt_mem_onchip_memory_nios_arm+0xfffc79e8>
   17cdc:	00803fc4 	movi	r2,255
   17ce0:	14c0a52e 	bgeu	r2,r19,17f78 <__divdi3+0x5cc>
   17ce4:	00800204 	movi	r2,8
   17ce8:	1007883a 	mov	r3,r2
   17cec:	003fba06 	br	17bd8 <__alt_mem_onchip_memory_nios_arm+0xfffc7bd8>
   17cf0:	00803fc4 	movi	r2,255
   17cf4:	1180912e 	bgeu	r2,r6,17f3c <__divdi3+0x590>
   17cf8:	00800204 	movi	r2,8
   17cfc:	1011883a 	mov	r8,r2
   17d00:	003f4606 	br	17a1c <__alt_mem_onchip_memory_nios_arm+0xfffc7a1c>
   17d04:	00803fc4 	movi	r2,255
   17d08:	11c0922e 	bgeu	r2,r7,17f54 <__divdi3+0x5a8>
   17d0c:	00800204 	movi	r2,8
   17d10:	1007883a 	mov	r3,r2
   17d14:	003f9706 	br	17b74 <__alt_mem_onchip_memory_nios_arm+0xfffc7b74>
   17d18:	99e6983a 	sll	r19,r19,r7
   17d1c:	80aed83a 	srl	r23,r16,r2
   17d20:	81cc983a 	sll	r6,r16,r7
   17d24:	982cd43a 	srli	r22,r19,16
   17d28:	a084d83a 	srl	r2,r20,r2
   17d2c:	b809883a 	mov	r4,r23
   17d30:	b00b883a 	mov	r5,r22
   17d34:	30aab03a 	or	r21,r6,r2
   17d38:	a1e4983a 	sll	r18,r20,r7
   17d3c:	00180f00 	call	180f0 <__umodsi3>
   17d40:	b809883a 	mov	r4,r23
   17d44:	b00b883a 	mov	r5,r22
   17d48:	1021883a 	mov	r16,r2
   17d4c:	00180e80 	call	180e8 <__udivsi3>
   17d50:	9dffffcc 	andi	r23,r19,65535
   17d54:	8020943a 	slli	r16,r16,16
   17d58:	a80ad43a 	srli	r5,r21,16
   17d5c:	15f9383a 	mul	fp,r2,r23
   17d60:	1029883a 	mov	r20,r2
   17d64:	8146b03a 	or	r3,r16,r5
   17d68:	1f00062e 	bgeu	r3,fp,17d84 <__divdi3+0x3d8>
   17d6c:	1cc7883a 	add	r3,r3,r19
   17d70:	10bfffc4 	addi	r2,r2,-1
   17d74:	1cc08936 	bltu	r3,r19,17f9c <__divdi3+0x5f0>
   17d78:	1f00882e 	bgeu	r3,fp,17f9c <__divdi3+0x5f0>
   17d7c:	a53fff84 	addi	r20,r20,-2
   17d80:	1cc7883a 	add	r3,r3,r19
   17d84:	1f39c83a 	sub	fp,r3,fp
   17d88:	e009883a 	mov	r4,fp
   17d8c:	b00b883a 	mov	r5,r22
   17d90:	00180f00 	call	180f0 <__umodsi3>
   17d94:	1021883a 	mov	r16,r2
   17d98:	b00b883a 	mov	r5,r22
   17d9c:	e009883a 	mov	r4,fp
   17da0:	00180e80 	call	180e8 <__udivsi3>
   17da4:	8020943a 	slli	r16,r16,16
   17da8:	15cb383a 	mul	r5,r2,r23
   17dac:	a9bfffcc 	andi	r6,r21,65535
   17db0:	818cb03a 	or	r6,r16,r6
   17db4:	3140062e 	bgeu	r6,r5,17dd0 <__divdi3+0x424>
   17db8:	34cd883a 	add	r6,r6,r19
   17dbc:	10ffffc4 	addi	r3,r2,-1
   17dc0:	34c07236 	bltu	r6,r19,17f8c <__divdi3+0x5e0>
   17dc4:	3140712e 	bgeu	r6,r5,17f8c <__divdi3+0x5e0>
   17dc8:	10bfff84 	addi	r2,r2,-2
   17dcc:	34cd883a 	add	r6,r6,r19
   17dd0:	a028943a 	slli	r20,r20,16
   17dd4:	3161c83a 	sub	r16,r6,r5
   17dd8:	1528b03a 	or	r20,r2,r20
   17ddc:	003f8b06 	br	17c0c <__alt_mem_onchip_memory_nios_arm+0xfffc7c0c>
   17de0:	30c4d83a 	srl	r2,r6,r3
   17de4:	3d4e983a 	sll	r7,r7,r21
   17de8:	80f8d83a 	srl	fp,r16,r3
   17dec:	a0d0d83a 	srl	r8,r20,r3
   17df0:	38a4b03a 	or	r18,r7,r2
   17df4:	8546983a 	sll	r3,r16,r21
   17df8:	9026d43a 	srli	r19,r18,16
   17dfc:	e009883a 	mov	r4,fp
   17e00:	1a10b03a 	or	r8,r3,r8
   17e04:	980b883a 	mov	r5,r19
   17e08:	da000015 	stw	r8,0(sp)
   17e0c:	356c983a 	sll	r22,r6,r21
   17e10:	00180f00 	call	180f0 <__umodsi3>
   17e14:	e009883a 	mov	r4,fp
   17e18:	980b883a 	mov	r5,r19
   17e1c:	102f883a 	mov	r23,r2
   17e20:	00180e80 	call	180e8 <__udivsi3>
   17e24:	d8c00017 	ldw	r3,0(sp)
   17e28:	1021883a 	mov	r16,r2
   17e2c:	973fffcc 	andi	fp,r18,65535
   17e30:	b804943a 	slli	r2,r23,16
   17e34:	1808d43a 	srli	r4,r3,16
   17e38:	872f383a 	mul	r23,r16,fp
   17e3c:	1104b03a 	or	r2,r2,r4
   17e40:	15c0062e 	bgeu	r2,r23,17e5c <__divdi3+0x4b0>
   17e44:	1485883a 	add	r2,r2,r18
   17e48:	80ffffc4 	addi	r3,r16,-1
   17e4c:	14805136 	bltu	r2,r18,17f94 <__divdi3+0x5e8>
   17e50:	15c0502e 	bgeu	r2,r23,17f94 <__divdi3+0x5e8>
   17e54:	843fff84 	addi	r16,r16,-2
   17e58:	1485883a 	add	r2,r2,r18
   17e5c:	15efc83a 	sub	r23,r2,r23
   17e60:	b809883a 	mov	r4,r23
   17e64:	980b883a 	mov	r5,r19
   17e68:	00180f00 	call	180f0 <__umodsi3>
   17e6c:	b809883a 	mov	r4,r23
   17e70:	980b883a 	mov	r5,r19
   17e74:	d8800115 	stw	r2,4(sp)
   17e78:	00180e80 	call	180e8 <__udivsi3>
   17e7c:	d8c00117 	ldw	r3,4(sp)
   17e80:	d9400017 	ldw	r5,0(sp)
   17e84:	1709383a 	mul	r4,r2,fp
   17e88:	1806943a 	slli	r3,r3,16
   17e8c:	2a3fffcc 	andi	r8,r5,65535
   17e90:	1a06b03a 	or	r3,r3,r8
   17e94:	1900062e 	bgeu	r3,r4,17eb0 <__divdi3+0x504>
   17e98:	1c87883a 	add	r3,r3,r18
   17e9c:	117fffc4 	addi	r5,r2,-1
   17ea0:	1c803836 	bltu	r3,r18,17f84 <__divdi3+0x5d8>
   17ea4:	1900372e 	bgeu	r3,r4,17f84 <__divdi3+0x5d8>
   17ea8:	10bfff84 	addi	r2,r2,-2
   17eac:	1c87883a 	add	r3,r3,r18
   17eb0:	8020943a 	slli	r16,r16,16
   17eb4:	b17fffcc 	andi	r5,r22,65535
   17eb8:	b02cd43a 	srli	r22,r22,16
   17ebc:	140cb03a 	or	r6,r2,r16
   17ec0:	30bfffcc 	andi	r2,r6,65535
   17ec4:	3010d43a 	srli	r8,r6,16
   17ec8:	1153383a 	mul	r9,r2,r5
   17ecc:	1585383a 	mul	r2,r2,r22
   17ed0:	414b383a 	mul	r5,r8,r5
   17ed4:	480ed43a 	srli	r7,r9,16
   17ed8:	1907c83a 	sub	r3,r3,r4
   17edc:	2885883a 	add	r2,r5,r2
   17ee0:	11c5883a 	add	r2,r2,r7
   17ee4:	45ad383a 	mul	r22,r8,r22
   17ee8:	1140022e 	bgeu	r2,r5,17ef4 <__divdi3+0x548>
   17eec:	01000074 	movhi	r4,1
   17ef0:	b12d883a 	add	r22,r22,r4
   17ef4:	1008d43a 	srli	r4,r2,16
   17ef8:	b12d883a 	add	r22,r22,r4
   17efc:	1d800936 	bltu	r3,r22,17f24 <__divdi3+0x578>
   17f00:	1d800326 	beq	r3,r22,17f10 <__divdi3+0x564>
   17f04:	3005883a 	mov	r2,r6
   17f08:	0029883a 	mov	r20,zero
   17f0c:	003efe06 	br	17b08 <__alt_mem_onchip_memory_nios_arm+0xfffc7b08>
   17f10:	1006943a 	slli	r3,r2,16
   17f14:	a544983a 	sll	r2,r20,r21
   17f18:	4a7fffcc 	andi	r9,r9,65535
   17f1c:	1a47883a 	add	r3,r3,r9
   17f20:	10fff82e 	bgeu	r2,r3,17f04 <__alt_mem_onchip_memory_nios_arm+0xfffc7f04>
   17f24:	30bfffc4 	addi	r2,r6,-1
   17f28:	0029883a 	mov	r20,zero
   17f2c:	003ef606 	br	17b08 <__alt_mem_onchip_memory_nios_arm+0xfffc7b08>
   17f30:	00800404 	movi	r2,16
   17f34:	1007883a 	mov	r3,r2
   17f38:	003f0e06 	br	17b74 <__alt_mem_onchip_memory_nios_arm+0xfffc7b74>
   17f3c:	0005883a 	mov	r2,zero
   17f40:	0011883a 	mov	r8,zero
   17f44:	003eb506 	br	17a1c <__alt_mem_onchip_memory_nios_arm+0xfffc7a1c>
   17f48:	0029883a 	mov	r20,zero
   17f4c:	00800044 	movi	r2,1
   17f50:	003eed06 	br	17b08 <__alt_mem_onchip_memory_nios_arm+0xfffc7b08>
   17f54:	0005883a 	mov	r2,zero
   17f58:	0007883a 	mov	r3,zero
   17f5c:	003f0506 	br	17b74 <__alt_mem_onchip_memory_nios_arm+0xfffc7b74>
   17f60:	00800404 	movi	r2,16
   17f64:	1007883a 	mov	r3,r2
   17f68:	003f1b06 	br	17bd8 <__alt_mem_onchip_memory_nios_arm+0xfffc7bd8>
   17f6c:	00800404 	movi	r2,16
   17f70:	1011883a 	mov	r8,r2
   17f74:	003ea906 	br	17a1c <__alt_mem_onchip_memory_nios_arm+0xfffc7a1c>
   17f78:	0005883a 	mov	r2,zero
   17f7c:	0007883a 	mov	r3,zero
   17f80:	003f1506 	br	17bd8 <__alt_mem_onchip_memory_nios_arm+0xfffc7bd8>
   17f84:	2805883a 	mov	r2,r5
   17f88:	003fc906 	br	17eb0 <__alt_mem_onchip_memory_nios_arm+0xfffc7eb0>
   17f8c:	1805883a 	mov	r2,r3
   17f90:	003f8f06 	br	17dd0 <__alt_mem_onchip_memory_nios_arm+0xfffc7dd0>
   17f94:	1821883a 	mov	r16,r3
   17f98:	003fb006 	br	17e5c <__alt_mem_onchip_memory_nios_arm+0xfffc7e5c>
   17f9c:	1029883a 	mov	r20,r2
   17fa0:	003f7806 	br	17d84 <__alt_mem_onchip_memory_nios_arm+0xfffc7d84>
   17fa4:	10bfff84 	addi	r2,r2,-2
   17fa8:	003f3c06 	br	17c9c <__alt_mem_onchip_memory_nios_arm+0xfffc7c9c>
   17fac:	10bfff84 	addi	r2,r2,-2
   17fb0:	003ece06 	br	17aec <__alt_mem_onchip_memory_nios_arm+0xfffc7aec>
   17fb4:	843fff84 	addi	r16,r16,-2
   17fb8:	14c5883a 	add	r2,r2,r19
   17fbc:	003eb906 	br	17aa4 <__alt_mem_onchip_memory_nios_arm+0xfffc7aa4>
   17fc0:	843fff84 	addi	r16,r16,-2
   17fc4:	14c5883a 	add	r2,r2,r19
   17fc8:	003f2206 	br	17c54 <__alt_mem_onchip_memory_nios_arm+0xfffc7c54>

00017fcc <udivmodsi4>:
   17fcc:	2900182e 	bgeu	r5,r4,18030 <udivmodsi4+0x64>
   17fd0:	28001716 	blt	r5,zero,18030 <udivmodsi4+0x64>
   17fd4:	00800804 	movi	r2,32
   17fd8:	00c00044 	movi	r3,1
   17fdc:	00000206 	br	17fe8 <udivmodsi4+0x1c>
   17fe0:	10001126 	beq	r2,zero,18028 <udivmodsi4+0x5c>
   17fe4:	28000516 	blt	r5,zero,17ffc <udivmodsi4+0x30>
   17fe8:	294b883a 	add	r5,r5,r5
   17fec:	10bfffc4 	addi	r2,r2,-1
   17ff0:	18c7883a 	add	r3,r3,r3
   17ff4:	293ffa36 	bltu	r5,r4,17fe0 <__alt_mem_onchip_memory_nios_arm+0xfffc7fe0>
   17ff8:	18000b26 	beq	r3,zero,18028 <udivmodsi4+0x5c>
   17ffc:	0005883a 	mov	r2,zero
   18000:	21400236 	bltu	r4,r5,1800c <udivmodsi4+0x40>
   18004:	2149c83a 	sub	r4,r4,r5
   18008:	10c4b03a 	or	r2,r2,r3
   1800c:	1806d07a 	srli	r3,r3,1
   18010:	280ad07a 	srli	r5,r5,1
   18014:	183ffa1e 	bne	r3,zero,18000 <__alt_mem_onchip_memory_nios_arm+0xfffc8000>
   18018:	3000011e 	bne	r6,zero,18020 <udivmodsi4+0x54>
   1801c:	f800283a 	ret
   18020:	2005883a 	mov	r2,r4
   18024:	f800283a 	ret
   18028:	0005883a 	mov	r2,zero
   1802c:	003ffa06 	br	18018 <__alt_mem_onchip_memory_nios_arm+0xfffc8018>
   18030:	00c00044 	movi	r3,1
   18034:	003ff106 	br	17ffc <__alt_mem_onchip_memory_nios_arm+0xfffc7ffc>

00018038 <__divsi3>:
   18038:	defffe04 	addi	sp,sp,-8
   1803c:	dfc00115 	stw	ra,4(sp)
   18040:	dc000015 	stw	r16,0(sp)
   18044:	20000b16 	blt	r4,zero,18074 <__divsi3+0x3c>
   18048:	0021883a 	mov	r16,zero
   1804c:	28000c16 	blt	r5,zero,18080 <__divsi3+0x48>
   18050:	000d883a 	mov	r6,zero
   18054:	0017fcc0 	call	17fcc <udivmodsi4>
   18058:	0407c83a 	sub	r3,zero,r16
   1805c:	1884f03a 	xor	r2,r3,r2
   18060:	1405883a 	add	r2,r2,r16
   18064:	dfc00117 	ldw	ra,4(sp)
   18068:	dc000017 	ldw	r16,0(sp)
   1806c:	dec00204 	addi	sp,sp,8
   18070:	f800283a 	ret
   18074:	0109c83a 	sub	r4,zero,r4
   18078:	04000044 	movi	r16,1
   1807c:	283ff40e 	bge	r5,zero,18050 <__alt_mem_onchip_memory_nios_arm+0xfffc8050>
   18080:	014bc83a 	sub	r5,zero,r5
   18084:	8400005c 	xori	r16,r16,1
   18088:	003ff106 	br	18050 <__alt_mem_onchip_memory_nios_arm+0xfffc8050>

0001808c <__modsi3>:
   1808c:	defffd04 	addi	sp,sp,-12
   18090:	dfc00215 	stw	ra,8(sp)
   18094:	dc400115 	stw	r17,4(sp)
   18098:	dc000015 	stw	r16,0(sp)
   1809c:	20000c16 	blt	r4,zero,180d0 <__modsi3+0x44>
   180a0:	0023883a 	mov	r17,zero
   180a4:	0021883a 	mov	r16,zero
   180a8:	28000d16 	blt	r5,zero,180e0 <__modsi3+0x54>
   180ac:	01800044 	movi	r6,1
   180b0:	0017fcc0 	call	17fcc <udivmodsi4>
   180b4:	1404f03a 	xor	r2,r2,r16
   180b8:	8885883a 	add	r2,r17,r2
   180bc:	dfc00217 	ldw	ra,8(sp)
   180c0:	dc400117 	ldw	r17,4(sp)
   180c4:	dc000017 	ldw	r16,0(sp)
   180c8:	dec00304 	addi	sp,sp,12
   180cc:	f800283a 	ret
   180d0:	0109c83a 	sub	r4,zero,r4
   180d4:	04400044 	movi	r17,1
   180d8:	043fffc4 	movi	r16,-1
   180dc:	283ff30e 	bge	r5,zero,180ac <__alt_mem_onchip_memory_nios_arm+0xfffc80ac>
   180e0:	014bc83a 	sub	r5,zero,r5
   180e4:	003ff106 	br	180ac <__alt_mem_onchip_memory_nios_arm+0xfffc80ac>

000180e8 <__udivsi3>:
   180e8:	000d883a 	mov	r6,zero
   180ec:	0017fcc1 	jmpi	17fcc <udivmodsi4>

000180f0 <__umodsi3>:
   180f0:	01800044 	movi	r6,1
   180f4:	0017fcc1 	jmpi	17fcc <udivmodsi4>

000180f8 <memcpy>:
   180f8:	2005883a 	mov	r2,r4
   180fc:	0007883a 	mov	r3,zero
   18100:	19800626 	beq	r3,r6,1811c <memcpy+0x24>
   18104:	28c9883a 	add	r4,r5,r3
   18108:	21c00003 	ldbu	r7,0(r4)
   1810c:	10c9883a 	add	r4,r2,r3
   18110:	18c00044 	addi	r3,r3,1
   18114:	21c00005 	stb	r7,0(r4)
   18118:	003ff906 	br	18100 <__alt_mem_onchip_memory_nios_arm+0xfffc8100>
   1811c:	f800283a 	ret

00018120 <memset>:
   18120:	2005883a 	mov	r2,r4
   18124:	2007883a 	mov	r3,r4
   18128:	218d883a 	add	r6,r4,r6
   1812c:	19800326 	beq	r3,r6,1813c <memset+0x1c>
   18130:	19400005 	stb	r5,0(r3)
   18134:	18c00044 	addi	r3,r3,1
   18138:	003ffc06 	br	1812c <__alt_mem_onchip_memory_nios_arm+0xfffc812c>
   1813c:	f800283a 	ret

00018140 <_sprintf_r>:
   18140:	defff704 	addi	sp,sp,-36
   18144:	dfc00715 	stw	ra,28(sp)
   18148:	d9c00815 	stw	r7,32(sp)
   1814c:	00808204 	movi	r2,520
   18150:	d880000d 	sth	r2,0(sp)
   18154:	00a00034 	movhi	r2,32768
   18158:	10bfffc4 	addi	r2,r2,-1
   1815c:	d8800515 	stw	r2,20(sp)
   18160:	d8800315 	stw	r2,12(sp)
   18164:	00bfffc4 	movi	r2,-1
   18168:	d880008d 	sth	r2,2(sp)
   1816c:	008000b4 	movhi	r2,2
   18170:	d9400415 	stw	r5,16(sp)
   18174:	d9400215 	stw	r5,8(sp)
   18178:	10a23304 	addi	r2,r2,-30516
   1817c:	d80b883a 	mov	r5,sp
   18180:	d9c00804 	addi	r7,sp,32
   18184:	d8800115 	stw	r2,4(sp)
   18188:	d8000615 	stw	zero,24(sp)
   1818c:	00182880 	call	18288 <___svfprintf_internal_r>
   18190:	d8c00417 	ldw	r3,16(sp)
   18194:	18000005 	stb	zero,0(r3)
   18198:	dfc00717 	ldw	ra,28(sp)
   1819c:	dec00904 	addi	sp,sp,36
   181a0:	f800283a 	ret

000181a4 <sprintf>:
   181a4:	defff604 	addi	sp,sp,-40
   181a8:	dfc00715 	stw	ra,28(sp)
   181ac:	d9800815 	stw	r6,32(sp)
   181b0:	d9c00915 	stw	r7,36(sp)
   181b4:	00808204 	movi	r2,520
   181b8:	d880000d 	sth	r2,0(sp)
   181bc:	00a00034 	movhi	r2,32768
   181c0:	10bfffc4 	addi	r2,r2,-1
   181c4:	d8800515 	stw	r2,20(sp)
   181c8:	d8800315 	stw	r2,12(sp)
   181cc:	00bfffc4 	movi	r2,-1
   181d0:	d880008d 	sth	r2,2(sp)
   181d4:	008000b4 	movhi	r2,2
   181d8:	10a23304 	addi	r2,r2,-30516
   181dc:	d8800115 	stw	r2,4(sp)
   181e0:	008000b4 	movhi	r2,2
   181e4:	10ac3a04 	addi	r2,r2,-20248
   181e8:	d9000415 	stw	r4,16(sp)
   181ec:	d9000215 	stw	r4,8(sp)
   181f0:	11000017 	ldw	r4,0(r2)
   181f4:	280d883a 	mov	r6,r5
   181f8:	d9c00804 	addi	r7,sp,32
   181fc:	d80b883a 	mov	r5,sp
   18200:	d8000615 	stw	zero,24(sp)
   18204:	00182880 	call	18288 <___svfprintf_internal_r>
   18208:	d8c00417 	ldw	r3,16(sp)
   1820c:	18000005 	stb	zero,0(r3)
   18210:	dfc00717 	ldw	ra,28(sp)
   18214:	dec00a04 	addi	sp,sp,40
   18218:	f800283a 	ret

0001821c <print_repeat>:
   1821c:	defffb04 	addi	sp,sp,-20
   18220:	dc800315 	stw	r18,12(sp)
   18224:	dc400215 	stw	r17,8(sp)
   18228:	dc000115 	stw	r16,4(sp)
   1822c:	dfc00415 	stw	ra,16(sp)
   18230:	2025883a 	mov	r18,r4
   18234:	2823883a 	mov	r17,r5
   18238:	d9800005 	stb	r6,0(sp)
   1823c:	3821883a 	mov	r16,r7
   18240:	04000a0e 	bge	zero,r16,1826c <print_repeat+0x50>
   18244:	88800117 	ldw	r2,4(r17)
   18248:	9009883a 	mov	r4,r18
   1824c:	880b883a 	mov	r5,r17
   18250:	d80d883a 	mov	r6,sp
   18254:	01c00044 	movi	r7,1
   18258:	103ee83a 	callr	r2
   1825c:	843fffc4 	addi	r16,r16,-1
   18260:	103ff726 	beq	r2,zero,18240 <__alt_mem_onchip_memory_nios_arm+0xfffc8240>
   18264:	00bfffc4 	movi	r2,-1
   18268:	00000106 	br	18270 <print_repeat+0x54>
   1826c:	0005883a 	mov	r2,zero
   18270:	dfc00417 	ldw	ra,16(sp)
   18274:	dc800317 	ldw	r18,12(sp)
   18278:	dc400217 	ldw	r17,8(sp)
   1827c:	dc000117 	ldw	r16,4(sp)
   18280:	dec00504 	addi	sp,sp,20
   18284:	f800283a 	ret

00018288 <___svfprintf_internal_r>:
   18288:	deffe404 	addi	sp,sp,-112
   1828c:	d8c00804 	addi	r3,sp,32
   18290:	df001a15 	stw	fp,104(sp)
   18294:	ddc01915 	stw	r23,100(sp)
   18298:	dd801815 	stw	r22,96(sp)
   1829c:	dd401715 	stw	r21,92(sp)
   182a0:	dd001615 	stw	r20,88(sp)
   182a4:	dcc01515 	stw	r19,84(sp)
   182a8:	dc801415 	stw	r18,80(sp)
   182ac:	dc401315 	stw	r17,76(sp)
   182b0:	dc001215 	stw	r16,72(sp)
   182b4:	dfc01b15 	stw	ra,108(sp)
   182b8:	2027883a 	mov	r19,r4
   182bc:	2839883a 	mov	fp,r5
   182c0:	382f883a 	mov	r23,r7
   182c4:	d9800f15 	stw	r6,60(sp)
   182c8:	0021883a 	mov	r16,zero
   182cc:	d8000e15 	stw	zero,56(sp)
   182d0:	002d883a 	mov	r22,zero
   182d4:	0029883a 	mov	r20,zero
   182d8:	0025883a 	mov	r18,zero
   182dc:	0023883a 	mov	r17,zero
   182e0:	d8000c15 	stw	zero,48(sp)
   182e4:	d8000b15 	stw	zero,44(sp)
   182e8:	002b883a 	mov	r21,zero
   182ec:	d8c00915 	stw	r3,36(sp)
   182f0:	d8c00f17 	ldw	r3,60(sp)
   182f4:	19000003 	ldbu	r4,0(r3)
   182f8:	20803fcc 	andi	r2,r4,255
   182fc:	1080201c 	xori	r2,r2,128
   18300:	10bfe004 	addi	r2,r2,-128
   18304:	10012426 	beq	r2,zero,18798 <___svfprintf_internal_r+0x510>
   18308:	00c00044 	movi	r3,1
   1830c:	a8c01426 	beq	r21,r3,18360 <___svfprintf_internal_r+0xd8>
   18310:	1d400216 	blt	r3,r21,1831c <___svfprintf_internal_r+0x94>
   18314:	a8000626 	beq	r21,zero,18330 <___svfprintf_internal_r+0xa8>
   18318:	00011b06 	br	18788 <___svfprintf_internal_r+0x500>
   1831c:	01400084 	movi	r5,2
   18320:	a9401d26 	beq	r21,r5,18398 <___svfprintf_internal_r+0x110>
   18324:	014000c4 	movi	r5,3
   18328:	a9402926 	beq	r21,r5,183d0 <___svfprintf_internal_r+0x148>
   1832c:	00011606 	br	18788 <___svfprintf_internal_r+0x500>
   18330:	01400944 	movi	r5,37
   18334:	11410326 	beq	r2,r5,18744 <___svfprintf_internal_r+0x4bc>
   18338:	e0800117 	ldw	r2,4(fp)
   1833c:	d9000005 	stb	r4,0(sp)
   18340:	e00b883a 	mov	r5,fp
   18344:	9809883a 	mov	r4,r19
   18348:	d80d883a 	mov	r6,sp
   1834c:	01c00044 	movi	r7,1
   18350:	103ee83a 	callr	r2
   18354:	1000de1e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   18358:	84000044 	addi	r16,r16,1
   1835c:	00010a06 	br	18788 <___svfprintf_internal_r+0x500>
   18360:	01400c04 	movi	r5,48
   18364:	11410026 	beq	r2,r5,18768 <___svfprintf_internal_r+0x4e0>
   18368:	01400944 	movi	r5,37
   1836c:	11400a1e 	bne	r2,r5,18398 <___svfprintf_internal_r+0x110>
   18370:	d8800005 	stb	r2,0(sp)
   18374:	e0800117 	ldw	r2,4(fp)
   18378:	9809883a 	mov	r4,r19
   1837c:	e00b883a 	mov	r5,fp
   18380:	d80d883a 	mov	r6,sp
   18384:	a80f883a 	mov	r7,r21
   18388:	103ee83a 	callr	r2
   1838c:	1000d01e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   18390:	84000044 	addi	r16,r16,1
   18394:	0000fb06 	br	18784 <___svfprintf_internal_r+0x4fc>
   18398:	217ff404 	addi	r5,r4,-48
   1839c:	29403fcc 	andi	r5,r5,255
   183a0:	00c00244 	movi	r3,9
   183a4:	19400736 	bltu	r3,r5,183c4 <___svfprintf_internal_r+0x13c>
   183a8:	00bfffc4 	movi	r2,-1
   183ac:	88800226 	beq	r17,r2,183b8 <___svfprintf_internal_r+0x130>
   183b0:	8c4002a4 	muli	r17,r17,10
   183b4:	00000106 	br	183bc <___svfprintf_internal_r+0x134>
   183b8:	0023883a 	mov	r17,zero
   183bc:	8963883a 	add	r17,r17,r5
   183c0:	0000ea06 	br	1876c <___svfprintf_internal_r+0x4e4>
   183c4:	01400b84 	movi	r5,46
   183c8:	1140ec26 	beq	r2,r5,1877c <___svfprintf_internal_r+0x4f4>
   183cc:	05400084 	movi	r21,2
   183d0:	213ff404 	addi	r4,r4,-48
   183d4:	21003fcc 	andi	r4,r4,255
   183d8:	00c00244 	movi	r3,9
   183dc:	19000736 	bltu	r3,r4,183fc <___svfprintf_internal_r+0x174>
   183e0:	00bfffc4 	movi	r2,-1
   183e4:	90800226 	beq	r18,r2,183f0 <___svfprintf_internal_r+0x168>
   183e8:	948002a4 	muli	r18,r18,10
   183ec:	00000106 	br	183f4 <___svfprintf_internal_r+0x16c>
   183f0:	0025883a 	mov	r18,zero
   183f4:	9125883a 	add	r18,r18,r4
   183f8:	0000e306 	br	18788 <___svfprintf_internal_r+0x500>
   183fc:	00c01b04 	movi	r3,108
   18400:	10c0dc26 	beq	r2,r3,18774 <___svfprintf_internal_r+0x4ec>
   18404:	013fffc4 	movi	r4,-1
   18408:	91000226 	beq	r18,r4,18414 <___svfprintf_internal_r+0x18c>
   1840c:	d8000b15 	stw	zero,44(sp)
   18410:	00000106 	br	18418 <___svfprintf_internal_r+0x190>
   18414:	04800044 	movi	r18,1
   18418:	01001a44 	movi	r4,105
   1841c:	11001626 	beq	r2,r4,18478 <___svfprintf_internal_r+0x1f0>
   18420:	20800916 	blt	r4,r2,18448 <___svfprintf_internal_r+0x1c0>
   18424:	010018c4 	movi	r4,99
   18428:	11009226 	beq	r2,r4,18674 <___svfprintf_internal_r+0x3ec>
   1842c:	01001904 	movi	r4,100
   18430:	11001126 	beq	r2,r4,18478 <___svfprintf_internal_r+0x1f0>
   18434:	01001604 	movi	r4,88
   18438:	1100d21e 	bne	r2,r4,18784 <___svfprintf_internal_r+0x4fc>
   1843c:	00c00044 	movi	r3,1
   18440:	d8c00e15 	stw	r3,56(sp)
   18444:	00001406 	br	18498 <___svfprintf_internal_r+0x210>
   18448:	01001cc4 	movi	r4,115
   1844c:	1100a226 	beq	r2,r4,186d8 <___svfprintf_internal_r+0x450>
   18450:	20800416 	blt	r4,r2,18464 <___svfprintf_internal_r+0x1dc>
   18454:	01001bc4 	movi	r4,111
   18458:	1100ca1e 	bne	r2,r4,18784 <___svfprintf_internal_r+0x4fc>
   1845c:	05000204 	movi	r20,8
   18460:	00000e06 	br	1849c <___svfprintf_internal_r+0x214>
   18464:	01001d44 	movi	r4,117
   18468:	11000c26 	beq	r2,r4,1849c <___svfprintf_internal_r+0x214>
   1846c:	01001e04 	movi	r4,120
   18470:	11000926 	beq	r2,r4,18498 <___svfprintf_internal_r+0x210>
   18474:	0000c306 	br	18784 <___svfprintf_internal_r+0x4fc>
   18478:	b8800104 	addi	r2,r23,4
   1847c:	b0000726 	beq	r22,zero,1849c <___svfprintf_internal_r+0x214>
   18480:	d8800d15 	stw	r2,52(sp)
   18484:	bdc00017 	ldw	r23,0(r23)
   18488:	b800080e 	bge	r23,zero,184ac <___svfprintf_internal_r+0x224>
   1848c:	05efc83a 	sub	r23,zero,r23
   18490:	02400044 	movi	r9,1
   18494:	00000606 	br	184b0 <___svfprintf_internal_r+0x228>
   18498:	05000404 	movi	r20,16
   1849c:	b8c00104 	addi	r3,r23,4
   184a0:	d8c00d15 	stw	r3,52(sp)
   184a4:	bdc00017 	ldw	r23,0(r23)
   184a8:	002d883a 	mov	r22,zero
   184ac:	0013883a 	mov	r9,zero
   184b0:	002b883a 	mov	r21,zero
   184b4:	dd4d883a 	add	r6,sp,r21
   184b8:	b8001626 	beq	r23,zero,18514 <___svfprintf_internal_r+0x28c>
   184bc:	b809883a 	mov	r4,r23
   184c0:	a00b883a 	mov	r5,r20
   184c4:	d9801015 	stw	r6,64(sp)
   184c8:	da401115 	stw	r9,68(sp)
   184cc:	00180e80 	call	180e8 <__udivsi3>
   184d0:	a089383a 	mul	r4,r20,r2
   184d4:	00c00244 	movi	r3,9
   184d8:	d9801017 	ldw	r6,64(sp)
   184dc:	b92fc83a 	sub	r23,r23,r4
   184e0:	da401117 	ldw	r9,68(sp)
   184e4:	1dc00216 	blt	r3,r23,184f0 <___svfprintf_internal_r+0x268>
   184e8:	bdc00c04 	addi	r23,r23,48
   184ec:	00000506 	br	18504 <___svfprintf_internal_r+0x27c>
   184f0:	d8c00e17 	ldw	r3,56(sp)
   184f4:	18000226 	beq	r3,zero,18500 <___svfprintf_internal_r+0x278>
   184f8:	bdc00dc4 	addi	r23,r23,55
   184fc:	00000106 	br	18504 <___svfprintf_internal_r+0x27c>
   18500:	bdc015c4 	addi	r23,r23,87
   18504:	35c00005 	stb	r23,0(r6)
   18508:	ad400044 	addi	r21,r21,1
   1850c:	102f883a 	mov	r23,r2
   18510:	003fe806 	br	184b4 <__alt_mem_onchip_memory_nios_arm+0xfffc84b4>
   18514:	36c7c83a 	sub	r3,r6,sp
   18518:	d8c00a15 	stw	r3,40(sp)
   1851c:	90c5c83a 	sub	r2,r18,r3
   18520:	302f883a 	mov	r23,r6
   18524:	00800e0e 	bge	zero,r2,18560 <___svfprintf_internal_r+0x2d8>
   18528:	302b883a 	mov	r21,r6
   1852c:	3085883a 	add	r2,r6,r2
   18530:	01400c04 	movi	r5,48
   18534:	d8c00917 	ldw	r3,36(sp)
   18538:	a809883a 	mov	r4,r21
   1853c:	a8c0052e 	bgeu	r21,r3,18554 <___svfprintf_internal_r+0x2cc>
   18540:	ad400044 	addi	r21,r21,1
   18544:	21400005 	stb	r5,0(r4)
   18548:	a82f883a 	mov	r23,r21
   1854c:	a8bff91e 	bne	r21,r2,18534 <__alt_mem_onchip_memory_nios_arm+0xfffc8534>
   18550:	00000106 	br	18558 <___svfprintf_internal_r+0x2d0>
   18554:	a82f883a 	mov	r23,r21
   18558:	aeebc83a 	sub	r21,r21,sp
   1855c:	dd400a15 	stw	r21,40(sp)
   18560:	d8c00a17 	ldw	r3,40(sp)
   18564:	1a51883a 	add	r8,r3,r9
   18568:	d8c00b17 	ldw	r3,44(sp)
   1856c:	8a2bc83a 	sub	r21,r17,r8
   18570:	18001726 	beq	r3,zero,185d0 <___svfprintf_internal_r+0x348>
   18574:	48000a26 	beq	r9,zero,185a0 <___svfprintf_internal_r+0x318>
   18578:	00800b44 	movi	r2,45
   1857c:	d8800805 	stb	r2,32(sp)
   18580:	e0800117 	ldw	r2,4(fp)
   18584:	9809883a 	mov	r4,r19
   18588:	e00b883a 	mov	r5,fp
   1858c:	d9800804 	addi	r6,sp,32
   18590:	01c00044 	movi	r7,1
   18594:	103ee83a 	callr	r2
   18598:	10004d1e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   1859c:	84000044 	addi	r16,r16,1
   185a0:	0540070e 	bge	zero,r21,185c0 <___svfprintf_internal_r+0x338>
   185a4:	9809883a 	mov	r4,r19
   185a8:	e00b883a 	mov	r5,fp
   185ac:	01800c04 	movi	r6,48
   185b0:	a80f883a 	mov	r7,r21
   185b4:	001821c0 	call	1821c <print_repeat>
   185b8:	1000451e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   185bc:	8561883a 	add	r16,r16,r21
   185c0:	d8c00a17 	ldw	r3,40(sp)
   185c4:	b811883a 	mov	r8,r23
   185c8:	1debc83a 	sub	r21,r3,r23
   185cc:	00002206 	br	18658 <___svfprintf_internal_r+0x3d0>
   185d0:	0540090e 	bge	zero,r21,185f8 <___svfprintf_internal_r+0x370>
   185d4:	9809883a 	mov	r4,r19
   185d8:	e00b883a 	mov	r5,fp
   185dc:	01800804 	movi	r6,32
   185e0:	a80f883a 	mov	r7,r21
   185e4:	da401115 	stw	r9,68(sp)
   185e8:	001821c0 	call	1821c <print_repeat>
   185ec:	da401117 	ldw	r9,68(sp)
   185f0:	1000371e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   185f4:	8561883a 	add	r16,r16,r21
   185f8:	483ff126 	beq	r9,zero,185c0 <__alt_mem_onchip_memory_nios_arm+0xfffc85c0>
   185fc:	00800b44 	movi	r2,45
   18600:	d8800805 	stb	r2,32(sp)
   18604:	e0800117 	ldw	r2,4(fp)
   18608:	9809883a 	mov	r4,r19
   1860c:	e00b883a 	mov	r5,fp
   18610:	d9800804 	addi	r6,sp,32
   18614:	01c00044 	movi	r7,1
   18618:	103ee83a 	callr	r2
   1861c:	10002c1e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   18620:	84000044 	addi	r16,r16,1
   18624:	003fe606 	br	185c0 <__alt_mem_onchip_memory_nios_arm+0xfffc85c0>
   18628:	423fffc4 	addi	r8,r8,-1
   1862c:	40800003 	ldbu	r2,0(r8)
   18630:	9809883a 	mov	r4,r19
   18634:	e00b883a 	mov	r5,fp
   18638:	d8800805 	stb	r2,32(sp)
   1863c:	e0800117 	ldw	r2,4(fp)
   18640:	d9800804 	addi	r6,sp,32
   18644:	da001015 	stw	r8,64(sp)
   18648:	01c00044 	movi	r7,1
   1864c:	103ee83a 	callr	r2
   18650:	da001017 	ldw	r8,64(sp)
   18654:	10001e1e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   18658:	8205c83a 	sub	r2,r16,r8
   1865c:	4549883a 	add	r4,r8,r21
   18660:	b885883a 	add	r2,r23,r2
   18664:	013ff016 	blt	zero,r4,18628 <__alt_mem_onchip_memory_nios_arm+0xfffc8628>
   18668:	1021883a 	mov	r16,r2
   1866c:	ddc00d17 	ldw	r23,52(sp)
   18670:	00004406 	br	18784 <___svfprintf_internal_r+0x4fc>
   18674:	00800044 	movi	r2,1
   18678:	1440080e 	bge	r2,r17,1869c <___svfprintf_internal_r+0x414>
   1867c:	8d7fffc4 	addi	r21,r17,-1
   18680:	9809883a 	mov	r4,r19
   18684:	e00b883a 	mov	r5,fp
   18688:	01800804 	movi	r6,32
   1868c:	a80f883a 	mov	r7,r21
   18690:	001821c0 	call	1821c <print_repeat>
   18694:	10000e1e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   18698:	8561883a 	add	r16,r16,r21
   1869c:	b8800017 	ldw	r2,0(r23)
   186a0:	9809883a 	mov	r4,r19
   186a4:	e00b883a 	mov	r5,fp
   186a8:	d8800005 	stb	r2,0(sp)
   186ac:	e0800117 	ldw	r2,4(fp)
   186b0:	d80d883a 	mov	r6,sp
   186b4:	01c00044 	movi	r7,1
   186b8:	bd400104 	addi	r21,r23,4
   186bc:	103ee83a 	callr	r2
   186c0:	1000031e 	bne	r2,zero,186d0 <___svfprintf_internal_r+0x448>
   186c4:	84000044 	addi	r16,r16,1
   186c8:	a82f883a 	mov	r23,r21
   186cc:	00002d06 	br	18784 <___svfprintf_internal_r+0x4fc>
   186d0:	00bfffc4 	movi	r2,-1
   186d4:	00003106 	br	1879c <___svfprintf_internal_r+0x514>
   186d8:	bd400017 	ldw	r21,0(r23)
   186dc:	b8c00104 	addi	r3,r23,4
   186e0:	d8c00a15 	stw	r3,40(sp)
   186e4:	a809883a 	mov	r4,r21
   186e8:	00189c80 	call	189c8 <strlen>
   186ec:	8893c83a 	sub	r9,r17,r2
   186f0:	102f883a 	mov	r23,r2
   186f4:	0240090e 	bge	zero,r9,1871c <___svfprintf_internal_r+0x494>
   186f8:	480f883a 	mov	r7,r9
   186fc:	9809883a 	mov	r4,r19
   18700:	e00b883a 	mov	r5,fp
   18704:	01800804 	movi	r6,32
   18708:	da401115 	stw	r9,68(sp)
   1870c:	001821c0 	call	1821c <print_repeat>
   18710:	da401117 	ldw	r9,68(sp)
   18714:	103fee1e 	bne	r2,zero,186d0 <__alt_mem_onchip_memory_nios_arm+0xfffc86d0>
   18718:	8261883a 	add	r16,r16,r9
   1871c:	e0800117 	ldw	r2,4(fp)
   18720:	9809883a 	mov	r4,r19
   18724:	e00b883a 	mov	r5,fp
   18728:	a80d883a 	mov	r6,r21
   1872c:	b80f883a 	mov	r7,r23
   18730:	103ee83a 	callr	r2
   18734:	103fe61e 	bne	r2,zero,186d0 <__alt_mem_onchip_memory_nios_arm+0xfffc86d0>
   18738:	85e1883a 	add	r16,r16,r23
   1873c:	ddc00a17 	ldw	r23,40(sp)
   18740:	00001006 	br	18784 <___svfprintf_internal_r+0x4fc>
   18744:	05800044 	movi	r22,1
   18748:	04bfffc4 	movi	r18,-1
   1874c:	d8000e15 	stw	zero,56(sp)
   18750:	05000284 	movi	r20,10
   18754:	9023883a 	mov	r17,r18
   18758:	d8000c15 	stw	zero,48(sp)
   1875c:	d8000b15 	stw	zero,44(sp)
   18760:	b02b883a 	mov	r21,r22
   18764:	00000806 	br	18788 <___svfprintf_internal_r+0x500>
   18768:	dd400b15 	stw	r21,44(sp)
   1876c:	05400084 	movi	r21,2
   18770:	00000506 	br	18788 <___svfprintf_internal_r+0x500>
   18774:	00c00044 	movi	r3,1
   18778:	d8c00c15 	stw	r3,48(sp)
   1877c:	054000c4 	movi	r21,3
   18780:	00000106 	br	18788 <___svfprintf_internal_r+0x500>
   18784:	002b883a 	mov	r21,zero
   18788:	d8c00f17 	ldw	r3,60(sp)
   1878c:	18c00044 	addi	r3,r3,1
   18790:	d8c00f15 	stw	r3,60(sp)
   18794:	003ed606 	br	182f0 <__alt_mem_onchip_memory_nios_arm+0xfffc82f0>
   18798:	8005883a 	mov	r2,r16
   1879c:	dfc01b17 	ldw	ra,108(sp)
   187a0:	df001a17 	ldw	fp,104(sp)
   187a4:	ddc01917 	ldw	r23,100(sp)
   187a8:	dd801817 	ldw	r22,96(sp)
   187ac:	dd401717 	ldw	r21,92(sp)
   187b0:	dd001617 	ldw	r20,88(sp)
   187b4:	dcc01517 	ldw	r19,84(sp)
   187b8:	dc801417 	ldw	r18,80(sp)
   187bc:	dc401317 	ldw	r17,76(sp)
   187c0:	dc001217 	ldw	r16,72(sp)
   187c4:	dec01c04 	addi	sp,sp,112
   187c8:	f800283a 	ret

000187cc <__vfprintf_internal_unused>:
   187cc:	2007883a 	mov	r3,r4
   187d0:	010000b4 	movhi	r4,2
   187d4:	212c3a04 	addi	r4,r4,-20248
   187d8:	21000017 	ldw	r4,0(r4)
   187dc:	2805883a 	mov	r2,r5
   187e0:	300f883a 	mov	r7,r6
   187e4:	180b883a 	mov	r5,r3
   187e8:	100d883a 	mov	r6,r2
   187ec:	00182881 	jmpi	18288 <___svfprintf_internal_r>

000187f0 <vprintf>:
   187f0:	008000b4 	movhi	r2,2
   187f4:	10ac3a04 	addi	r2,r2,-20248
   187f8:	10800017 	ldw	r2,0(r2)
   187fc:	2007883a 	mov	r3,r4
   18800:	010000b4 	movhi	r4,2
   18804:	10800217 	ldw	r2,8(r2)
   18808:	21220804 	addi	r4,r4,-30688
   1880c:	280d883a 	mov	r6,r5
   18810:	11000115 	stw	r4,4(r2)
   18814:	180b883a 	mov	r5,r3
   18818:	1009883a 	mov	r4,r2
   1881c:	0018f941 	jmpi	18f94 <__vfprintf_internal>

00018820 <__sfvwrite_small_dev>:
   18820:	2880000b 	ldhu	r2,0(r5)
   18824:	defffa04 	addi	sp,sp,-24
   18828:	dc000015 	stw	r16,0(sp)
   1882c:	dfc00515 	stw	ra,20(sp)
   18830:	dd000415 	stw	r20,16(sp)
   18834:	dcc00315 	stw	r19,12(sp)
   18838:	dc800215 	stw	r18,8(sp)
   1883c:	dc400115 	stw	r17,4(sp)
   18840:	1080020c 	andi	r2,r2,8
   18844:	2821883a 	mov	r16,r5
   18848:	10001726 	beq	r2,zero,188a8 <__sfvwrite_small_dev+0x88>
   1884c:	2880008f 	ldh	r2,2(r5)
   18850:	10001216 	blt	r2,zero,1889c <__sfvwrite_small_dev+0x7c>
   18854:	2027883a 	mov	r19,r4
   18858:	3025883a 	mov	r18,r6
   1885c:	3823883a 	mov	r17,r7
   18860:	05010004 	movi	r20,1024
   18864:	04400b0e 	bge	zero,r17,18894 <__sfvwrite_small_dev+0x74>
   18868:	8140008f 	ldh	r5,2(r16)
   1886c:	880f883a 	mov	r7,r17
   18870:	a440010e 	bge	r20,r17,18878 <__sfvwrite_small_dev+0x58>
   18874:	01c10004 	movi	r7,1024
   18878:	9809883a 	mov	r4,r19
   1887c:	900d883a 	mov	r6,r18
   18880:	0018fb80 	call	18fb8 <_write_r>
   18884:	0080050e 	bge	zero,r2,1889c <__sfvwrite_small_dev+0x7c>
   18888:	88a3c83a 	sub	r17,r17,r2
   1888c:	90a5883a 	add	r18,r18,r2
   18890:	003ff406 	br	18864 <__alt_mem_onchip_memory_nios_arm+0xfffc8864>
   18894:	0005883a 	mov	r2,zero
   18898:	00000406 	br	188ac <__sfvwrite_small_dev+0x8c>
   1889c:	8080000b 	ldhu	r2,0(r16)
   188a0:	10801014 	ori	r2,r2,64
   188a4:	8080000d 	sth	r2,0(r16)
   188a8:	00bfffc4 	movi	r2,-1
   188ac:	dfc00517 	ldw	ra,20(sp)
   188b0:	dd000417 	ldw	r20,16(sp)
   188b4:	dcc00317 	ldw	r19,12(sp)
   188b8:	dc800217 	ldw	r18,8(sp)
   188bc:	dc400117 	ldw	r17,4(sp)
   188c0:	dc000017 	ldw	r16,0(sp)
   188c4:	dec00604 	addi	sp,sp,24
   188c8:	f800283a 	ret

000188cc <__sfvwrite_small_str>:
   188cc:	2880000b 	ldhu	r2,0(r5)
   188d0:	defffd04 	addi	sp,sp,-12
   188d4:	dc000015 	stw	r16,0(sp)
   188d8:	dfc00215 	stw	ra,8(sp)
   188dc:	dc400115 	stw	r17,4(sp)
   188e0:	10c0020c 	andi	r3,r2,8
   188e4:	2821883a 	mov	r16,r5
   188e8:	18001926 	beq	r3,zero,18950 <__sfvwrite_small_str+0x84>
   188ec:	28c0008f 	ldh	r3,2(r5)
   188f0:	1800150e 	bge	r3,zero,18948 <__sfvwrite_small_str+0x7c>
   188f4:	10c0800c 	andi	r3,r2,512
   188f8:	18001326 	beq	r3,zero,18948 <__sfvwrite_small_str+0x7c>
   188fc:	2c400517 	ldw	r17,20(r5)
   18900:	89c0030e 	bge	r17,r7,18910 <__sfvwrite_small_str+0x44>
   18904:	10c0200c 	andi	r3,r2,128
   18908:	18000326 	beq	r3,zero,18918 <__sfvwrite_small_str+0x4c>
   1890c:	00000e06 	br	18948 <__sfvwrite_small_str+0x7c>
   18910:	3c40010e 	bge	r7,r17,18918 <__sfvwrite_small_str+0x4c>
   18914:	3823883a 	mov	r17,r7
   18918:	81000417 	ldw	r4,16(r16)
   1891c:	300b883a 	mov	r5,r6
   18920:	880d883a 	mov	r6,r17
   18924:	00189680 	call	18968 <memmove>
   18928:	80800517 	ldw	r2,20(r16)
   1892c:	1445c83a 	sub	r2,r2,r17
   18930:	80800515 	stw	r2,20(r16)
   18934:	80800417 	ldw	r2,16(r16)
   18938:	1463883a 	add	r17,r2,r17
   1893c:	84400415 	stw	r17,16(r16)
   18940:	0005883a 	mov	r2,zero
   18944:	00000306 	br	18954 <__sfvwrite_small_str+0x88>
   18948:	10801014 	ori	r2,r2,64
   1894c:	8080000d 	sth	r2,0(r16)
   18950:	00bfffc4 	movi	r2,-1
   18954:	dfc00217 	ldw	ra,8(sp)
   18958:	dc400117 	ldw	r17,4(sp)
   1895c:	dc000017 	ldw	r16,0(sp)
   18960:	dec00304 	addi	sp,sp,12
   18964:	f800283a 	ret

00018968 <memmove>:
   18968:	2005883a 	mov	r2,r4
   1896c:	29000d2e 	bgeu	r5,r4,189a4 <memmove+0x3c>
   18970:	298f883a 	add	r7,r5,r6
   18974:	21c00b2e 	bgeu	r4,r7,189a4 <memmove+0x3c>
   18978:	3007883a 	mov	r3,r6
   1897c:	017fffc4 	movi	r5,-1
   18980:	18ffffc4 	addi	r3,r3,-1
   18984:	19400626 	beq	r3,r5,189a0 <memmove+0x38>
   18988:	1989c83a 	sub	r4,r3,r6
   1898c:	3909883a 	add	r4,r7,r4
   18990:	22000003 	ldbu	r8,0(r4)
   18994:	10c9883a 	add	r4,r2,r3
   18998:	22000005 	stb	r8,0(r4)
   1899c:	003ff806 	br	18980 <__alt_mem_onchip_memory_nios_arm+0xfffc8980>
   189a0:	f800283a 	ret
   189a4:	0007883a 	mov	r3,zero
   189a8:	19800626 	beq	r3,r6,189c4 <memmove+0x5c>
   189ac:	28c9883a 	add	r4,r5,r3
   189b0:	21c00003 	ldbu	r7,0(r4)
   189b4:	10c9883a 	add	r4,r2,r3
   189b8:	18c00044 	addi	r3,r3,1
   189bc:	21c00005 	stb	r7,0(r4)
   189c0:	003ff906 	br	189a8 <__alt_mem_onchip_memory_nios_arm+0xfffc89a8>
   189c4:	f800283a 	ret

000189c8 <strlen>:
   189c8:	2005883a 	mov	r2,r4
   189cc:	10c00007 	ldb	r3,0(r2)
   189d0:	18000226 	beq	r3,zero,189dc <strlen+0x14>
   189d4:	10800044 	addi	r2,r2,1
   189d8:	003ffc06 	br	189cc <__alt_mem_onchip_memory_nios_arm+0xfffc89cc>
   189dc:	1105c83a 	sub	r2,r2,r4
   189e0:	f800283a 	ret

000189e4 <print_repeat>:
   189e4:	defffb04 	addi	sp,sp,-20
   189e8:	dc800315 	stw	r18,12(sp)
   189ec:	dc400215 	stw	r17,8(sp)
   189f0:	dc000115 	stw	r16,4(sp)
   189f4:	dfc00415 	stw	ra,16(sp)
   189f8:	2025883a 	mov	r18,r4
   189fc:	2823883a 	mov	r17,r5
   18a00:	d9800005 	stb	r6,0(sp)
   18a04:	3821883a 	mov	r16,r7
   18a08:	04000a0e 	bge	zero,r16,18a34 <print_repeat+0x50>
   18a0c:	88800117 	ldw	r2,4(r17)
   18a10:	9009883a 	mov	r4,r18
   18a14:	880b883a 	mov	r5,r17
   18a18:	d80d883a 	mov	r6,sp
   18a1c:	01c00044 	movi	r7,1
   18a20:	103ee83a 	callr	r2
   18a24:	843fffc4 	addi	r16,r16,-1
   18a28:	103ff726 	beq	r2,zero,18a08 <__alt_mem_onchip_memory_nios_arm+0xfffc8a08>
   18a2c:	00bfffc4 	movi	r2,-1
   18a30:	00000106 	br	18a38 <print_repeat+0x54>
   18a34:	0005883a 	mov	r2,zero
   18a38:	dfc00417 	ldw	ra,16(sp)
   18a3c:	dc800317 	ldw	r18,12(sp)
   18a40:	dc400217 	ldw	r17,8(sp)
   18a44:	dc000117 	ldw	r16,4(sp)
   18a48:	dec00504 	addi	sp,sp,20
   18a4c:	f800283a 	ret

00018a50 <___vfprintf_internal_r>:
   18a50:	deffe404 	addi	sp,sp,-112
   18a54:	d8c00804 	addi	r3,sp,32
   18a58:	df001a15 	stw	fp,104(sp)
   18a5c:	ddc01915 	stw	r23,100(sp)
   18a60:	dd801815 	stw	r22,96(sp)
   18a64:	dd401715 	stw	r21,92(sp)
   18a68:	dd001615 	stw	r20,88(sp)
   18a6c:	dcc01515 	stw	r19,84(sp)
   18a70:	dc801415 	stw	r18,80(sp)
   18a74:	dc401315 	stw	r17,76(sp)
   18a78:	dc001215 	stw	r16,72(sp)
   18a7c:	dfc01b15 	stw	ra,108(sp)
   18a80:	2027883a 	mov	r19,r4
   18a84:	2839883a 	mov	fp,r5
   18a88:	382f883a 	mov	r23,r7
   18a8c:	d9800f15 	stw	r6,60(sp)
   18a90:	0021883a 	mov	r16,zero
   18a94:	d8000e15 	stw	zero,56(sp)
   18a98:	002d883a 	mov	r22,zero
   18a9c:	0029883a 	mov	r20,zero
   18aa0:	0025883a 	mov	r18,zero
   18aa4:	0023883a 	mov	r17,zero
   18aa8:	d8000c15 	stw	zero,48(sp)
   18aac:	d8000b15 	stw	zero,44(sp)
   18ab0:	002b883a 	mov	r21,zero
   18ab4:	d8c00915 	stw	r3,36(sp)
   18ab8:	d8c00f17 	ldw	r3,60(sp)
   18abc:	19000003 	ldbu	r4,0(r3)
   18ac0:	20803fcc 	andi	r2,r4,255
   18ac4:	1080201c 	xori	r2,r2,128
   18ac8:	10bfe004 	addi	r2,r2,-128
   18acc:	10012426 	beq	r2,zero,18f60 <___vfprintf_internal_r+0x510>
   18ad0:	00c00044 	movi	r3,1
   18ad4:	a8c01426 	beq	r21,r3,18b28 <___vfprintf_internal_r+0xd8>
   18ad8:	1d400216 	blt	r3,r21,18ae4 <___vfprintf_internal_r+0x94>
   18adc:	a8000626 	beq	r21,zero,18af8 <___vfprintf_internal_r+0xa8>
   18ae0:	00011b06 	br	18f50 <___vfprintf_internal_r+0x500>
   18ae4:	01400084 	movi	r5,2
   18ae8:	a9401d26 	beq	r21,r5,18b60 <___vfprintf_internal_r+0x110>
   18aec:	014000c4 	movi	r5,3
   18af0:	a9402926 	beq	r21,r5,18b98 <___vfprintf_internal_r+0x148>
   18af4:	00011606 	br	18f50 <___vfprintf_internal_r+0x500>
   18af8:	01400944 	movi	r5,37
   18afc:	11410326 	beq	r2,r5,18f0c <___vfprintf_internal_r+0x4bc>
   18b00:	e0800117 	ldw	r2,4(fp)
   18b04:	d9000005 	stb	r4,0(sp)
   18b08:	e00b883a 	mov	r5,fp
   18b0c:	9809883a 	mov	r4,r19
   18b10:	d80d883a 	mov	r6,sp
   18b14:	01c00044 	movi	r7,1
   18b18:	103ee83a 	callr	r2
   18b1c:	1000de1e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18b20:	84000044 	addi	r16,r16,1
   18b24:	00010a06 	br	18f50 <___vfprintf_internal_r+0x500>
   18b28:	01400c04 	movi	r5,48
   18b2c:	11410026 	beq	r2,r5,18f30 <___vfprintf_internal_r+0x4e0>
   18b30:	01400944 	movi	r5,37
   18b34:	11400a1e 	bne	r2,r5,18b60 <___vfprintf_internal_r+0x110>
   18b38:	d8800005 	stb	r2,0(sp)
   18b3c:	e0800117 	ldw	r2,4(fp)
   18b40:	9809883a 	mov	r4,r19
   18b44:	e00b883a 	mov	r5,fp
   18b48:	d80d883a 	mov	r6,sp
   18b4c:	a80f883a 	mov	r7,r21
   18b50:	103ee83a 	callr	r2
   18b54:	1000d01e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18b58:	84000044 	addi	r16,r16,1
   18b5c:	0000fb06 	br	18f4c <___vfprintf_internal_r+0x4fc>
   18b60:	217ff404 	addi	r5,r4,-48
   18b64:	29403fcc 	andi	r5,r5,255
   18b68:	00c00244 	movi	r3,9
   18b6c:	19400736 	bltu	r3,r5,18b8c <___vfprintf_internal_r+0x13c>
   18b70:	00bfffc4 	movi	r2,-1
   18b74:	88800226 	beq	r17,r2,18b80 <___vfprintf_internal_r+0x130>
   18b78:	8c4002a4 	muli	r17,r17,10
   18b7c:	00000106 	br	18b84 <___vfprintf_internal_r+0x134>
   18b80:	0023883a 	mov	r17,zero
   18b84:	8963883a 	add	r17,r17,r5
   18b88:	0000ea06 	br	18f34 <___vfprintf_internal_r+0x4e4>
   18b8c:	01400b84 	movi	r5,46
   18b90:	1140ec26 	beq	r2,r5,18f44 <___vfprintf_internal_r+0x4f4>
   18b94:	05400084 	movi	r21,2
   18b98:	213ff404 	addi	r4,r4,-48
   18b9c:	21003fcc 	andi	r4,r4,255
   18ba0:	00c00244 	movi	r3,9
   18ba4:	19000736 	bltu	r3,r4,18bc4 <___vfprintf_internal_r+0x174>
   18ba8:	00bfffc4 	movi	r2,-1
   18bac:	90800226 	beq	r18,r2,18bb8 <___vfprintf_internal_r+0x168>
   18bb0:	948002a4 	muli	r18,r18,10
   18bb4:	00000106 	br	18bbc <___vfprintf_internal_r+0x16c>
   18bb8:	0025883a 	mov	r18,zero
   18bbc:	9125883a 	add	r18,r18,r4
   18bc0:	0000e306 	br	18f50 <___vfprintf_internal_r+0x500>
   18bc4:	00c01b04 	movi	r3,108
   18bc8:	10c0dc26 	beq	r2,r3,18f3c <___vfprintf_internal_r+0x4ec>
   18bcc:	013fffc4 	movi	r4,-1
   18bd0:	91000226 	beq	r18,r4,18bdc <___vfprintf_internal_r+0x18c>
   18bd4:	d8000b15 	stw	zero,44(sp)
   18bd8:	00000106 	br	18be0 <___vfprintf_internal_r+0x190>
   18bdc:	04800044 	movi	r18,1
   18be0:	01001a44 	movi	r4,105
   18be4:	11001626 	beq	r2,r4,18c40 <___vfprintf_internal_r+0x1f0>
   18be8:	20800916 	blt	r4,r2,18c10 <___vfprintf_internal_r+0x1c0>
   18bec:	010018c4 	movi	r4,99
   18bf0:	11009226 	beq	r2,r4,18e3c <___vfprintf_internal_r+0x3ec>
   18bf4:	01001904 	movi	r4,100
   18bf8:	11001126 	beq	r2,r4,18c40 <___vfprintf_internal_r+0x1f0>
   18bfc:	01001604 	movi	r4,88
   18c00:	1100d21e 	bne	r2,r4,18f4c <___vfprintf_internal_r+0x4fc>
   18c04:	00c00044 	movi	r3,1
   18c08:	d8c00e15 	stw	r3,56(sp)
   18c0c:	00001406 	br	18c60 <___vfprintf_internal_r+0x210>
   18c10:	01001cc4 	movi	r4,115
   18c14:	1100a226 	beq	r2,r4,18ea0 <___vfprintf_internal_r+0x450>
   18c18:	20800416 	blt	r4,r2,18c2c <___vfprintf_internal_r+0x1dc>
   18c1c:	01001bc4 	movi	r4,111
   18c20:	1100ca1e 	bne	r2,r4,18f4c <___vfprintf_internal_r+0x4fc>
   18c24:	05000204 	movi	r20,8
   18c28:	00000e06 	br	18c64 <___vfprintf_internal_r+0x214>
   18c2c:	01001d44 	movi	r4,117
   18c30:	11000c26 	beq	r2,r4,18c64 <___vfprintf_internal_r+0x214>
   18c34:	01001e04 	movi	r4,120
   18c38:	11000926 	beq	r2,r4,18c60 <___vfprintf_internal_r+0x210>
   18c3c:	0000c306 	br	18f4c <___vfprintf_internal_r+0x4fc>
   18c40:	b8800104 	addi	r2,r23,4
   18c44:	b0000726 	beq	r22,zero,18c64 <___vfprintf_internal_r+0x214>
   18c48:	d8800d15 	stw	r2,52(sp)
   18c4c:	bdc00017 	ldw	r23,0(r23)
   18c50:	b800080e 	bge	r23,zero,18c74 <___vfprintf_internal_r+0x224>
   18c54:	05efc83a 	sub	r23,zero,r23
   18c58:	02400044 	movi	r9,1
   18c5c:	00000606 	br	18c78 <___vfprintf_internal_r+0x228>
   18c60:	05000404 	movi	r20,16
   18c64:	b8c00104 	addi	r3,r23,4
   18c68:	d8c00d15 	stw	r3,52(sp)
   18c6c:	bdc00017 	ldw	r23,0(r23)
   18c70:	002d883a 	mov	r22,zero
   18c74:	0013883a 	mov	r9,zero
   18c78:	002b883a 	mov	r21,zero
   18c7c:	dd4d883a 	add	r6,sp,r21
   18c80:	b8001626 	beq	r23,zero,18cdc <___vfprintf_internal_r+0x28c>
   18c84:	b809883a 	mov	r4,r23
   18c88:	a00b883a 	mov	r5,r20
   18c8c:	d9801015 	stw	r6,64(sp)
   18c90:	da401115 	stw	r9,68(sp)
   18c94:	00180e80 	call	180e8 <__udivsi3>
   18c98:	a089383a 	mul	r4,r20,r2
   18c9c:	00c00244 	movi	r3,9
   18ca0:	d9801017 	ldw	r6,64(sp)
   18ca4:	b92fc83a 	sub	r23,r23,r4
   18ca8:	da401117 	ldw	r9,68(sp)
   18cac:	1dc00216 	blt	r3,r23,18cb8 <___vfprintf_internal_r+0x268>
   18cb0:	bdc00c04 	addi	r23,r23,48
   18cb4:	00000506 	br	18ccc <___vfprintf_internal_r+0x27c>
   18cb8:	d8c00e17 	ldw	r3,56(sp)
   18cbc:	18000226 	beq	r3,zero,18cc8 <___vfprintf_internal_r+0x278>
   18cc0:	bdc00dc4 	addi	r23,r23,55
   18cc4:	00000106 	br	18ccc <___vfprintf_internal_r+0x27c>
   18cc8:	bdc015c4 	addi	r23,r23,87
   18ccc:	35c00005 	stb	r23,0(r6)
   18cd0:	ad400044 	addi	r21,r21,1
   18cd4:	102f883a 	mov	r23,r2
   18cd8:	003fe806 	br	18c7c <__alt_mem_onchip_memory_nios_arm+0xfffc8c7c>
   18cdc:	36c7c83a 	sub	r3,r6,sp
   18ce0:	d8c00a15 	stw	r3,40(sp)
   18ce4:	90c5c83a 	sub	r2,r18,r3
   18ce8:	302f883a 	mov	r23,r6
   18cec:	00800e0e 	bge	zero,r2,18d28 <___vfprintf_internal_r+0x2d8>
   18cf0:	302b883a 	mov	r21,r6
   18cf4:	3085883a 	add	r2,r6,r2
   18cf8:	01400c04 	movi	r5,48
   18cfc:	d8c00917 	ldw	r3,36(sp)
   18d00:	a809883a 	mov	r4,r21
   18d04:	a8c0052e 	bgeu	r21,r3,18d1c <___vfprintf_internal_r+0x2cc>
   18d08:	ad400044 	addi	r21,r21,1
   18d0c:	21400005 	stb	r5,0(r4)
   18d10:	a82f883a 	mov	r23,r21
   18d14:	a8bff91e 	bne	r21,r2,18cfc <__alt_mem_onchip_memory_nios_arm+0xfffc8cfc>
   18d18:	00000106 	br	18d20 <___vfprintf_internal_r+0x2d0>
   18d1c:	a82f883a 	mov	r23,r21
   18d20:	aeebc83a 	sub	r21,r21,sp
   18d24:	dd400a15 	stw	r21,40(sp)
   18d28:	d8c00a17 	ldw	r3,40(sp)
   18d2c:	1a51883a 	add	r8,r3,r9
   18d30:	d8c00b17 	ldw	r3,44(sp)
   18d34:	8a2bc83a 	sub	r21,r17,r8
   18d38:	18001726 	beq	r3,zero,18d98 <___vfprintf_internal_r+0x348>
   18d3c:	48000a26 	beq	r9,zero,18d68 <___vfprintf_internal_r+0x318>
   18d40:	00800b44 	movi	r2,45
   18d44:	d8800805 	stb	r2,32(sp)
   18d48:	e0800117 	ldw	r2,4(fp)
   18d4c:	9809883a 	mov	r4,r19
   18d50:	e00b883a 	mov	r5,fp
   18d54:	d9800804 	addi	r6,sp,32
   18d58:	01c00044 	movi	r7,1
   18d5c:	103ee83a 	callr	r2
   18d60:	10004d1e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18d64:	84000044 	addi	r16,r16,1
   18d68:	0540070e 	bge	zero,r21,18d88 <___vfprintf_internal_r+0x338>
   18d6c:	9809883a 	mov	r4,r19
   18d70:	e00b883a 	mov	r5,fp
   18d74:	01800c04 	movi	r6,48
   18d78:	a80f883a 	mov	r7,r21
   18d7c:	00189e40 	call	189e4 <print_repeat>
   18d80:	1000451e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18d84:	8561883a 	add	r16,r16,r21
   18d88:	d8c00a17 	ldw	r3,40(sp)
   18d8c:	b811883a 	mov	r8,r23
   18d90:	1debc83a 	sub	r21,r3,r23
   18d94:	00002206 	br	18e20 <___vfprintf_internal_r+0x3d0>
   18d98:	0540090e 	bge	zero,r21,18dc0 <___vfprintf_internal_r+0x370>
   18d9c:	9809883a 	mov	r4,r19
   18da0:	e00b883a 	mov	r5,fp
   18da4:	01800804 	movi	r6,32
   18da8:	a80f883a 	mov	r7,r21
   18dac:	da401115 	stw	r9,68(sp)
   18db0:	00189e40 	call	189e4 <print_repeat>
   18db4:	da401117 	ldw	r9,68(sp)
   18db8:	1000371e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18dbc:	8561883a 	add	r16,r16,r21
   18dc0:	483ff126 	beq	r9,zero,18d88 <__alt_mem_onchip_memory_nios_arm+0xfffc8d88>
   18dc4:	00800b44 	movi	r2,45
   18dc8:	d8800805 	stb	r2,32(sp)
   18dcc:	e0800117 	ldw	r2,4(fp)
   18dd0:	9809883a 	mov	r4,r19
   18dd4:	e00b883a 	mov	r5,fp
   18dd8:	d9800804 	addi	r6,sp,32
   18ddc:	01c00044 	movi	r7,1
   18de0:	103ee83a 	callr	r2
   18de4:	10002c1e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18de8:	84000044 	addi	r16,r16,1
   18dec:	003fe606 	br	18d88 <__alt_mem_onchip_memory_nios_arm+0xfffc8d88>
   18df0:	423fffc4 	addi	r8,r8,-1
   18df4:	40800003 	ldbu	r2,0(r8)
   18df8:	9809883a 	mov	r4,r19
   18dfc:	e00b883a 	mov	r5,fp
   18e00:	d8800805 	stb	r2,32(sp)
   18e04:	e0800117 	ldw	r2,4(fp)
   18e08:	d9800804 	addi	r6,sp,32
   18e0c:	da001015 	stw	r8,64(sp)
   18e10:	01c00044 	movi	r7,1
   18e14:	103ee83a 	callr	r2
   18e18:	da001017 	ldw	r8,64(sp)
   18e1c:	10001e1e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18e20:	8205c83a 	sub	r2,r16,r8
   18e24:	4549883a 	add	r4,r8,r21
   18e28:	b885883a 	add	r2,r23,r2
   18e2c:	013ff016 	blt	zero,r4,18df0 <__alt_mem_onchip_memory_nios_arm+0xfffc8df0>
   18e30:	1021883a 	mov	r16,r2
   18e34:	ddc00d17 	ldw	r23,52(sp)
   18e38:	00004406 	br	18f4c <___vfprintf_internal_r+0x4fc>
   18e3c:	00800044 	movi	r2,1
   18e40:	1440080e 	bge	r2,r17,18e64 <___vfprintf_internal_r+0x414>
   18e44:	8d7fffc4 	addi	r21,r17,-1
   18e48:	9809883a 	mov	r4,r19
   18e4c:	e00b883a 	mov	r5,fp
   18e50:	01800804 	movi	r6,32
   18e54:	a80f883a 	mov	r7,r21
   18e58:	00189e40 	call	189e4 <print_repeat>
   18e5c:	10000e1e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18e60:	8561883a 	add	r16,r16,r21
   18e64:	b8800017 	ldw	r2,0(r23)
   18e68:	9809883a 	mov	r4,r19
   18e6c:	e00b883a 	mov	r5,fp
   18e70:	d8800005 	stb	r2,0(sp)
   18e74:	e0800117 	ldw	r2,4(fp)
   18e78:	d80d883a 	mov	r6,sp
   18e7c:	01c00044 	movi	r7,1
   18e80:	bd400104 	addi	r21,r23,4
   18e84:	103ee83a 	callr	r2
   18e88:	1000031e 	bne	r2,zero,18e98 <___vfprintf_internal_r+0x448>
   18e8c:	84000044 	addi	r16,r16,1
   18e90:	a82f883a 	mov	r23,r21
   18e94:	00002d06 	br	18f4c <___vfprintf_internal_r+0x4fc>
   18e98:	00bfffc4 	movi	r2,-1
   18e9c:	00003106 	br	18f64 <___vfprintf_internal_r+0x514>
   18ea0:	bd400017 	ldw	r21,0(r23)
   18ea4:	b8c00104 	addi	r3,r23,4
   18ea8:	d8c00a15 	stw	r3,40(sp)
   18eac:	a809883a 	mov	r4,r21
   18eb0:	00189c80 	call	189c8 <strlen>
   18eb4:	8893c83a 	sub	r9,r17,r2
   18eb8:	102f883a 	mov	r23,r2
   18ebc:	0240090e 	bge	zero,r9,18ee4 <___vfprintf_internal_r+0x494>
   18ec0:	480f883a 	mov	r7,r9
   18ec4:	9809883a 	mov	r4,r19
   18ec8:	e00b883a 	mov	r5,fp
   18ecc:	01800804 	movi	r6,32
   18ed0:	da401115 	stw	r9,68(sp)
   18ed4:	00189e40 	call	189e4 <print_repeat>
   18ed8:	da401117 	ldw	r9,68(sp)
   18edc:	103fee1e 	bne	r2,zero,18e98 <__alt_mem_onchip_memory_nios_arm+0xfffc8e98>
   18ee0:	8261883a 	add	r16,r16,r9
   18ee4:	e0800117 	ldw	r2,4(fp)
   18ee8:	9809883a 	mov	r4,r19
   18eec:	e00b883a 	mov	r5,fp
   18ef0:	a80d883a 	mov	r6,r21
   18ef4:	b80f883a 	mov	r7,r23
   18ef8:	103ee83a 	callr	r2
   18efc:	103fe61e 	bne	r2,zero,18e98 <__alt_mem_onchip_memory_nios_arm+0xfffc8e98>
   18f00:	85e1883a 	add	r16,r16,r23
   18f04:	ddc00a17 	ldw	r23,40(sp)
   18f08:	00001006 	br	18f4c <___vfprintf_internal_r+0x4fc>
   18f0c:	05800044 	movi	r22,1
   18f10:	04bfffc4 	movi	r18,-1
   18f14:	d8000e15 	stw	zero,56(sp)
   18f18:	05000284 	movi	r20,10
   18f1c:	9023883a 	mov	r17,r18
   18f20:	d8000c15 	stw	zero,48(sp)
   18f24:	d8000b15 	stw	zero,44(sp)
   18f28:	b02b883a 	mov	r21,r22
   18f2c:	00000806 	br	18f50 <___vfprintf_internal_r+0x500>
   18f30:	dd400b15 	stw	r21,44(sp)
   18f34:	05400084 	movi	r21,2
   18f38:	00000506 	br	18f50 <___vfprintf_internal_r+0x500>
   18f3c:	00c00044 	movi	r3,1
   18f40:	d8c00c15 	stw	r3,48(sp)
   18f44:	054000c4 	movi	r21,3
   18f48:	00000106 	br	18f50 <___vfprintf_internal_r+0x500>
   18f4c:	002b883a 	mov	r21,zero
   18f50:	d8c00f17 	ldw	r3,60(sp)
   18f54:	18c00044 	addi	r3,r3,1
   18f58:	d8c00f15 	stw	r3,60(sp)
   18f5c:	003ed606 	br	18ab8 <__alt_mem_onchip_memory_nios_arm+0xfffc8ab8>
   18f60:	8005883a 	mov	r2,r16
   18f64:	dfc01b17 	ldw	ra,108(sp)
   18f68:	df001a17 	ldw	fp,104(sp)
   18f6c:	ddc01917 	ldw	r23,100(sp)
   18f70:	dd801817 	ldw	r22,96(sp)
   18f74:	dd401717 	ldw	r21,92(sp)
   18f78:	dd001617 	ldw	r20,88(sp)
   18f7c:	dcc01517 	ldw	r19,84(sp)
   18f80:	dc801417 	ldw	r18,80(sp)
   18f84:	dc401317 	ldw	r17,76(sp)
   18f88:	dc001217 	ldw	r16,72(sp)
   18f8c:	dec01c04 	addi	sp,sp,112
   18f90:	f800283a 	ret

00018f94 <__vfprintf_internal>:
   18f94:	2007883a 	mov	r3,r4
   18f98:	010000b4 	movhi	r4,2
   18f9c:	212c3a04 	addi	r4,r4,-20248
   18fa0:	21000017 	ldw	r4,0(r4)
   18fa4:	2805883a 	mov	r2,r5
   18fa8:	300f883a 	mov	r7,r6
   18fac:	180b883a 	mov	r5,r3
   18fb0:	100d883a 	mov	r6,r2
   18fb4:	0018a501 	jmpi	18a50 <___vfprintf_internal_r>

00018fb8 <_write_r>:
   18fb8:	defffd04 	addi	sp,sp,-12
   18fbc:	dc000015 	stw	r16,0(sp)
   18fc0:	040000b4 	movhi	r16,2
   18fc4:	dc400115 	stw	r17,4(sp)
   18fc8:	84311b04 	addi	r16,r16,-15252
   18fcc:	2023883a 	mov	r17,r4
   18fd0:	2809883a 	mov	r4,r5
   18fd4:	300b883a 	mov	r5,r6
   18fd8:	380d883a 	mov	r6,r7
   18fdc:	dfc00215 	stw	ra,8(sp)
   18fe0:	80000015 	stw	zero,0(r16)
   18fe4:	00191d00 	call	191d0 <write>
   18fe8:	00ffffc4 	movi	r3,-1
   18fec:	10c0031e 	bne	r2,r3,18ffc <_write_r+0x44>
   18ff0:	80c00017 	ldw	r3,0(r16)
   18ff4:	18000126 	beq	r3,zero,18ffc <_write_r+0x44>
   18ff8:	88c00015 	stw	r3,0(r17)
   18ffc:	dfc00217 	ldw	ra,8(sp)
   19000:	dc400117 	ldw	r17,4(sp)
   19004:	dc000017 	ldw	r16,0(sp)
   19008:	dec00304 	addi	sp,sp,12
   1900c:	f800283a 	ret

00019010 <alt_irq_register>:
   19010:	008007c4 	movi	r2,31
   19014:	11002336 	bltu	r2,r4,190a4 <alt_irq_register+0x94>
   19018:	000f303a 	rdctl	r7,status
   1901c:	00ffff84 	movi	r3,-2
   19020:	38c4703a 	and	r2,r7,r3
   19024:	1001703a 	wrctl	status,r2
   19028:	200490fa 	slli	r2,r4,3
   1902c:	020000b4 	movhi	r8,2
   19030:	42360904 	addi	r8,r8,-10204
   19034:	4093883a 	add	r9,r8,r2
   19038:	49400115 	stw	r5,4(r9)
   1903c:	49800015 	stw	r6,0(r9)
   19040:	014000b4 	movhi	r5,2
   19044:	29711c04 	addi	r5,r5,-15248
   19048:	00800044 	movi	r2,1
   1904c:	30000726 	beq	r6,zero,1906c <alt_irq_register+0x5c>
   19050:	000d303a 	rdctl	r6,status
   19054:	30c6703a 	and	r3,r6,r3
   19058:	1801703a 	wrctl	status,r3
   1905c:	28c00017 	ldw	r3,0(r5)
   19060:	1104983a 	sll	r2,r2,r4
   19064:	10c4b03a 	or	r2,r2,r3
   19068:	00000706 	br	19088 <alt_irq_register+0x78>
   1906c:	000d303a 	rdctl	r6,status
   19070:	30c6703a 	and	r3,r6,r3
   19074:	1801703a 	wrctl	status,r3
   19078:	1104983a 	sll	r2,r2,r4
   1907c:	28c00017 	ldw	r3,0(r5)
   19080:	0084303a 	nor	r2,zero,r2
   19084:	10c4703a 	and	r2,r2,r3
   19088:	28800015 	stw	r2,0(r5)
   1908c:	28800017 	ldw	r2,0(r5)
   19090:	100170fa 	wrctl	ienable,r2
   19094:	3001703a 	wrctl	status,r6
   19098:	3801703a 	wrctl	status,r7
   1909c:	0005883a 	mov	r2,zero
   190a0:	f800283a 	ret
   190a4:	00bffa84 	movi	r2,-22
   190a8:	f800283a 	ret

000190ac <alt_load>:
   190ac:	deffff04 	addi	sp,sp,-4
   190b0:	010000b4 	movhi	r4,2
   190b4:	014000b4 	movhi	r5,2
   190b8:	dfc00015 	stw	ra,0(sp)
   190bc:	21277704 	addi	r4,r4,-25124
   190c0:	296c3f04 	addi	r5,r5,-20228
   190c4:	2140061e 	bne	r4,r5,190e0 <alt_load+0x34>
   190c8:	01000074 	movhi	r4,1
   190cc:	01400074 	movhi	r5,1
   190d0:	21000804 	addi	r4,r4,32
   190d4:	29400804 	addi	r5,r5,32
   190d8:	2140141e 	bne	r4,r5,1912c <alt_load+0x80>
   190dc:	00000d06 	br	19114 <alt_load+0x68>
   190e0:	00c000b4 	movhi	r3,2
   190e4:	18ec3f04 	addi	r3,r3,-20228
   190e8:	00bfff04 	movi	r2,-4
   190ec:	1907c83a 	sub	r3,r3,r4
   190f0:	1886703a 	and	r3,r3,r2
   190f4:	0005883a 	mov	r2,zero
   190f8:	10fff326 	beq	r2,r3,190c8 <__alt_mem_onchip_memory_nios_arm+0xfffc90c8>
   190fc:	114f883a 	add	r7,r2,r5
   19100:	39c00017 	ldw	r7,0(r7)
   19104:	110d883a 	add	r6,r2,r4
   19108:	10800104 	addi	r2,r2,4
   1910c:	31c00015 	stw	r7,0(r6)
   19110:	003ff906 	br	190f8 <__alt_mem_onchip_memory_nios_arm+0xfffc90f8>
   19114:	010000b4 	movhi	r4,2
   19118:	014000b4 	movhi	r5,2
   1911c:	2126d604 	addi	r4,r4,-25768
   19120:	2966d604 	addi	r5,r5,-25768
   19124:	2140121e 	bne	r4,r5,19170 <alt_load+0xc4>
   19128:	00000d06 	br	19160 <alt_load+0xb4>
   1912c:	00c00074 	movhi	r3,1
   19130:	18c06304 	addi	r3,r3,396
   19134:	00bfff04 	movi	r2,-4
   19138:	1907c83a 	sub	r3,r3,r4
   1913c:	1886703a 	and	r3,r3,r2
   19140:	0005883a 	mov	r2,zero
   19144:	10fff326 	beq	r2,r3,19114 <__alt_mem_onchip_memory_nios_arm+0xfffc9114>
   19148:	114f883a 	add	r7,r2,r5
   1914c:	39c00017 	ldw	r7,0(r7)
   19150:	110d883a 	add	r6,r2,r4
   19154:	10800104 	addi	r2,r2,4
   19158:	31c00015 	stw	r7,0(r6)
   1915c:	003ff906 	br	19144 <__alt_mem_onchip_memory_nios_arm+0xfffc9144>
   19160:	00198a40 	call	198a4 <alt_dcache_flush_all>
   19164:	dfc00017 	ldw	ra,0(sp)
   19168:	dec00104 	addi	sp,sp,4
   1916c:	00198a81 	jmpi	198a8 <alt_icache_flush_all>
   19170:	00c000b4 	movhi	r3,2
   19174:	18e77704 	addi	r3,r3,-25124
   19178:	00bfff04 	movi	r2,-4
   1917c:	1907c83a 	sub	r3,r3,r4
   19180:	1886703a 	and	r3,r3,r2
   19184:	0005883a 	mov	r2,zero
   19188:	10fff526 	beq	r2,r3,19160 <__alt_mem_onchip_memory_nios_arm+0xfffc9160>
   1918c:	114f883a 	add	r7,r2,r5
   19190:	39c00017 	ldw	r7,0(r7)
   19194:	110d883a 	add	r6,r2,r4
   19198:	10800104 	addi	r2,r2,4
   1919c:	31c00015 	stw	r7,0(r6)
   191a0:	003ff906 	br	19188 <__alt_mem_onchip_memory_nios_arm+0xfffc9188>

000191a4 <alt_main>:
   191a4:	deffff04 	addi	sp,sp,-4
   191a8:	0009883a 	mov	r4,zero
   191ac:	dfc00015 	stw	ra,0(sp)
   191b0:	001923c0 	call	1923c <alt_irq_init>
   191b4:	001925c0 	call	1925c <alt_sys_init>
   191b8:	d124ea17 	ldw	r4,-27736(gp)
   191bc:	d164e917 	ldw	r5,-27740(gp)
   191c0:	d1a4e817 	ldw	r6,-27744(gp)
   191c4:	dfc00017 	ldw	ra,0(sp)
   191c8:	dec00104 	addi	sp,sp,4
   191cc:	00161fc1 	jmpi	161fc <main>

000191d0 <write>:
   191d0:	00800044 	movi	r2,1
   191d4:	20800226 	beq	r4,r2,191e0 <write+0x10>
   191d8:	00800084 	movi	r2,2
   191dc:	2080041e 	bne	r4,r2,191f0 <write+0x20>
   191e0:	010000b4 	movhi	r4,2
   191e4:	21282704 	addi	r4,r4,-24420
   191e8:	000f883a 	mov	r7,zero
   191ec:	001947c1 	jmpi	1947c <altera_avalon_jtag_uart_write>
   191f0:	008000b4 	movhi	r2,2
   191f4:	10ac3c04 	addi	r2,r2,-20240
   191f8:	10800017 	ldw	r2,0(r2)
   191fc:	10000926 	beq	r2,zero,19224 <write+0x54>
   19200:	deffff04 	addi	sp,sp,-4
   19204:	dfc00015 	stw	ra,0(sp)
   19208:	103ee83a 	callr	r2
   1920c:	00c01444 	movi	r3,81
   19210:	10c00015 	stw	r3,0(r2)
   19214:	00bfffc4 	movi	r2,-1
   19218:	dfc00017 	ldw	ra,0(sp)
   1921c:	dec00104 	addi	sp,sp,4
   19220:	f800283a 	ret
   19224:	008000b4 	movhi	r2,2
   19228:	10b11b04 	addi	r2,r2,-15252
   1922c:	00c01444 	movi	r3,81
   19230:	10c00015 	stw	r3,0(r2)
   19234:	00bfffc4 	movi	r2,-1
   19238:	f800283a 	ret

0001923c <alt_irq_init>:
   1923c:	deffff04 	addi	sp,sp,-4
   19240:	dfc00015 	stw	ra,0(sp)
   19244:	0019aa40 	call	19aa4 <altera_nios2_gen2_irq_init>
   19248:	00800044 	movi	r2,1
   1924c:	1001703a 	wrctl	status,r2
   19250:	dfc00017 	ldw	ra,0(sp)
   19254:	dec00104 	addi	sp,sp,4
   19258:	f800283a 	ret

0001925c <alt_sys_init>:
   1925c:	deffff04 	addi	sp,sp,-4
   19260:	01001804 	movi	r4,96
   19264:	000b883a 	mov	r5,zero
   19268:	000d883a 	mov	r6,zero
   1926c:	01c0fa04 	movi	r7,1000
   19270:	dfc00015 	stw	ra,0(sp)
   19274:	00196780 	call	19678 <alt_avalon_timer_sc_init>
   19278:	010000b4 	movhi	r4,2
   1927c:	21282704 	addi	r4,r4,-24420
   19280:	000b883a 	mov	r5,zero
   19284:	018000c4 	movi	r6,3
   19288:	dfc00017 	ldw	ra,0(sp)
   1928c:	dec00104 	addi	sp,sp,4
   19290:	00193cc1 	jmpi	193cc <altera_avalon_jtag_uart_init>

00019294 <altera_avalon_jtag_uart_timeout>:
   19294:	20800017 	ldw	r2,0(r4)
   19298:	10800104 	addi	r2,r2,4
   1929c:	10c00037 	ldwio	r3,0(r2)
   192a0:	18c1000c 	andi	r3,r3,1024
   192a4:	18000526 	beq	r3,zero,192bc <altera_avalon_jtag_uart_timeout+0x28>
   192a8:	20c00817 	ldw	r3,32(r4)
   192ac:	18c10014 	ori	r3,r3,1024
   192b0:	10c00035 	stwio	r3,0(r2)
   192b4:	20000915 	stw	zero,36(r4)
   192b8:	00000606 	br	192d4 <altera_avalon_jtag_uart_timeout+0x40>
   192bc:	20800917 	ldw	r2,36(r4)
   192c0:	00e00034 	movhi	r3,32768
   192c4:	18ffff04 	addi	r3,r3,-4
   192c8:	18800236 	bltu	r3,r2,192d4 <altera_avalon_jtag_uart_timeout+0x40>
   192cc:	10800044 	addi	r2,r2,1
   192d0:	20800915 	stw	r2,36(r4)
   192d4:	008000b4 	movhi	r2,2
   192d8:	10b12304 	addi	r2,r2,-15220
   192dc:	10800017 	ldw	r2,0(r2)
   192e0:	f800283a 	ret

000192e4 <altera_avalon_jtag_uart_irq>:
   192e4:	21c00017 	ldw	r7,0(r4)
   192e8:	027fff84 	movi	r9,-2
   192ec:	023fff44 	movi	r8,-3
   192f0:	39800104 	addi	r6,r7,4
   192f4:	30800037 	ldwio	r2,0(r6)
   192f8:	10c0c00c 	andi	r3,r2,768
   192fc:	18003226 	beq	r3,zero,193c8 <altera_avalon_jtag_uart_irq+0xe4>
   19300:	10c0400c 	andi	r3,r2,256
   19304:	18001826 	beq	r3,zero,19368 <altera_avalon_jtag_uart_irq+0x84>
   19308:	00c00074 	movhi	r3,1
   1930c:	21400a17 	ldw	r5,40(r4)
   19310:	22800b17 	ldw	r10,44(r4)
   19314:	29400044 	addi	r5,r5,1
   19318:	2941ffcc 	andi	r5,r5,2047
   1931c:	2a800b26 	beq	r5,r10,1934c <altera_avalon_jtag_uart_irq+0x68>
   19320:	38c00037 	ldwio	r3,0(r7)
   19324:	1960000c 	andi	r5,r3,32768
   19328:	28000826 	beq	r5,zero,1934c <altera_avalon_jtag_uart_irq+0x68>
   1932c:	21400a17 	ldw	r5,40(r4)
   19330:	214b883a 	add	r5,r4,r5
   19334:	28c00e05 	stb	r3,56(r5)
   19338:	21400a17 	ldw	r5,40(r4)
   1933c:	29400044 	addi	r5,r5,1
   19340:	2941ffcc 	andi	r5,r5,2047
   19344:	21400a15 	stw	r5,40(r4)
   19348:	003ff006 	br	1930c <__alt_mem_onchip_memory_nios_arm+0xfffc930c>
   1934c:	18ffffec 	andhi	r3,r3,65535
   19350:	18000526 	beq	r3,zero,19368 <altera_avalon_jtag_uart_irq+0x84>
   19354:	20c00817 	ldw	r3,32(r4)
   19358:	1a46703a 	and	r3,r3,r9
   1935c:	20c00815 	stw	r3,32(r4)
   19360:	30c00035 	stwio	r3,0(r6)
   19364:	30c00037 	ldwio	r3,0(r6)
   19368:	10c0800c 	andi	r3,r2,512
   1936c:	183fe126 	beq	r3,zero,192f4 <__alt_mem_onchip_memory_nios_arm+0xfffc92f4>
   19370:	1004d43a 	srli	r2,r2,16
   19374:	103fdf26 	beq	r2,zero,192f4 <__alt_mem_onchip_memory_nios_arm+0xfffc92f4>
   19378:	21400d17 	ldw	r5,52(r4)
   1937c:	20c00c17 	ldw	r3,48(r4)
   19380:	28c00a26 	beq	r5,r3,193ac <altera_avalon_jtag_uart_irq+0xc8>
   19384:	20c00d17 	ldw	r3,52(r4)
   19388:	20c7883a 	add	r3,r4,r3
   1938c:	18c20e07 	ldb	r3,2104(r3)
   19390:	38c00035 	stwio	r3,0(r7)
   19394:	20c00d17 	ldw	r3,52(r4)
   19398:	10bfffc4 	addi	r2,r2,-1
   1939c:	18c00044 	addi	r3,r3,1
   193a0:	18c1ffcc 	andi	r3,r3,2047
   193a4:	20c00d15 	stw	r3,52(r4)
   193a8:	003ff206 	br	19374 <__alt_mem_onchip_memory_nios_arm+0xfffc9374>
   193ac:	20800817 	ldw	r2,32(r4)
   193b0:	20c00017 	ldw	r3,0(r4)
   193b4:	1204703a 	and	r2,r2,r8
   193b8:	20800815 	stw	r2,32(r4)
   193bc:	18800135 	stwio	r2,4(r3)
   193c0:	30800037 	ldwio	r2,0(r6)
   193c4:	003fcb06 	br	192f4 <__alt_mem_onchip_memory_nios_arm+0xfffc92f4>
   193c8:	f800283a 	ret

000193cc <altera_avalon_jtag_uart_init>:
   193cc:	defffd04 	addi	sp,sp,-12
   193d0:	dc000115 	stw	r16,4(sp)
   193d4:	2021883a 	mov	r16,r4
   193d8:	80c00017 	ldw	r3,0(r16)
   193dc:	00800044 	movi	r2,1
   193e0:	dfc00215 	stw	ra,8(sp)
   193e4:	2809883a 	mov	r4,r5
   193e8:	80800815 	stw	r2,32(r16)
   193ec:	18800135 	stwio	r2,4(r3)
   193f0:	300b883a 	mov	r5,r6
   193f4:	018000b4 	movhi	r6,2
   193f8:	31a4b904 	addi	r6,r6,-27932
   193fc:	800f883a 	mov	r7,r16
   19400:	d8000015 	stw	zero,0(sp)
   19404:	00198b40 	call	198b4 <alt_ic_isr_register>
   19408:	008000b4 	movhi	r2,2
   1940c:	10b12304 	addi	r2,r2,-15220
   19410:	11400017 	ldw	r5,0(r2)
   19414:	018000b4 	movhi	r6,2
   19418:	80000915 	stw	zero,36(r16)
   1941c:	81000204 	addi	r4,r16,8
   19420:	31a4a504 	addi	r6,r6,-28012
   19424:	800f883a 	mov	r7,r16
   19428:	00198100 	call	19810 <alt_alarm_start>
   1942c:	1000030e 	bge	r2,zero,1943c <altera_avalon_jtag_uart_init+0x70>
   19430:	00a00034 	movhi	r2,32768
   19434:	10bfffc4 	addi	r2,r2,-1
   19438:	80800115 	stw	r2,4(r16)
   1943c:	dfc00217 	ldw	ra,8(sp)
   19440:	dc000117 	ldw	r16,4(sp)
   19444:	dec00304 	addi	sp,sp,12
   19448:	f800283a 	ret

0001944c <altera_avalon_jtag_uart_close>:
   1944c:	21800c17 	ldw	r6,48(r4)
   19450:	2950000c 	andi	r5,r5,16384
   19454:	20800d17 	ldw	r2,52(r4)
   19458:	11800626 	beq	r2,r6,19474 <altera_avalon_jtag_uart_close+0x28>
   1945c:	20c00917 	ldw	r3,36(r4)
   19460:	20800117 	ldw	r2,4(r4)
   19464:	1880032e 	bgeu	r3,r2,19474 <altera_avalon_jtag_uart_close+0x28>
   19468:	283ffa26 	beq	r5,zero,19454 <__alt_mem_onchip_memory_nios_arm+0xfffc9454>
   1946c:	00bffd44 	movi	r2,-11
   19470:	f800283a 	ret
   19474:	0005883a 	mov	r2,zero
   19478:	f800283a 	ret

0001947c <altera_avalon_jtag_uart_write>:
   1947c:	defff304 	addi	sp,sp,-52
   19480:	df000b15 	stw	fp,44(sp)
   19484:	ddc00a15 	stw	r23,40(sp)
   19488:	dd800915 	stw	r22,36(sp)
   1948c:	dd400815 	stw	r21,32(sp)
   19490:	dd000715 	stw	r20,28(sp)
   19494:	dc800515 	stw	r18,20(sp)
   19498:	dc000315 	stw	r16,12(sp)
   1949c:	382f883a 	mov	r23,r7
   194a0:	38d0000c 	andi	r3,r7,16384
   194a4:	dfc00c15 	stw	ra,48(sp)
   194a8:	dcc00615 	stw	r19,24(sp)
   194ac:	dc400415 	stw	r17,16(sp)
   194b0:	2025883a 	mov	r18,r4
   194b4:	282b883a 	mov	r21,r5
   194b8:	3029883a 	mov	r20,r6
   194bc:	2821883a 	mov	r16,r5
   194c0:	002d883a 	mov	r22,zero
   194c4:	073fff84 	movi	fp,-2
   194c8:	01c1ffc4 	movi	r7,2047
   194cc:	02020004 	movi	r8,2048
   194d0:	05001e0e 	bge	zero,r20,1954c <altera_avalon_jtag_uart_write+0xd0>
   194d4:	94c00c17 	ldw	r19,48(r18)
   194d8:	95800d17 	ldw	r22,52(r18)
   194dc:	9d80032e 	bgeu	r19,r22,194ec <altera_avalon_jtag_uart_write+0x70>
   194e0:	b47fffc4 	addi	r17,r22,-1
   194e4:	8ce3c83a 	sub	r17,r17,r19
   194e8:	00000406 	br	194fc <altera_avalon_jtag_uart_write+0x80>
   194ec:	b0000226 	beq	r22,zero,194f8 <altera_avalon_jtag_uart_write+0x7c>
   194f0:	44e3c83a 	sub	r17,r8,r19
   194f4:	00000106 	br	194fc <altera_avalon_jtag_uart_write+0x80>
   194f8:	3ce3c83a 	sub	r17,r7,r19
   194fc:	88001326 	beq	r17,zero,1954c <altera_avalon_jtag_uart_write+0xd0>
   19500:	a440012e 	bgeu	r20,r17,19508 <altera_avalon_jtag_uart_write+0x8c>
   19504:	a023883a 	mov	r17,r20
   19508:	99020e04 	addi	r4,r19,2104
   1950c:	800b883a 	mov	r5,r16
   19510:	880d883a 	mov	r6,r17
   19514:	9109883a 	add	r4,r18,r4
   19518:	8461883a 	add	r16,r16,r17
   1951c:	a469c83a 	sub	r20,r20,r17
   19520:	8ce3883a 	add	r17,r17,r19
   19524:	d8c00015 	stw	r3,0(sp)
   19528:	d9c00115 	stw	r7,4(sp)
   1952c:	da000215 	stw	r8,8(sp)
   19530:	8c41ffcc 	andi	r17,r17,2047
   19534:	00180f80 	call	180f8 <memcpy>
   19538:	da000217 	ldw	r8,8(sp)
   1953c:	94400c15 	stw	r17,48(r18)
   19540:	d9c00117 	ldw	r7,4(sp)
   19544:	d8c00017 	ldw	r3,0(sp)
   19548:	003fe106 	br	194d0 <__alt_mem_onchip_memory_nios_arm+0xfffc94d0>
   1954c:	0009303a 	rdctl	r4,status
   19550:	2704703a 	and	r2,r4,fp
   19554:	1001703a 	wrctl	status,r2
   19558:	90800817 	ldw	r2,32(r18)
   1955c:	91400017 	ldw	r5,0(r18)
   19560:	10800094 	ori	r2,r2,2
   19564:	90800815 	stw	r2,32(r18)
   19568:	28800135 	stwio	r2,4(r5)
   1956c:	2001703a 	wrctl	status,r4
   19570:	0500080e 	bge	zero,r20,19594 <altera_avalon_jtag_uart_write+0x118>
   19574:	1800101e 	bne	r3,zero,195b8 <altera_avalon_jtag_uart_write+0x13c>
   19578:	91000d17 	ldw	r4,52(r18)
   1957c:	90800917 	ldw	r2,36(r18)
   19580:	b100021e 	bne	r22,r4,1958c <altera_avalon_jtag_uart_write+0x110>
   19584:	91000117 	ldw	r4,4(r18)
   19588:	113ffb36 	bltu	r2,r4,19578 <__alt_mem_onchip_memory_nios_arm+0xfffc9578>
   1958c:	103fd026 	beq	r2,zero,194d0 <__alt_mem_onchip_memory_nios_arm+0xfffc94d0>
   19590:	00000606 	br	195ac <altera_avalon_jtag_uart_write+0x130>
   19594:	85400226 	beq	r16,r21,195a0 <altera_avalon_jtag_uart_write+0x124>
   19598:	8545c83a 	sub	r2,r16,r21
   1959c:	00000806 	br	195c0 <altera_avalon_jtag_uart_write+0x144>
   195a0:	bdd0000c 	andi	r23,r23,16384
   195a4:	b800051e 	bne	r23,zero,195bc <altera_avalon_jtag_uart_write+0x140>
   195a8:	00000106 	br	195b0 <altera_avalon_jtag_uart_write+0x134>
   195ac:	857ffa1e 	bne	r16,r21,19598 <__alt_mem_onchip_memory_nios_arm+0xfffc9598>
   195b0:	00bffec4 	movi	r2,-5
   195b4:	00000206 	br	195c0 <altera_avalon_jtag_uart_write+0x144>
   195b8:	857ff71e 	bne	r16,r21,19598 <__alt_mem_onchip_memory_nios_arm+0xfffc9598>
   195bc:	00bffd44 	movi	r2,-11
   195c0:	dfc00c17 	ldw	ra,48(sp)
   195c4:	df000b17 	ldw	fp,44(sp)
   195c8:	ddc00a17 	ldw	r23,40(sp)
   195cc:	dd800917 	ldw	r22,36(sp)
   195d0:	dd400817 	ldw	r21,32(sp)
   195d4:	dd000717 	ldw	r20,28(sp)
   195d8:	dcc00617 	ldw	r19,24(sp)
   195dc:	dc800517 	ldw	r18,20(sp)
   195e0:	dc400417 	ldw	r17,16(sp)
   195e4:	dc000317 	ldw	r16,12(sp)
   195e8:	dec00d04 	addi	sp,sp,52
   195ec:	f800283a 	ret

000195f0 <alt_avalon_sysid_qsys_test>:
   195f0:	00800204 	movi	r2,8
   195f4:	11000037 	ldwio	r4,0(r2)
   195f8:	00800304 	movi	r2,12
   195fc:	10c00037 	ldwio	r3,0(r2)
   19600:	0096dff4 	movhi	r2,23423
   19604:	10aaf3c4 	addi	r2,r2,-21553
   19608:	1880021e 	bne	r3,r2,19614 <alt_avalon_sysid_qsys_test+0x24>
   1960c:	00800184 	movi	r2,6
   19610:	20800626 	beq	r4,r2,1962c <alt_avalon_sysid_qsys_test+0x3c>
   19614:	00a92074 	movhi	r2,42113
   19618:	10950c44 	addi	r2,r2,21553
   1961c:	1885883a 	add	r2,r3,r2
   19620:	00800416 	blt	zero,r2,19634 <alt_avalon_sysid_qsys_test+0x44>
   19624:	00bfffc4 	movi	r2,-1
   19628:	f800283a 	ret
   1962c:	0005883a 	mov	r2,zero
   19630:	f800283a 	ret
   19634:	00800044 	movi	r2,1
   19638:	f800283a 	ret

0001963c <alt_avalon_timer_sc_irq>:
   1963c:	defffe04 	addi	sp,sp,-8
   19640:	dfc00115 	stw	ra,4(sp)
   19644:	dc000015 	stw	r16,0(sp)
   19648:	20000035 	stwio	zero,0(r4)
   1964c:	20800137 	ldwio	r2,4(r4)
   19650:	0021303a 	rdctl	r16,status
   19654:	00bfff84 	movi	r2,-2
   19658:	8084703a 	and	r2,r16,r2
   1965c:	1001703a 	wrctl	status,r2
   19660:	00199ec0 	call	199ec <alt_tick>
   19664:	8001703a 	wrctl	status,r16
   19668:	dfc00117 	ldw	ra,4(sp)
   1966c:	dc000017 	ldw	r16,0(sp)
   19670:	dec00204 	addi	sp,sp,8
   19674:	f800283a 	ret

00019678 <alt_avalon_timer_sc_init>:
   19678:	00c000b4 	movhi	r3,2
   1967c:	18f12304 	addi	r3,r3,-15220
   19680:	2005883a 	mov	r2,r4
   19684:	2809883a 	mov	r4,r5
   19688:	19400017 	ldw	r5,0(r3)
   1968c:	defffe04 	addi	sp,sp,-8
   19690:	dfc00115 	stw	ra,4(sp)
   19694:	2800011e 	bne	r5,zero,1969c <alt_avalon_timer_sc_init+0x24>
   19698:	19c00015 	stw	r7,0(r3)
   1969c:	00c001c4 	movi	r3,7
   196a0:	10c00135 	stwio	r3,4(r2)
   196a4:	300b883a 	mov	r5,r6
   196a8:	018000b4 	movhi	r6,2
   196ac:	d8000015 	stw	zero,0(sp)
   196b0:	31a58f04 	addi	r6,r6,-27076
   196b4:	100f883a 	mov	r7,r2
   196b8:	00198b40 	call	198b4 <alt_ic_isr_register>
   196bc:	dfc00117 	ldw	ra,4(sp)
   196c0:	dec00204 	addi	sp,sp,8
   196c4:	f800283a 	ret

000196c8 <I2C_init>:
   196c8:	defffe04 	addi	sp,sp,-8
   196cc:	dc000015 	stw	r16,0(sp)
   196d0:	2021883a 	mov	r16,r4
   196d4:	2809883a 	mov	r4,r5
   196d8:	31400164 	muli	r5,r6,5
   196dc:	dfc00115 	stw	ra,4(sp)
   196e0:	00180e80 	call	180e8 <__udivsi3>
   196e4:	10bfffc4 	addi	r2,r2,-1
   196e8:	80c00084 	addi	r3,r16,2
   196ec:	18000025 	stbio	zero,0(r3)
   196f0:	01000044 	movi	r4,1
   196f4:	81000125 	stbio	r4,4(r16)
   196f8:	80800025 	stbio	r2,0(r16)
   196fc:	1004d23a 	srli	r2,r2,8
   19700:	80800065 	stbio	r2,1(r16)
   19704:	00bfe004 	movi	r2,-128
   19708:	18800025 	stbio	r2,0(r3)
   1970c:	dfc00117 	ldw	ra,4(sp)
   19710:	dc000017 	ldw	r16,0(sp)
   19714:	dec00204 	addi	sp,sp,8
   19718:	f800283a 	ret

0001971c <I2C_start>:
   1971c:	3180004c 	andi	r6,r6,1
   19720:	294b883a 	add	r5,r5,r5
   19724:	298b883a 	add	r5,r5,r6
   19728:	214000e5 	stbio	r5,3(r4)
   1972c:	21000104 	addi	r4,r4,4
   19730:	00bfe404 	movi	r2,-112
   19734:	20800025 	stbio	r2,0(r4)
   19738:	00c08044 	movi	r3,513
   1973c:	20800023 	ldbuio	r2,0(r4)
   19740:	1080008c 	andi	r2,r2,2
   19744:	10000426 	beq	r2,zero,19758 <I2C_start+0x3c>
   19748:	18ffffc4 	addi	r3,r3,-1
   1974c:	183ffb1e 	bne	r3,zero,1973c <__alt_mem_onchip_memory_nios_arm+0xfffc973c>
   19750:	00800044 	movi	r2,1
   19754:	f800283a 	ret
   19758:	20800023 	ldbuio	r2,0(r4)
   1975c:	10803fcc 	andi	r2,r2,255
   19760:	1004d1fa 	srli	r2,r2,7
   19764:	f800283a 	ret

00019768 <I2C_read>:
   19768:	20c00104 	addi	r3,r4,4
   1976c:	28000226 	beq	r5,zero,19778 <I2C_read+0x10>
   19770:	00801a04 	movi	r2,104
   19774:	00000106 	br	1977c <I2C_read+0x14>
   19778:	00800804 	movi	r2,32
   1977c:	18800025 	stbio	r2,0(r3)
   19780:	01407fc4 	movi	r5,511
   19784:	d024ec15 	stw	zero,-27728(gp)
   19788:	18800023 	ldbuio	r2,0(r3)
   1978c:	1080008c 	andi	r2,r2,2
   19790:	10000626 	beq	r2,zero,197ac <I2C_read+0x44>
   19794:	d0a4ec17 	ldw	r2,-27728(gp)
   19798:	11800044 	addi	r6,r2,1
   1979c:	d1a4ec15 	stw	r6,-27728(gp)
   197a0:	28bff92e 	bgeu	r5,r2,19788 <__alt_mem_onchip_memory_nios_arm+0xfffc9788>
   197a4:	0005883a 	mov	r2,zero
   197a8:	f800283a 	ret
   197ac:	208000e3 	ldbuio	r2,3(r4)
   197b0:	10803fcc 	andi	r2,r2,255
   197b4:	f800283a 	ret

000197b8 <I2C_write>:
   197b8:	214000e5 	stbio	r5,3(r4)
   197bc:	21000104 	addi	r4,r4,4
   197c0:	30000226 	beq	r6,zero,197cc <I2C_write+0x14>
   197c4:	00801404 	movi	r2,80
   197c8:	00000106 	br	197d0 <I2C_write+0x18>
   197cc:	00800404 	movi	r2,16
   197d0:	20800025 	stbio	r2,0(r4)
   197d4:	00c1ffc4 	movi	r3,2047
   197d8:	d024eb15 	stw	zero,-27732(gp)
   197dc:	20800023 	ldbuio	r2,0(r4)
   197e0:	1080008c 	andi	r2,r2,2
   197e4:	10000626 	beq	r2,zero,19800 <I2C_write+0x48>
   197e8:	d0a4eb17 	ldw	r2,-27732(gp)
   197ec:	11400044 	addi	r5,r2,1
   197f0:	d164eb15 	stw	r5,-27732(gp)
   197f4:	18bff92e 	bgeu	r3,r2,197dc <__alt_mem_onchip_memory_nios_arm+0xfffc97dc>
   197f8:	00800044 	movi	r2,1
   197fc:	f800283a 	ret
   19800:	20800023 	ldbuio	r2,0(r4)
   19804:	10803fcc 	andi	r2,r2,255
   19808:	1004d1fa 	srli	r2,r2,7
   1980c:	f800283a 	ret

00019810 <alt_alarm_start>:
   19810:	008000b4 	movhi	r2,2
   19814:	10b12304 	addi	r2,r2,-15220
   19818:	10800017 	ldw	r2,0(r2)
   1981c:	10001d26 	beq	r2,zero,19894 <alt_alarm_start+0x84>
   19820:	20001e26 	beq	r4,zero,1989c <alt_alarm_start+0x8c>
   19824:	21800315 	stw	r6,12(r4)
   19828:	21c00515 	stw	r7,20(r4)
   1982c:	0007303a 	rdctl	r3,status
   19830:	00bfff84 	movi	r2,-2
   19834:	1884703a 	and	r2,r3,r2
   19838:	1001703a 	wrctl	status,r2
   1983c:	008000b4 	movhi	r2,2
   19840:	10b12204 	addi	r2,r2,-15224
   19844:	10800017 	ldw	r2,0(r2)
   19848:	11800044 	addi	r6,r2,1
   1984c:	314b883a 	add	r5,r6,r5
   19850:	21400215 	stw	r5,8(r4)
   19854:	2880032e 	bgeu	r5,r2,19864 <alt_alarm_start+0x54>
   19858:	00800044 	movi	r2,1
   1985c:	20800405 	stb	r2,16(r4)
   19860:	00000106 	br	19868 <alt_alarm_start+0x58>
   19864:	20000405 	stb	zero,16(r4)
   19868:	008000b4 	movhi	r2,2
   1986c:	10ac3d04 	addi	r2,r2,-20236
   19870:	11400017 	ldw	r5,0(r2)
   19874:	20800115 	stw	r2,4(r4)
   19878:	21400015 	stw	r5,0(r4)
   1987c:	11400017 	ldw	r5,0(r2)
   19880:	11000015 	stw	r4,0(r2)
   19884:	29000115 	stw	r4,4(r5)
   19888:	1801703a 	wrctl	status,r3
   1988c:	0005883a 	mov	r2,zero
   19890:	f800283a 	ret
   19894:	00bfde84 	movi	r2,-134
   19898:	f800283a 	ret
   1989c:	00bffa84 	movi	r2,-22
   198a0:	f800283a 	ret

000198a4 <alt_dcache_flush_all>:
   198a4:	f800283a 	ret

000198a8 <alt_icache_flush_all>:
   198a8:	0009883a 	mov	r4,zero
   198ac:	01408004 	movi	r5,512
   198b0:	0019aac1 	jmpi	19aac <alt_icache_flush>

000198b4 <alt_ic_isr_register>:
   198b4:	00199501 	jmpi	19950 <alt_iic_isr_register>

000198b8 <alt_ic_irq_enable>:
   198b8:	000d303a 	rdctl	r6,status
   198bc:	00bfff84 	movi	r2,-2
   198c0:	3084703a 	and	r2,r6,r2
   198c4:	1001703a 	wrctl	status,r2
   198c8:	008000b4 	movhi	r2,2
   198cc:	10b11c04 	addi	r2,r2,-15248
   198d0:	01000044 	movi	r4,1
   198d4:	10c00017 	ldw	r3,0(r2)
   198d8:	214a983a 	sll	r5,r4,r5
   198dc:	28cab03a 	or	r5,r5,r3
   198e0:	11400015 	stw	r5,0(r2)
   198e4:	10800017 	ldw	r2,0(r2)
   198e8:	100170fa 	wrctl	ienable,r2
   198ec:	3001703a 	wrctl	status,r6
   198f0:	0005883a 	mov	r2,zero
   198f4:	f800283a 	ret

000198f8 <alt_ic_irq_disable>:
   198f8:	000d303a 	rdctl	r6,status
   198fc:	00bfff84 	movi	r2,-2
   19900:	3084703a 	and	r2,r6,r2
   19904:	1001703a 	wrctl	status,r2
   19908:	008000b4 	movhi	r2,2
   1990c:	10b11c04 	addi	r2,r2,-15248
   19910:	013fff84 	movi	r4,-2
   19914:	10c00017 	ldw	r3,0(r2)
   19918:	214a183a 	rol	r5,r4,r5
   1991c:	28ca703a 	and	r5,r5,r3
   19920:	11400015 	stw	r5,0(r2)
   19924:	10800017 	ldw	r2,0(r2)
   19928:	100170fa 	wrctl	ienable,r2
   1992c:	3001703a 	wrctl	status,r6
   19930:	0005883a 	mov	r2,zero
   19934:	f800283a 	ret

00019938 <alt_ic_irq_enabled>:
   19938:	000530fa 	rdctl	r2,ienable
   1993c:	00c00044 	movi	r3,1
   19940:	194a983a 	sll	r5,r3,r5
   19944:	1144703a 	and	r2,r2,r5
   19948:	1004c03a 	cmpne	r2,r2,zero
   1994c:	f800283a 	ret

00019950 <alt_iic_isr_register>:
   19950:	00c007c4 	movi	r3,31
   19954:	19401616 	blt	r3,r5,199b0 <alt_iic_isr_register+0x60>
   19958:	defffe04 	addi	sp,sp,-8
   1995c:	dfc00115 	stw	ra,4(sp)
   19960:	dc000015 	stw	r16,0(sp)
   19964:	0021303a 	rdctl	r16,status
   19968:	00ffff84 	movi	r3,-2
   1996c:	80c6703a 	and	r3,r16,r3
   19970:	1801703a 	wrctl	status,r3
   19974:	280490fa 	slli	r2,r5,3
   19978:	00c000b4 	movhi	r3,2
   1997c:	18f60904 	addi	r3,r3,-10204
   19980:	1891883a 	add	r8,r3,r2
   19984:	41800015 	stw	r6,0(r8)
   19988:	41c00115 	stw	r7,4(r8)
   1998c:	30000226 	beq	r6,zero,19998 <alt_iic_isr_register+0x48>
   19990:	00198b80 	call	198b8 <alt_ic_irq_enable>
   19994:	00000106 	br	1999c <alt_iic_isr_register+0x4c>
   19998:	00198f80 	call	198f8 <alt_ic_irq_disable>
   1999c:	8001703a 	wrctl	status,r16
   199a0:	dfc00117 	ldw	ra,4(sp)
   199a4:	dc000017 	ldw	r16,0(sp)
   199a8:	dec00204 	addi	sp,sp,8
   199ac:	f800283a 	ret
   199b0:	00bffa84 	movi	r2,-22
   199b4:	f800283a 	ret

000199b8 <alt_alarm_stop>:
   199b8:	0007303a 	rdctl	r3,status
   199bc:	00bfff84 	movi	r2,-2
   199c0:	1884703a 	and	r2,r3,r2
   199c4:	1001703a 	wrctl	status,r2
   199c8:	21400117 	ldw	r5,4(r4)
   199cc:	20800017 	ldw	r2,0(r4)
   199d0:	11400115 	stw	r5,4(r2)
   199d4:	21400117 	ldw	r5,4(r4)
   199d8:	28800015 	stw	r2,0(r5)
   199dc:	21000115 	stw	r4,4(r4)
   199e0:	21000015 	stw	r4,0(r4)
   199e4:	1801703a 	wrctl	status,r3
   199e8:	f800283a 	ret

000199ec <alt_tick>:
   199ec:	d0a4ed17 	ldw	r2,-27724(gp)
   199f0:	defffb04 	addi	sp,sp,-20
   199f4:	dc000015 	stw	r16,0(sp)
   199f8:	d4200817 	ldw	r16,-32736(gp)
   199fc:	10800044 	addi	r2,r2,1
   19a00:	dc800215 	stw	r18,8(sp)
   19a04:	dc400115 	stw	r17,4(sp)
   19a08:	dfc00415 	stw	ra,16(sp)
   19a0c:	dcc00315 	stw	r19,12(sp)
   19a10:	d0a4ed15 	stw	r2,-27724(gp)
   19a14:	d4600804 	addi	r17,gp,-32736
   19a18:	04800044 	movi	r18,1
   19a1c:	84401a26 	beq	r16,r17,19a88 <alt_tick+0x9c>
   19a20:	80800403 	ldbu	r2,16(r16)
   19a24:	84c00017 	ldw	r19,0(r16)
   19a28:	10000326 	beq	r2,zero,19a38 <alt_tick+0x4c>
   19a2c:	d0a4ed17 	ldw	r2,-27724(gp)
   19a30:	1000011e 	bne	r2,zero,19a38 <alt_tick+0x4c>
   19a34:	80000405 	stb	zero,16(r16)
   19a38:	d0e4ed17 	ldw	r3,-27724(gp)
   19a3c:	80800217 	ldw	r2,8(r16)
   19a40:	18800f36 	bltu	r3,r2,19a80 <alt_tick+0x94>
   19a44:	80800403 	ldbu	r2,16(r16)
   19a48:	10000d1e 	bne	r2,zero,19a80 <alt_tick+0x94>
   19a4c:	80800317 	ldw	r2,12(r16)
   19a50:	81000517 	ldw	r4,20(r16)
   19a54:	103ee83a 	callr	r2
   19a58:	1000031e 	bne	r2,zero,19a68 <alt_tick+0x7c>
   19a5c:	8009883a 	mov	r4,r16
   19a60:	00199b80 	call	199b8 <alt_alarm_stop>
   19a64:	00000606 	br	19a80 <alt_tick+0x94>
   19a68:	80c00217 	ldw	r3,8(r16)
   19a6c:	10c5883a 	add	r2,r2,r3
   19a70:	d0e4ed17 	ldw	r3,-27724(gp)
   19a74:	80800215 	stw	r2,8(r16)
   19a78:	10c0012e 	bgeu	r2,r3,19a80 <alt_tick+0x94>
   19a7c:	84800405 	stb	r18,16(r16)
   19a80:	9821883a 	mov	r16,r19
   19a84:	003fe506 	br	19a1c <__alt_mem_onchip_memory_nios_arm+0xfffc9a1c>
   19a88:	dfc00417 	ldw	ra,16(sp)
   19a8c:	dcc00317 	ldw	r19,12(sp)
   19a90:	dc800217 	ldw	r18,8(sp)
   19a94:	dc400117 	ldw	r17,4(sp)
   19a98:	dc000017 	ldw	r16,0(sp)
   19a9c:	dec00504 	addi	sp,sp,20
   19aa0:	f800283a 	ret

00019aa4 <altera_nios2_gen2_irq_init>:
   19aa4:	000170fa 	wrctl	ienable,zero
   19aa8:	f800283a 	ret

00019aac <alt_icache_flush>:
   19aac:	00808004 	movi	r2,512
   19ab0:	1140012e 	bgeu	r2,r5,19ab8 <alt_icache_flush+0xc>
   19ab4:	100b883a 	mov	r5,r2
   19ab8:	214b883a 	add	r5,r4,r5
   19abc:	2005883a 	mov	r2,r4
   19ac0:	1140032e 	bgeu	r2,r5,19ad0 <alt_icache_flush+0x24>
   19ac4:	1000603a 	flushi	r2
   19ac8:	10800804 	addi	r2,r2,32
   19acc:	003ffc06 	br	19ac0 <__alt_mem_onchip_memory_nios_arm+0xfffc9ac0>
   19ad0:	210007cc 	andi	r4,r4,31
   19ad4:	20000126 	beq	r4,zero,19adc <alt_icache_flush+0x30>
   19ad8:	1000603a 	flushi	r2
   19adc:	0000203a 	flushp
   19ae0:	f800283a 	ret

00019ae4 <alt_exception_cause_generated_bad_addr>:
   19ae4:	213ffe84 	addi	r4,r4,-6
   19ae8:	008003c4 	movi	r2,15
   19aec:	11001636 	bltu	r2,r4,19b48 <alt_exception_cause_generated_bad_addr+0x64>
   19af0:	200890ba 	slli	r4,r4,2
   19af4:	008000b4 	movhi	r2,2
   19af8:	10a6c204 	addi	r2,r2,-25848
   19afc:	2089883a 	add	r4,r4,r2
   19b00:	20800017 	ldw	r2,0(r4)
   19b04:	1000683a 	jmp	r2
   19b08:	00019b50 	cmplti	zero,zero,1645
   19b0c:	00019b50 	cmplti	zero,zero,1645
   19b10:	00019b48 	cmpgei	zero,zero,1645
   19b14:	00019b48 	cmpgei	zero,zero,1645
   19b18:	00019b48 	cmpgei	zero,zero,1645
   19b1c:	00019b50 	cmplti	zero,zero,1645
   19b20:	00019b48 	cmpgei	zero,zero,1645
   19b24:	00019b48 	cmpgei	zero,zero,1645
   19b28:	00019b50 	cmplti	zero,zero,1645
   19b2c:	00019b50 	cmplti	zero,zero,1645
   19b30:	00019b48 	cmpgei	zero,zero,1645
   19b34:	00019b50 	cmplti	zero,zero,1645
   19b38:	00019b48 	cmpgei	zero,zero,1645
   19b3c:	00019b48 	cmpgei	zero,zero,1645
   19b40:	00019b48 	cmpgei	zero,zero,1645
   19b44:	00019b50 	cmplti	zero,zero,1645
   19b48:	0005883a 	mov	r2,zero
   19b4c:	f800283a 	ret
   19b50:	00800044 	movi	r2,1
   19b54:	f800283a 	ret
