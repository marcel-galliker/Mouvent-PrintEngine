-- fluid_board_soc_sld_hub_controller_system_0_link.vhd

-- This file was auto-generated from altera_mm_debug_link_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.0 200 at 2015.12.23.13:40:20

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fluid_board_soc_sld_hub_controller_system_0_link is
	port (
		clk_clk           : in  std_logic                     := '0';             --   clk.clk
		reset_reset       : in  std_logic                     := '0';             -- reset.reset
		s0_waitrequest    : out std_logic;                                        --    s0.waitrequest
		s0_readdata       : out std_logic_vector(31 downto 0);                    --      .readdata
		s0_readdatavalid  : out std_logic;                                        --      .readdatavalid
		s0_burstcount     : in  std_logic_vector(0 downto 0)  := (others => '0'); --      .burstcount
		s0_writedata      : in  std_logic_vector(31 downto 0) := (others => '0'); --      .writedata
		s0_address        : in  std_logic_vector(6 downto 0)  := (others => '0'); --      .address
		s0_write          : in  std_logic                     := '0';             --      .write
		s0_read           : in  std_logic                     := '0';             --      .read
		s0_byteenable     : in  std_logic_vector(3 downto 0)  := (others => '0'); --      .byteenable
		s0_debugaccess    : in  std_logic                     := '0';             --      .debugaccess
		h2t_data          : out std_logic_vector(7 downto 0);                     --   h2t.data
		h2t_valid         : out std_logic;                                        --      .valid
		h2t_ready         : in  std_logic                     := '0';             --      .ready
		h2t_startofpacket : out std_logic;                                        --      .startofpacket
		h2t_endofpacket   : out std_logic;                                        --      .endofpacket
		h2t_channel       : out std_logic;                                        --      .channel
		t2h_data          : in  std_logic_vector(7 downto 0)  := (others => '0'); --   t2h.data
		t2h_valid         : in  std_logic                     := '0';             --      .valid
		t2h_ready         : out std_logic;                                        --      .ready
		t2h_startofpacket : in  std_logic                     := '0';             --      .startofpacket
		t2h_endofpacket   : in  std_logic                     := '0';             --      .endofpacket
		t2h_channel       : in  std_logic                     := '0';             --      .channel
		mgmt_valid        : out std_logic;                                        --  mgmt.valid
		mgmt_data         : out std_logic;                                        --      .data
		mgmt_channel      : out std_logic_vector(7 downto 0)                      --      .channel
	);
end entity fluid_board_soc_sld_hub_controller_system_0_link;

architecture rtl of fluid_board_soc_sld_hub_controller_system_0_link is
	component fluid_board_soc_sld_hub_controller_system_0_link_export_slave is
		port (
			clk              : in  std_logic                     := 'X';             -- clk
			reset            : in  std_logic                     := 'X';             -- reset
			s0_waitrequest   : out std_logic;                                        -- waitrequest
			s0_readdata      : out std_logic_vector(31 downto 0);                    -- readdata
			s0_readdatavalid : out std_logic;                                        -- readdatavalid
			s0_burstcount    : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			s0_writedata     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			s0_address       : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- address
			s0_write         : in  std_logic                     := 'X';             -- write
			s0_read          : in  std_logic                     := 'X';             -- read
			s0_byteenable    : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			s0_debugaccess   : in  std_logic                     := 'X';             -- debugaccess
			m0_waitrequest   : in  std_logic                     := 'X';             -- waitrequest
			m0_readdata      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			m0_readdatavalid : in  std_logic                     := 'X';             -- readdatavalid
			m0_burstcount    : out std_logic_vector(0 downto 0);                     -- burstcount
			m0_writedata     : out std_logic_vector(31 downto 0);                    -- writedata
			m0_address       : out std_logic_vector(6 downto 0);                     -- address
			m0_write         : out std_logic;                                        -- write
			m0_read          : out std_logic;                                        -- read
			m0_byteenable    : out std_logic_vector(3 downto 0);                     -- byteenable
			m0_debugaccess   : out std_logic                                         -- debugaccess
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_export_slave;

	component fluid_board_soc_sld_hub_controller_system_0_link_write_slave_to_source is
		port (
			wrclock                          : in  std_logic                     := 'X';             -- clk
			reset_n                          : in  std_logic                     := 'X';             -- reset_n
			avalonmm_write_slave_writedata   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			avalonmm_write_slave_write       : in  std_logic                     := 'X';             -- write
			avalonmm_write_slave_address     : in  std_logic                     := 'X';             -- address
			avalonmm_write_slave_waitrequest : out std_logic;                                        -- waitrequest
			avalonst_source_valid            : out std_logic;                                        -- valid
			avalonst_source_data             : out std_logic_vector(31 downto 0);                    -- data
			avalonst_source_ready            : in  std_logic                     := 'X';             -- ready
			wrclk_control_slave_address      : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			wrclk_control_slave_read         : in  std_logic                     := 'X';             -- read
			wrclk_control_slave_writedata    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			wrclk_control_slave_write        : in  std_logic                     := 'X';             -- write
			wrclk_control_slave_readdata     : out std_logic_vector(31 downto 0)                     -- readdata
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_write_slave_to_source;

	component fluid_board_soc_sld_hub_controller_system_0_link_h2t_timing_adapter is
		port (
			clk       : in  std_logic                     := 'X';             -- clk
			reset_n   : in  std_logic                     := 'X';             -- reset_n
			in_data   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			in_valid  : in  std_logic                     := 'X';             -- valid
			in_ready  : out std_logic;                                        -- ready
			out_data  : out std_logic_vector(31 downto 0);                    -- data
			out_valid : out std_logic;                                        -- valid
			out_ready : in  std_logic                     := 'X'              -- ready
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_h2t_timing_adapter;

	component fluid_board_soc_sld_hub_controller_system_0_link_h2t_data_matcher is
		port (
			clk          : in  std_logic                     := 'X';             -- clk
			reset        : in  std_logic                     := 'X';             -- reset
			source_data  : out std_logic_vector(7 downto 0);                     -- data
			source_valid : out std_logic;                                        -- valid
			source_ready : in  std_logic                     := 'X';             -- ready
			sink_data    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			sink_valid   : in  std_logic                     := 'X';             -- valid
			sink_ready   : out std_logic                                         -- ready
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_h2t_data_matcher;

	component fluid_board_soc_fpga_only_master_b2p is
		port (
			clk               : in  std_logic                    := 'X';             -- clk
			reset_n           : in  std_logic                    := 'X';             -- reset_n
			out_channel       : out std_logic_vector(7 downto 0);                    -- channel
			out_ready         : in  std_logic                    := 'X';             -- ready
			out_valid         : out std_logic;                                       -- valid
			out_data          : out std_logic_vector(7 downto 0);                    -- data
			out_startofpacket : out std_logic;                                       -- startofpacket
			out_endofpacket   : out std_logic;                                       -- endofpacket
			in_ready          : out std_logic;                                       -- ready
			in_valid          : in  std_logic                    := 'X';             -- valid
			in_data           : in  std_logic_vector(7 downto 0) := (others => 'X')  -- data
		);
	end component fluid_board_soc_fpga_only_master_b2p;

	component fluid_board_soc_sld_hub_controller_system_0_link_h2t_channel_adapter is
		port (
			clk               : in  std_logic                    := 'X';             -- clk
			reset_n           : in  std_logic                    := 'X';             -- reset_n
			in_data           : in  std_logic_vector(7 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                    := 'X';             -- valid
			in_ready          : out std_logic;                                       -- ready
			in_startofpacket  : in  std_logic                    := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                    := 'X';             -- endofpacket
			in_channel        : in  std_logic_vector(7 downto 0) := (others => 'X'); -- channel
			out_data          : out std_logic_vector(7 downto 0);                    -- data
			out_valid         : out std_logic;                                       -- valid
			out_ready         : in  std_logic                    := 'X';             -- ready
			out_startofpacket : out std_logic;                                       -- startofpacket
			out_endofpacket   : out std_logic;                                       -- endofpacket
			out_channel       : out std_logic                                        -- channel
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_h2t_channel_adapter;

	component fluid_board_soc_sld_hub_controller_system_0_link_t2h_channel_adapter is
		port (
			clk               : in  std_logic                    := 'X';             -- clk
			reset_n           : in  std_logic                    := 'X';             -- reset_n
			in_data           : in  std_logic_vector(7 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                    := 'X';             -- valid
			in_ready          : out std_logic;                                       -- ready
			in_startofpacket  : in  std_logic                    := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                    := 'X';             -- endofpacket
			in_channel        : in  std_logic                    := 'X';             -- channel
			out_data          : out std_logic_vector(7 downto 0);                    -- data
			out_valid         : out std_logic;                                       -- valid
			out_ready         : in  std_logic                    := 'X';             -- ready
			out_startofpacket : out std_logic;                                       -- startofpacket
			out_endofpacket   : out std_logic;                                       -- endofpacket
			out_channel       : out std_logic_vector(7 downto 0)                     -- channel
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_t2h_channel_adapter;

	component fluid_board_soc_fpga_only_master_p2b is
		port (
			clk              : in  std_logic                    := 'X';             -- clk
			reset_n          : in  std_logic                    := 'X';             -- reset_n
			in_ready         : out std_logic;                                       -- ready
			in_valid         : in  std_logic                    := 'X';             -- valid
			in_data          : in  std_logic_vector(7 downto 0) := (others => 'X'); -- data
			in_channel       : in  std_logic_vector(7 downto 0) := (others => 'X'); -- channel
			in_startofpacket : in  std_logic                    := 'X';             -- startofpacket
			in_endofpacket   : in  std_logic                    := 'X';             -- endofpacket
			out_ready        : in  std_logic                    := 'X';             -- ready
			out_valid        : out std_logic;                                       -- valid
			out_data         : out std_logic_vector(7 downto 0)                     -- data
		);
	end component fluid_board_soc_fpga_only_master_p2b;

	component fluid_board_soc_sld_hub_controller_system_0_link_t2h_data_matcher is
		port (
			clk          : in  std_logic                     := 'X';             -- clk
			reset        : in  std_logic                     := 'X';             -- reset
			source_data  : out std_logic_vector(31 downto 0);                    -- data
			source_valid : out std_logic;                                        -- valid
			source_ready : in  std_logic                     := 'X';             -- ready
			sink_data    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			sink_valid   : in  std_logic                     := 'X';             -- valid
			sink_ready   : out std_logic                                         -- ready
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_t2h_data_matcher;

	component fluid_board_soc_sld_hub_controller_system_0_link_t2h_timing_adapter is
		port (
			clk       : in  std_logic                     := 'X';             -- clk
			reset_n   : in  std_logic                     := 'X';             -- reset_n
			in_data   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			in_valid  : in  std_logic                     := 'X';             -- valid
			in_ready  : out std_logic;                                        -- ready
			out_data  : out std_logic_vector(31 downto 0);                    -- data
			out_valid : out std_logic;                                        -- valid
			out_ready : in  std_logic                     := 'X'              -- ready
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_t2h_timing_adapter;

	component fluid_board_soc_sld_hub_controller_system_0_link_sink_to_read_slave is
		port (
			wrclock                         : in  std_logic                     := 'X';             -- clk
			reset_n                         : in  std_logic                     := 'X';             -- reset_n
			avalonst_sink_valid             : in  std_logic                     := 'X';             -- valid
			avalonst_sink_data              : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			avalonst_sink_ready             : out std_logic;                                        -- ready
			avalonmm_read_slave_readdata    : out std_logic_vector(31 downto 0);                    -- readdata
			avalonmm_read_slave_read        : in  std_logic                     := 'X';             -- read
			avalonmm_read_slave_address     : in  std_logic                     := 'X';             -- address
			avalonmm_read_slave_waitrequest : out std_logic;                                        -- waitrequest
			wrclk_control_slave_address     : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			wrclk_control_slave_read        : in  std_logic                     := 'X';             -- read
			wrclk_control_slave_writedata   : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			wrclk_control_slave_write       : in  std_logic                     := 'X';             -- write
			wrclk_control_slave_readdata    : out std_logic_vector(31 downto 0)                     -- readdata
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_sink_to_read_slave;

	component fluid_board_soc_sld_hub_controller_system_0_link_connection_id_rom is
		port (
			clk       : in  std_logic                     := 'X';             -- clk
			reset     : in  std_logic                     := 'X';             -- reset
			read      : in  std_logic                     := 'X';             -- read
			write     : in  std_logic                     := 'X';             -- write
			writedata : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			readdata  : out std_logic_vector(31 downto 0);                    -- readdata
			address   : in  std_logic_vector(1 downto 0)  := (others => 'X')  -- address
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_connection_id_rom;

	component fluid_board_soc_sld_hub_controller_system_0_link_mm_mgmt is
		port (
			clk           : in  std_logic                     := 'X';             -- clk
			reset         : in  std_logic                     := 'X';             -- reset
			csr_write     : in  std_logic                     := 'X';             -- write
			csr_writedata : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			mgmt_valid    : out std_logic;                                        -- valid
			mgmt_data     : out std_logic;                                        -- data
			mgmt_channel  : out std_logic_vector(7 downto 0)                      -- channel
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_mm_mgmt;

	component fluid_board_soc_sld_hub_controller_system_0_link_mm_interconnect_0 is
		port (
			clock_bridge_out_clk_clk                       : in  std_logic                     := 'X';             -- clk
			export_slave_reset_reset_bridge_in_reset_reset : in  std_logic                     := 'X';             -- reset
			export_slave_m0_address                        : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- address
			export_slave_m0_waitrequest                    : out std_logic;                                        -- waitrequest
			export_slave_m0_burstcount                     : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			export_slave_m0_byteenable                     : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			export_slave_m0_read                           : in  std_logic                     := 'X';             -- read
			export_slave_m0_readdata                       : out std_logic_vector(31 downto 0);                    -- readdata
			export_slave_m0_readdatavalid                  : out std_logic;                                        -- readdatavalid
			export_slave_m0_write                          : in  std_logic                     := 'X';             -- write
			export_slave_m0_writedata                      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			export_slave_m0_debugaccess                    : in  std_logic                     := 'X';             -- debugaccess
			connection_id_rom_s0_address                   : out std_logic_vector(1 downto 0);                     -- address
			connection_id_rom_s0_write                     : out std_logic;                                        -- write
			connection_id_rom_s0_read                      : out std_logic;                                        -- read
			connection_id_rom_s0_readdata                  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			connection_id_rom_s0_writedata                 : out std_logic_vector(31 downto 0);                    -- writedata
			mm_mgmt_csr_write                              : out std_logic;                                        -- write
			mm_mgmt_csr_writedata                          : out std_logic_vector(31 downto 0);                    -- writedata
			sink_to_read_slave_in_csr_address              : out std_logic_vector(2 downto 0);                     -- address
			sink_to_read_slave_in_csr_write                : out std_logic;                                        -- write
			sink_to_read_slave_in_csr_read                 : out std_logic;                                        -- read
			sink_to_read_slave_in_csr_readdata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			sink_to_read_slave_in_csr_writedata            : out std_logic_vector(31 downto 0);                    -- writedata
			sink_to_read_slave_out_address                 : out std_logic_vector(0 downto 0);                     -- address
			sink_to_read_slave_out_read                    : out std_logic;                                        -- read
			sink_to_read_slave_out_readdata                : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			sink_to_read_slave_out_waitrequest             : in  std_logic                     := 'X';             -- waitrequest
			write_slave_to_source_in_address               : out std_logic_vector(0 downto 0);                     -- address
			write_slave_to_source_in_write                 : out std_logic;                                        -- write
			write_slave_to_source_in_writedata             : out std_logic_vector(31 downto 0);                    -- writedata
			write_slave_to_source_in_waitrequest           : in  std_logic                     := 'X';             -- waitrequest
			write_slave_to_source_in_csr_address           : out std_logic_vector(2 downto 0);                     -- address
			write_slave_to_source_in_csr_write             : out std_logic;                                        -- write
			write_slave_to_source_in_csr_read              : out std_logic;                                        -- read
			write_slave_to_source_in_csr_readdata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			write_slave_to_source_in_csr_writedata         : out std_logic_vector(31 downto 0)                     -- writedata
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link_mm_interconnect_0;

	signal write_slave_to_source_out_valid                          : std_logic;                     -- write_slave_to_source:avalonst_source_valid -> h2t_timing_adapter:in_valid
	signal write_slave_to_source_out_data                           : std_logic_vector(31 downto 0); -- write_slave_to_source:avalonst_source_data -> h2t_timing_adapter:in_data
	signal write_slave_to_source_out_ready                          : std_logic;                     -- h2t_timing_adapter:in_ready -> write_slave_to_source:avalonst_source_ready
	signal h2t_timing_adapter_out_valid                             : std_logic;                     -- h2t_timing_adapter:out_valid -> h2t_data_matcher:sink_valid
	signal h2t_timing_adapter_out_data                              : std_logic_vector(31 downto 0); -- h2t_timing_adapter:out_data -> h2t_data_matcher:sink_data
	signal h2t_timing_adapter_out_ready                             : std_logic;                     -- h2t_data_matcher:sink_ready -> h2t_timing_adapter:out_ready
	signal h2t_data_matcher_source_valid                            : std_logic;                     -- h2t_data_matcher:source_valid -> h2t_packet_source:in_valid
	signal h2t_data_matcher_source_data                             : std_logic_vector(7 downto 0);  -- h2t_data_matcher:source_data -> h2t_packet_source:in_data
	signal h2t_data_matcher_source_ready                            : std_logic;                     -- h2t_packet_source:in_ready -> h2t_data_matcher:source_ready
	signal t2h_byte_source_out_bytes_stream_valid                   : std_logic;                     -- t2h_byte_source:out_valid -> t2h_data_matcher:sink_valid
	signal t2h_byte_source_out_bytes_stream_data                    : std_logic_vector(7 downto 0);  -- t2h_byte_source:out_data -> t2h_data_matcher:sink_data
	signal t2h_byte_source_out_bytes_stream_ready                   : std_logic;                     -- t2h_data_matcher:sink_ready -> t2h_byte_source:out_ready
	signal t2h_channel_adapter_out_endofpacket                      : std_logic;                     -- t2h_channel_adapter:out_endofpacket -> t2h_byte_source:in_endofpacket
	signal t2h_channel_adapter_out_valid                            : std_logic;                     -- t2h_channel_adapter:out_valid -> t2h_byte_source:in_valid
	signal t2h_channel_adapter_out_startofpacket                    : std_logic;                     -- t2h_channel_adapter:out_startofpacket -> t2h_byte_source:in_startofpacket
	signal t2h_channel_adapter_out_data                             : std_logic_vector(7 downto 0);  -- t2h_channel_adapter:out_data -> t2h_byte_source:in_data
	signal t2h_channel_adapter_out_channel                          : std_logic_vector(7 downto 0);  -- t2h_channel_adapter:out_channel -> t2h_byte_source:in_channel
	signal t2h_channel_adapter_out_ready                            : std_logic;                     -- t2h_byte_source:in_ready -> t2h_channel_adapter:out_ready
	signal h2t_packet_source_out_packets_stream_endofpacket         : std_logic;                     -- h2t_packet_source:out_endofpacket -> h2t_channel_adapter:in_endofpacket
	signal h2t_packet_source_out_packets_stream_valid               : std_logic;                     -- h2t_packet_source:out_valid -> h2t_channel_adapter:in_valid
	signal h2t_packet_source_out_packets_stream_startofpacket       : std_logic;                     -- h2t_packet_source:out_startofpacket -> h2t_channel_adapter:in_startofpacket
	signal h2t_packet_source_out_packets_stream_data                : std_logic_vector(7 downto 0);  -- h2t_packet_source:out_data -> h2t_channel_adapter:in_data
	signal h2t_packet_source_out_packets_stream_ready               : std_logic;                     -- h2t_channel_adapter:in_ready -> h2t_packet_source:out_ready
	signal h2t_packet_source_out_packets_stream_channel             : std_logic_vector(7 downto 0);  -- h2t_packet_source:out_channel -> h2t_channel_adapter:in_channel
	signal t2h_timing_adapter_out_valid                             : std_logic;                     -- t2h_timing_adapter:out_valid -> sink_to_read_slave:avalonst_sink_valid
	signal t2h_timing_adapter_out_data                              : std_logic_vector(31 downto 0); -- t2h_timing_adapter:out_data -> sink_to_read_slave:avalonst_sink_data
	signal t2h_timing_adapter_out_ready                             : std_logic;                     -- sink_to_read_slave:avalonst_sink_ready -> t2h_timing_adapter:out_ready
	signal t2h_data_matcher_source_valid                            : std_logic;                     -- t2h_data_matcher:source_valid -> t2h_timing_adapter:in_valid
	signal t2h_data_matcher_source_data                             : std_logic_vector(31 downto 0); -- t2h_data_matcher:source_data -> t2h_timing_adapter:in_data
	signal t2h_data_matcher_source_ready                            : std_logic;                     -- t2h_timing_adapter:in_ready -> t2h_data_matcher:source_ready
	signal export_slave_m0_burstcount                               : std_logic_vector(0 downto 0);  -- export_slave:m0_burstcount -> mm_interconnect_0:export_slave_m0_burstcount
	signal export_slave_m0_waitrequest                              : std_logic;                     -- mm_interconnect_0:export_slave_m0_waitrequest -> export_slave:m0_waitrequest
	signal export_slave_m0_address                                  : std_logic_vector(6 downto 0);  -- export_slave:m0_address -> mm_interconnect_0:export_slave_m0_address
	signal export_slave_m0_writedata                                : std_logic_vector(31 downto 0); -- export_slave:m0_writedata -> mm_interconnect_0:export_slave_m0_writedata
	signal export_slave_m0_write                                    : std_logic;                     -- export_slave:m0_write -> mm_interconnect_0:export_slave_m0_write
	signal export_slave_m0_read                                     : std_logic;                     -- export_slave:m0_read -> mm_interconnect_0:export_slave_m0_read
	signal export_slave_m0_readdata                                 : std_logic_vector(31 downto 0); -- mm_interconnect_0:export_slave_m0_readdata -> export_slave:m0_readdata
	signal export_slave_m0_debugaccess                              : std_logic;                     -- export_slave:m0_debugaccess -> mm_interconnect_0:export_slave_m0_debugaccess
	signal export_slave_m0_byteenable                               : std_logic_vector(3 downto 0);  -- export_slave:m0_byteenable -> mm_interconnect_0:export_slave_m0_byteenable
	signal export_slave_m0_readdatavalid                            : std_logic;                     -- mm_interconnect_0:export_slave_m0_readdatavalid -> export_slave:m0_readdatavalid
	signal mm_interconnect_0_write_slave_to_source_in_waitrequest   : std_logic;                     -- write_slave_to_source:avalonmm_write_slave_waitrequest -> mm_interconnect_0:write_slave_to_source_in_waitrequest
	signal mm_interconnect_0_write_slave_to_source_in_writedata     : std_logic_vector(31 downto 0); -- mm_interconnect_0:write_slave_to_source_in_writedata -> write_slave_to_source:avalonmm_write_slave_writedata
	signal mm_interconnect_0_write_slave_to_source_in_address       : std_logic_vector(0 downto 0);  -- mm_interconnect_0:write_slave_to_source_in_address -> write_slave_to_source:avalonmm_write_slave_address
	signal mm_interconnect_0_write_slave_to_source_in_write         : std_logic;                     -- mm_interconnect_0:write_slave_to_source_in_write -> write_slave_to_source:avalonmm_write_slave_write
	signal mm_interconnect_0_sink_to_read_slave_out_waitrequest     : std_logic;                     -- sink_to_read_slave:avalonmm_read_slave_waitrequest -> mm_interconnect_0:sink_to_read_slave_out_waitrequest
	signal mm_interconnect_0_sink_to_read_slave_out_address         : std_logic_vector(0 downto 0);  -- mm_interconnect_0:sink_to_read_slave_out_address -> sink_to_read_slave:avalonmm_read_slave_address
	signal mm_interconnect_0_sink_to_read_slave_out_read            : std_logic;                     -- mm_interconnect_0:sink_to_read_slave_out_read -> sink_to_read_slave:avalonmm_read_slave_read
	signal mm_interconnect_0_sink_to_read_slave_out_readdata        : std_logic_vector(31 downto 0); -- sink_to_read_slave:avalonmm_read_slave_readdata -> mm_interconnect_0:sink_to_read_slave_out_readdata
	signal mm_interconnect_0_write_slave_to_source_in_csr_writedata : std_logic_vector(31 downto 0); -- mm_interconnect_0:write_slave_to_source_in_csr_writedata -> write_slave_to_source:wrclk_control_slave_writedata
	signal mm_interconnect_0_write_slave_to_source_in_csr_address   : std_logic_vector(2 downto 0);  -- mm_interconnect_0:write_slave_to_source_in_csr_address -> write_slave_to_source:wrclk_control_slave_address
	signal mm_interconnect_0_write_slave_to_source_in_csr_write     : std_logic;                     -- mm_interconnect_0:write_slave_to_source_in_csr_write -> write_slave_to_source:wrclk_control_slave_write
	signal mm_interconnect_0_write_slave_to_source_in_csr_read      : std_logic;                     -- mm_interconnect_0:write_slave_to_source_in_csr_read -> write_slave_to_source:wrclk_control_slave_read
	signal mm_interconnect_0_write_slave_to_source_in_csr_readdata  : std_logic_vector(31 downto 0); -- write_slave_to_source:wrclk_control_slave_readdata -> mm_interconnect_0:write_slave_to_source_in_csr_readdata
	signal mm_interconnect_0_sink_to_read_slave_in_csr_writedata    : std_logic_vector(31 downto 0); -- mm_interconnect_0:sink_to_read_slave_in_csr_writedata -> sink_to_read_slave:wrclk_control_slave_writedata
	signal mm_interconnect_0_sink_to_read_slave_in_csr_address      : std_logic_vector(2 downto 0);  -- mm_interconnect_0:sink_to_read_slave_in_csr_address -> sink_to_read_slave:wrclk_control_slave_address
	signal mm_interconnect_0_sink_to_read_slave_in_csr_write        : std_logic;                     -- mm_interconnect_0:sink_to_read_slave_in_csr_write -> sink_to_read_slave:wrclk_control_slave_write
	signal mm_interconnect_0_sink_to_read_slave_in_csr_read         : std_logic;                     -- mm_interconnect_0:sink_to_read_slave_in_csr_read -> sink_to_read_slave:wrclk_control_slave_read
	signal mm_interconnect_0_sink_to_read_slave_in_csr_readdata     : std_logic_vector(31 downto 0); -- sink_to_read_slave:wrclk_control_slave_readdata -> mm_interconnect_0:sink_to_read_slave_in_csr_readdata
	signal mm_interconnect_0_connection_id_rom_s0_writedata         : std_logic_vector(31 downto 0); -- mm_interconnect_0:connection_id_rom_s0_writedata -> connection_id_rom:writedata
	signal mm_interconnect_0_connection_id_rom_s0_address           : std_logic_vector(1 downto 0);  -- mm_interconnect_0:connection_id_rom_s0_address -> connection_id_rom:address
	signal mm_interconnect_0_connection_id_rom_s0_write             : std_logic;                     -- mm_interconnect_0:connection_id_rom_s0_write -> connection_id_rom:write
	signal mm_interconnect_0_connection_id_rom_s0_read              : std_logic;                     -- mm_interconnect_0:connection_id_rom_s0_read -> connection_id_rom:read
	signal mm_interconnect_0_connection_id_rom_s0_readdata          : std_logic_vector(31 downto 0); -- connection_id_rom:readdata -> mm_interconnect_0:connection_id_rom_s0_readdata
	signal mm_interconnect_0_mm_mgmt_csr_writedata                  : std_logic_vector(31 downto 0); -- mm_interconnect_0:mm_mgmt_csr_writedata -> mm_mgmt:csr_writedata
	signal mm_interconnect_0_mm_mgmt_csr_write                      : std_logic;                     -- mm_interconnect_0:mm_mgmt_csr_write -> mm_mgmt:csr_write
	signal reset_reset_ports_inv                                    : std_logic;                     -- reset_reset:inv -> [h2t_channel_adapter:reset_n, h2t_packet_source:reset_n, h2t_timing_adapter:reset_n, sink_to_read_slave:reset_n, t2h_byte_source:reset_n, t2h_channel_adapter:reset_n, t2h_timing_adapter:reset_n, write_slave_to_source:reset_n]

begin

	export_slave : component fluid_board_soc_sld_hub_controller_system_0_link_export_slave
		port map (
			clk              => clk_clk,                       --   clk.clk
			reset            => reset_reset,                   -- reset.reset
			s0_waitrequest   => s0_waitrequest,                --    s0.waitrequest
			s0_readdata      => s0_readdata,                   --      .readdata
			s0_readdatavalid => s0_readdatavalid,              --      .readdatavalid
			s0_burstcount    => s0_burstcount,                 --      .burstcount
			s0_writedata     => s0_writedata,                  --      .writedata
			s0_address       => s0_address,                    --      .address
			s0_write         => s0_write,                      --      .write
			s0_read          => s0_read,                       --      .read
			s0_byteenable    => s0_byteenable,                 --      .byteenable
			s0_debugaccess   => s0_debugaccess,                --      .debugaccess
			m0_waitrequest   => export_slave_m0_waitrequest,   --    m0.waitrequest
			m0_readdata      => export_slave_m0_readdata,      --      .readdata
			m0_readdatavalid => export_slave_m0_readdatavalid, --      .readdatavalid
			m0_burstcount    => export_slave_m0_burstcount,    --      .burstcount
			m0_writedata     => export_slave_m0_writedata,     --      .writedata
			m0_address       => export_slave_m0_address,       --      .address
			m0_write         => export_slave_m0_write,         --      .write
			m0_read          => export_slave_m0_read,          --      .read
			m0_byteenable    => export_slave_m0_byteenable,    --      .byteenable
			m0_debugaccess   => export_slave_m0_debugaccess    --      .debugaccess
		);

	write_slave_to_source : component fluid_board_soc_sld_hub_controller_system_0_link_write_slave_to_source
		port map (
			wrclock                          => clk_clk,                                                  --   clk_in.clk
			reset_n                          => reset_reset_ports_inv,                                    -- reset_in.reset_n
			avalonmm_write_slave_writedata   => mm_interconnect_0_write_slave_to_source_in_writedata,     --       in.writedata
			avalonmm_write_slave_write       => mm_interconnect_0_write_slave_to_source_in_write,         --         .write
			avalonmm_write_slave_address     => mm_interconnect_0_write_slave_to_source_in_address(0),    --         .address
			avalonmm_write_slave_waitrequest => mm_interconnect_0_write_slave_to_source_in_waitrequest,   --         .waitrequest
			avalonst_source_valid            => write_slave_to_source_out_valid,                          --      out.valid
			avalonst_source_data             => write_slave_to_source_out_data,                           --         .data
			avalonst_source_ready            => write_slave_to_source_out_ready,                          --         .ready
			wrclk_control_slave_address      => mm_interconnect_0_write_slave_to_source_in_csr_address,   --   in_csr.address
			wrclk_control_slave_read         => mm_interconnect_0_write_slave_to_source_in_csr_read,      --         .read
			wrclk_control_slave_writedata    => mm_interconnect_0_write_slave_to_source_in_csr_writedata, --         .writedata
			wrclk_control_slave_write        => mm_interconnect_0_write_slave_to_source_in_csr_write,     --         .write
			wrclk_control_slave_readdata     => mm_interconnect_0_write_slave_to_source_in_csr_readdata   --         .readdata
		);

	h2t_timing_adapter : component fluid_board_soc_sld_hub_controller_system_0_link_h2t_timing_adapter
		port map (
			clk       => clk_clk,                         --   clk.clk
			reset_n   => reset_reset_ports_inv,           -- reset.reset_n
			in_data   => write_slave_to_source_out_data,  --    in.data
			in_valid  => write_slave_to_source_out_valid, --      .valid
			in_ready  => write_slave_to_source_out_ready, --      .ready
			out_data  => h2t_timing_adapter_out_data,     --   out.data
			out_valid => h2t_timing_adapter_out_valid,    --      .valid
			out_ready => h2t_timing_adapter_out_ready     --      .ready
		);

	h2t_data_matcher : component fluid_board_soc_sld_hub_controller_system_0_link_h2t_data_matcher
		port map (
			clk          => clk_clk,                       --  clock.clk
			reset        => reset_reset,                   --  reset.reset
			source_data  => h2t_data_matcher_source_data,  -- source.data
			source_valid => h2t_data_matcher_source_valid, --       .valid
			source_ready => h2t_data_matcher_source_ready, --       .ready
			sink_data    => h2t_timing_adapter_out_data,   --   sink.data
			sink_valid   => h2t_timing_adapter_out_valid,  --       .valid
			sink_ready   => h2t_timing_adapter_out_ready   --       .ready
		);

	h2t_packet_source : component fluid_board_soc_fpga_only_master_b2p
		port map (
			clk               => clk_clk,                                            --                clk.clk
			reset_n           => reset_reset_ports_inv,                              --          clk_reset.reset_n
			out_channel       => h2t_packet_source_out_packets_stream_channel,       -- out_packets_stream.channel
			out_ready         => h2t_packet_source_out_packets_stream_ready,         --                   .ready
			out_valid         => h2t_packet_source_out_packets_stream_valid,         --                   .valid
			out_data          => h2t_packet_source_out_packets_stream_data,          --                   .data
			out_startofpacket => h2t_packet_source_out_packets_stream_startofpacket, --                   .startofpacket
			out_endofpacket   => h2t_packet_source_out_packets_stream_endofpacket,   --                   .endofpacket
			in_ready          => h2t_data_matcher_source_ready,                      --    in_bytes_stream.ready
			in_valid          => h2t_data_matcher_source_valid,                      --                   .valid
			in_data           => h2t_data_matcher_source_data                        --                   .data
		);

	h2t_channel_adapter : component fluid_board_soc_sld_hub_controller_system_0_link_h2t_channel_adapter
		port map (
			clk               => clk_clk,                                            --   clk.clk
			reset_n           => reset_reset_ports_inv,                              -- reset.reset_n
			in_data           => h2t_packet_source_out_packets_stream_data,          --    in.data
			in_valid          => h2t_packet_source_out_packets_stream_valid,         --      .valid
			in_ready          => h2t_packet_source_out_packets_stream_ready,         --      .ready
			in_startofpacket  => h2t_packet_source_out_packets_stream_startofpacket, --      .startofpacket
			in_endofpacket    => h2t_packet_source_out_packets_stream_endofpacket,   --      .endofpacket
			in_channel        => h2t_packet_source_out_packets_stream_channel,       --      .channel
			out_data          => h2t_data,                                           --   out.data
			out_valid         => h2t_valid,                                          --      .valid
			out_ready         => h2t_ready,                                          --      .ready
			out_startofpacket => h2t_startofpacket,                                  --      .startofpacket
			out_endofpacket   => h2t_endofpacket,                                    --      .endofpacket
			out_channel       => h2t_channel                                         --      .channel
		);

	t2h_channel_adapter : component fluid_board_soc_sld_hub_controller_system_0_link_t2h_channel_adapter
		port map (
			clk               => clk_clk,                               --   clk.clk
			reset_n           => reset_reset_ports_inv,                 -- reset.reset_n
			in_data           => t2h_data,                              --    in.data
			in_valid          => t2h_valid,                             --      .valid
			in_ready          => t2h_ready,                             --      .ready
			in_startofpacket  => t2h_startofpacket,                     --      .startofpacket
			in_endofpacket    => t2h_endofpacket,                       --      .endofpacket
			in_channel        => t2h_channel,                           --      .channel
			out_data          => t2h_channel_adapter_out_data,          --   out.data
			out_valid         => t2h_channel_adapter_out_valid,         --      .valid
			out_ready         => t2h_channel_adapter_out_ready,         --      .ready
			out_startofpacket => t2h_channel_adapter_out_startofpacket, --      .startofpacket
			out_endofpacket   => t2h_channel_adapter_out_endofpacket,   --      .endofpacket
			out_channel       => t2h_channel_adapter_out_channel        --      .channel
		);

	t2h_byte_source : component fluid_board_soc_fpga_only_master_p2b
		port map (
			clk              => clk_clk,                                --               clk.clk
			reset_n          => reset_reset_ports_inv,                  --         clk_reset.reset_n
			in_ready         => t2h_channel_adapter_out_ready,          -- in_packets_stream.ready
			in_valid         => t2h_channel_adapter_out_valid,          --                  .valid
			in_data          => t2h_channel_adapter_out_data,           --                  .data
			in_channel       => t2h_channel_adapter_out_channel,        --                  .channel
			in_startofpacket => t2h_channel_adapter_out_startofpacket,  --                  .startofpacket
			in_endofpacket   => t2h_channel_adapter_out_endofpacket,    --                  .endofpacket
			out_ready        => t2h_byte_source_out_bytes_stream_ready, --  out_bytes_stream.ready
			out_valid        => t2h_byte_source_out_bytes_stream_valid, --                  .valid
			out_data         => t2h_byte_source_out_bytes_stream_data   --                  .data
		);

	t2h_data_matcher : component fluid_board_soc_sld_hub_controller_system_0_link_t2h_data_matcher
		port map (
			clk          => clk_clk,                                --  clock.clk
			reset        => reset_reset,                            --  reset.reset
			source_data  => t2h_data_matcher_source_data,           -- source.data
			source_valid => t2h_data_matcher_source_valid,          --       .valid
			source_ready => t2h_data_matcher_source_ready,          --       .ready
			sink_data    => t2h_byte_source_out_bytes_stream_data,  --   sink.data
			sink_valid   => t2h_byte_source_out_bytes_stream_valid, --       .valid
			sink_ready   => t2h_byte_source_out_bytes_stream_ready  --       .ready
		);

	t2h_timing_adapter : component fluid_board_soc_sld_hub_controller_system_0_link_t2h_timing_adapter
		port map (
			clk       => clk_clk,                       --   clk.clk
			reset_n   => reset_reset_ports_inv,         -- reset.reset_n
			in_data   => t2h_data_matcher_source_data,  --    in.data
			in_valid  => t2h_data_matcher_source_valid, --      .valid
			in_ready  => t2h_data_matcher_source_ready, --      .ready
			out_data  => t2h_timing_adapter_out_data,   --   out.data
			out_valid => t2h_timing_adapter_out_valid,  --      .valid
			out_ready => t2h_timing_adapter_out_ready   --      .ready
		);

	sink_to_read_slave : component fluid_board_soc_sld_hub_controller_system_0_link_sink_to_read_slave
		port map (
			wrclock                         => clk_clk,                                               --   clk_in.clk
			reset_n                         => reset_reset_ports_inv,                                 -- reset_in.reset_n
			avalonst_sink_valid             => t2h_timing_adapter_out_valid,                          --       in.valid
			avalonst_sink_data              => t2h_timing_adapter_out_data,                           --         .data
			avalonst_sink_ready             => t2h_timing_adapter_out_ready,                          --         .ready
			avalonmm_read_slave_readdata    => mm_interconnect_0_sink_to_read_slave_out_readdata,     --      out.readdata
			avalonmm_read_slave_read        => mm_interconnect_0_sink_to_read_slave_out_read,         --         .read
			avalonmm_read_slave_address     => mm_interconnect_0_sink_to_read_slave_out_address(0),   --         .address
			avalonmm_read_slave_waitrequest => mm_interconnect_0_sink_to_read_slave_out_waitrequest,  --         .waitrequest
			wrclk_control_slave_address     => mm_interconnect_0_sink_to_read_slave_in_csr_address,   --   in_csr.address
			wrclk_control_slave_read        => mm_interconnect_0_sink_to_read_slave_in_csr_read,      --         .read
			wrclk_control_slave_writedata   => mm_interconnect_0_sink_to_read_slave_in_csr_writedata, --         .writedata
			wrclk_control_slave_write       => mm_interconnect_0_sink_to_read_slave_in_csr_write,     --         .write
			wrclk_control_slave_readdata    => mm_interconnect_0_sink_to_read_slave_in_csr_readdata   --         .readdata
		);

	connection_id_rom : component fluid_board_soc_sld_hub_controller_system_0_link_connection_id_rom
		port map (
			clk       => clk_clk,                                          -- clock.clk
			reset     => reset_reset,                                      -- reset.reset
			read      => mm_interconnect_0_connection_id_rom_s0_read,      --    s0.read
			write     => mm_interconnect_0_connection_id_rom_s0_write,     --      .write
			writedata => mm_interconnect_0_connection_id_rom_s0_writedata, --      .writedata
			readdata  => mm_interconnect_0_connection_id_rom_s0_readdata,  --      .readdata
			address   => mm_interconnect_0_connection_id_rom_s0_address    --      .address
		);

	mm_mgmt : component fluid_board_soc_sld_hub_controller_system_0_link_mm_mgmt
		port map (
			clk           => clk_clk,                                 --   clk.clk
			reset         => reset_reset,                             -- reset.reset
			csr_write     => mm_interconnect_0_mm_mgmt_csr_write,     --   csr.write
			csr_writedata => mm_interconnect_0_mm_mgmt_csr_writedata, --      .writedata
			mgmt_valid    => mgmt_valid,                              --  mgmt.valid
			mgmt_data     => mgmt_data,                               --      .data
			mgmt_channel  => mgmt_channel                             --      .channel
		);

	mm_interconnect_0 : component fluid_board_soc_sld_hub_controller_system_0_link_mm_interconnect_0
		port map (
			clock_bridge_out_clk_clk                       => clk_clk,                                                  --                     clock_bridge_out_clk.clk
			export_slave_reset_reset_bridge_in_reset_reset => reset_reset,                                              -- export_slave_reset_reset_bridge_in_reset.reset
			export_slave_m0_address                        => export_slave_m0_address,                                  --                          export_slave_m0.address
			export_slave_m0_waitrequest                    => export_slave_m0_waitrequest,                              --                                         .waitrequest
			export_slave_m0_burstcount                     => export_slave_m0_burstcount,                               --                                         .burstcount
			export_slave_m0_byteenable                     => export_slave_m0_byteenable,                               --                                         .byteenable
			export_slave_m0_read                           => export_slave_m0_read,                                     --                                         .read
			export_slave_m0_readdata                       => export_slave_m0_readdata,                                 --                                         .readdata
			export_slave_m0_readdatavalid                  => export_slave_m0_readdatavalid,                            --                                         .readdatavalid
			export_slave_m0_write                          => export_slave_m0_write,                                    --                                         .write
			export_slave_m0_writedata                      => export_slave_m0_writedata,                                --                                         .writedata
			export_slave_m0_debugaccess                    => export_slave_m0_debugaccess,                              --                                         .debugaccess
			connection_id_rom_s0_address                   => mm_interconnect_0_connection_id_rom_s0_address,           --                     connection_id_rom_s0.address
			connection_id_rom_s0_write                     => mm_interconnect_0_connection_id_rom_s0_write,             --                                         .write
			connection_id_rom_s0_read                      => mm_interconnect_0_connection_id_rom_s0_read,              --                                         .read
			connection_id_rom_s0_readdata                  => mm_interconnect_0_connection_id_rom_s0_readdata,          --                                         .readdata
			connection_id_rom_s0_writedata                 => mm_interconnect_0_connection_id_rom_s0_writedata,         --                                         .writedata
			mm_mgmt_csr_write                              => mm_interconnect_0_mm_mgmt_csr_write,                      --                              mm_mgmt_csr.write
			mm_mgmt_csr_writedata                          => mm_interconnect_0_mm_mgmt_csr_writedata,                  --                                         .writedata
			sink_to_read_slave_in_csr_address              => mm_interconnect_0_sink_to_read_slave_in_csr_address,      --                sink_to_read_slave_in_csr.address
			sink_to_read_slave_in_csr_write                => mm_interconnect_0_sink_to_read_slave_in_csr_write,        --                                         .write
			sink_to_read_slave_in_csr_read                 => mm_interconnect_0_sink_to_read_slave_in_csr_read,         --                                         .read
			sink_to_read_slave_in_csr_readdata             => mm_interconnect_0_sink_to_read_slave_in_csr_readdata,     --                                         .readdata
			sink_to_read_slave_in_csr_writedata            => mm_interconnect_0_sink_to_read_slave_in_csr_writedata,    --                                         .writedata
			sink_to_read_slave_out_address                 => mm_interconnect_0_sink_to_read_slave_out_address,         --                   sink_to_read_slave_out.address
			sink_to_read_slave_out_read                    => mm_interconnect_0_sink_to_read_slave_out_read,            --                                         .read
			sink_to_read_slave_out_readdata                => mm_interconnect_0_sink_to_read_slave_out_readdata,        --                                         .readdata
			sink_to_read_slave_out_waitrequest             => mm_interconnect_0_sink_to_read_slave_out_waitrequest,     --                                         .waitrequest
			write_slave_to_source_in_address               => mm_interconnect_0_write_slave_to_source_in_address,       --                 write_slave_to_source_in.address
			write_slave_to_source_in_write                 => mm_interconnect_0_write_slave_to_source_in_write,         --                                         .write
			write_slave_to_source_in_writedata             => mm_interconnect_0_write_slave_to_source_in_writedata,     --                                         .writedata
			write_slave_to_source_in_waitrequest           => mm_interconnect_0_write_slave_to_source_in_waitrequest,   --                                         .waitrequest
			write_slave_to_source_in_csr_address           => mm_interconnect_0_write_slave_to_source_in_csr_address,   --             write_slave_to_source_in_csr.address
			write_slave_to_source_in_csr_write             => mm_interconnect_0_write_slave_to_source_in_csr_write,     --                                         .write
			write_slave_to_source_in_csr_read              => mm_interconnect_0_write_slave_to_source_in_csr_read,      --                                         .read
			write_slave_to_source_in_csr_readdata          => mm_interconnect_0_write_slave_to_source_in_csr_readdata,  --                                         .readdata
			write_slave_to_source_in_csr_writedata         => mm_interconnect_0_write_slave_to_source_in_csr_writedata  --                                         .writedata
		);

	reset_reset_ports_inv <= not reset_reset;

end architecture rtl; -- of fluid_board_soc_sld_hub_controller_system_0_link
