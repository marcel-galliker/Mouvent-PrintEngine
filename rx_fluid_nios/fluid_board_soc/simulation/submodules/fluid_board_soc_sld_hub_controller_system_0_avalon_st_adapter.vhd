-- fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter.vhd

-- This file was auto-generated from altera_avalon_st_adapter_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.0 200 at 2015.12.23.13:40:21

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter is
	generic (
		inBitsPerSymbol : integer := 1;
		inUsePackets    : integer := 0;
		inDataWidth     : integer := 1;
		inChannelWidth  : integer := 8;
		inErrorWidth    : integer := 0;
		inUseEmptyPort  : integer := 0;
		inUseValid      : integer := 1;
		inUseReady      : integer := 0;
		inReadyLatency  : integer := 0;
		outDataWidth    : integer := 1;
		outChannelWidth : integer := 1;
		outErrorWidth   : integer := 0;
		outUseEmptyPort : integer := 0;
		outUseValid     : integer := 1;
		outUseReady     : integer := 0;
		outReadyLatency : integer := 0
	);
	port (
		in_clk_0_clk   : in  std_logic                    := '0';             -- in_clk_0.clk
		in_rst_0_reset : in  std_logic                    := '0';             -- in_rst_0.reset
		in_0_data      : in  std_logic                    := '0';             --     in_0.data
		in_0_valid     : in  std_logic                    := '0';             --         .valid
		in_0_channel   : in  std_logic_vector(7 downto 0) := (others => '0'); --         .channel
		out_0_data     : out std_logic;                                       --    out_0.data
		out_0_valid    : out std_logic;                                       --         .valid
		out_0_channel  : out std_logic                                        --         .channel
	);
end entity fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter;

architecture rtl of fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter is
	component fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter_channel_adapter_0 is
		port (
			clk         : in  std_logic                    := 'X';             -- clk
			reset_n     : in  std_logic                    := 'X';             -- reset_n
			in_data     : in  std_logic                    := 'X';             -- data
			in_valid    : in  std_logic                    := 'X';             -- valid
			in_channel  : in  std_logic_vector(7 downto 0) := (others => 'X'); -- channel
			out_data    : out std_logic;                                       -- data
			out_valid   : out std_logic;                                       -- valid
			out_channel : out std_logic                                        -- channel
		);
	end component fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter_channel_adapter_0;

	signal in_rst_0_reset_ports_inv : std_logic; -- in_rst_0_reset:inv -> channel_adapter_0:reset_n

begin

	inbitspersymbol_check : if inBitsPerSymbol /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inusepackets_check : if inUsePackets /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	indatawidth_check : if inDataWidth /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inchannelwidth_check : if inChannelWidth /= 8 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inerrorwidth_check : if inErrorWidth /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inuseemptyport_check : if inUseEmptyPort /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inusevalid_check : if inUseValid /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inuseready_check : if inUseReady /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	inreadylatency_check : if inReadyLatency /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outdatawidth_check : if outDataWidth /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outchannelwidth_check : if outChannelWidth /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outerrorwidth_check : if outErrorWidth /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outuseemptyport_check : if outUseEmptyPort /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outusevalid_check : if outUseValid /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outuseready_check : if outUseReady /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	outreadylatency_check : if outReadyLatency /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	channel_adapter_0 : component fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter_channel_adapter_0
		port map (
			clk         => in_clk_0_clk,             --   clk.clk
			reset_n     => in_rst_0_reset_ports_inv, -- reset.reset_n
			in_data     => in_0_data,                --    in.data
			in_valid    => in_0_valid,               --      .valid
			in_channel  => in_0_channel,             --      .channel
			out_data    => out_0_data,               --   out.data
			out_valid   => out_0_valid,              --      .valid
			out_channel => out_0_channel             --      .channel
		);

	in_rst_0_reset_ports_inv <= not in_rst_0_reset;

end architecture rtl; -- of fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter
