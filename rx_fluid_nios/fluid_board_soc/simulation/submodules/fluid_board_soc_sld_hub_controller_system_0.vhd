-- fluid_board_soc_sld_hub_controller_system_0.vhd

-- This file was auto-generated from altera_sld_hub_controller_system_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.0 200 at 2015.12.23.13:39:31

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fluid_board_soc_sld_hub_controller_system_0 is
	generic (
		ENABLE_JTAG_IO_SELECTION : integer := 0
	);
	port (
		clk_clk          : in  std_logic                     := '0';             --   clk.clk
		reset_reset      : in  std_logic                     := '0';             -- reset.reset
		s0_waitrequest   : out std_logic;                                        --    s0.waitrequest
		s0_readdata      : out std_logic_vector(31 downto 0);                    --      .readdata
		s0_readdatavalid : out std_logic;                                        --      .readdatavalid
		s0_burstcount    : in  std_logic_vector(0 downto 0)  := (others => '0'); --      .burstcount
		s0_writedata     : in  std_logic_vector(31 downto 0) := (others => '0'); --      .writedata
		s0_address       : in  std_logic_vector(6 downto 0)  := (others => '0'); --      .address
		s0_write         : in  std_logic                     := '0';             --      .write
		s0_read          : in  std_logic                     := '0';             --      .read
		s0_byteenable    : in  std_logic_vector(3 downto 0)  := (others => '0'); --      .byteenable
		s0_debugaccess   : in  std_logic                     := '0'              --      .debugaccess
	);
end entity fluid_board_soc_sld_hub_controller_system_0;

architecture rtl of fluid_board_soc_sld_hub_controller_system_0 is
	component fluid_board_soc_sld_hub_controller_system_0_link is
		port (
			clk_clk           : in  std_logic                     := 'X';             -- clk
			reset_reset       : in  std_logic                     := 'X';             -- reset
			s0_waitrequest    : out std_logic;                                        -- waitrequest
			s0_readdata       : out std_logic_vector(31 downto 0);                    -- readdata
			s0_readdatavalid  : out std_logic;                                        -- readdatavalid
			s0_burstcount     : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			s0_writedata      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			s0_address        : in  std_logic_vector(6 downto 0)  := (others => 'X'); -- address
			s0_write          : in  std_logic                     := 'X';             -- write
			s0_read           : in  std_logic                     := 'X';             -- read
			s0_byteenable     : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			s0_debugaccess    : in  std_logic                     := 'X';             -- debugaccess
			h2t_data          : out std_logic_vector(7 downto 0);                     -- data
			h2t_valid         : out std_logic;                                        -- valid
			h2t_ready         : in  std_logic                     := 'X';             -- ready
			h2t_startofpacket : out std_logic;                                        -- startofpacket
			h2t_endofpacket   : out std_logic;                                        -- endofpacket
			h2t_channel       : out std_logic;                                        -- channel
			t2h_data          : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			t2h_valid         : in  std_logic                     := 'X';             -- valid
			t2h_ready         : out std_logic;                                        -- ready
			t2h_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			t2h_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			t2h_channel       : in  std_logic                     := 'X';             -- channel
			mgmt_valid        : out std_logic;                                        -- valid
			mgmt_data         : out std_logic;                                        -- data
			mgmt_channel      : out std_logic_vector(7 downto 0)                      -- channel
		);
	end component fluid_board_soc_sld_hub_controller_system_0_link;

	component fluid_board_soc_sld_hub_controller_system_0_fabric is
		port (
			clk_clk             : in  std_logic                    := 'X';             -- clk
			reset_reset         : in  std_logic                    := 'X';             -- reset
			h2t_ready           : out std_logic;                                       -- ready
			h2t_valid           : in  std_logic                    := 'X';             -- valid
			h2t_data            : in  std_logic_vector(7 downto 0) := (others => 'X'); -- data
			h2t_startofpacket   : in  std_logic                    := 'X';             -- startofpacket
			h2t_endofpacket     : in  std_logic                    := 'X';             -- endofpacket
			h2t_channel         : in  std_logic_vector(0 downto 0) := (others => 'X'); -- channel
			mgmt_valid          : in  std_logic                    := 'X';             -- valid
			mgmt_data           : in  std_logic                    := 'X';             -- data
			mgmt_channel        : in  std_logic_vector(0 downto 0) := (others => 'X'); -- channel
			t2h_ready           : in  std_logic                    := 'X';             -- ready
			t2h_valid           : out std_logic;                                       -- valid
			t2h_data            : out std_logic_vector(7 downto 0);                    -- data
			t2h_startofpacket   : out std_logic;                                       -- startofpacket
			t2h_endofpacket     : out std_logic;                                       -- endofpacket
			t2h_channel         : out std_logic_vector(0 downto 0);                    -- channel
			reset_0_reset       : out std_logic;                                       -- reset
			h2t_0_ready         : in  std_logic                    := 'X';             -- ready
			h2t_0_valid         : out std_logic;                                       -- valid
			h2t_0_data          : out std_logic_vector(7 downto 0);                    -- data
			h2t_0_startofpacket : out std_logic;                                       -- startofpacket
			h2t_0_endofpacket   : out std_logic;                                       -- endofpacket
			t2h_0_ready         : out std_logic;                                       -- ready
			t2h_0_valid         : in  std_logic                    := 'X';             -- valid
			t2h_0_data          : in  std_logic_vector(7 downto 0) := (others => 'X'); -- data
			t2h_0_startofpacket : in  std_logic                    := 'X';             -- startofpacket
			t2h_0_endofpacket   : in  std_logic                    := 'X'              -- endofpacket
		);
	end component fluid_board_soc_sld_hub_controller_system_0_fabric;

	component fluid_board_soc_sld_hub_controller_system_0_hub_controller is
		generic (
			ENABLE_JTAG_IO_SELECTION : boolean := false
		);
		port (
			clk_clk              : in  std_logic                    := 'X';             -- clk
			reset_reset          : in  std_logic                    := 'X';             -- reset
			sink_valid           : in  std_logic                    := 'X';             -- valid
			sink_startofpacket   : in  std_logic                    := 'X';             -- startofpacket
			sink_endofpacket     : in  std_logic                    := 'X';             -- endofpacket
			sink_data            : in  std_logic_vector(7 downto 0) := (others => 'X'); -- data
			sink_ready           : out std_logic;                                       -- ready
			source_valid         : out std_logic;                                       -- valid
			source_startofpacket : out std_logic;                                       -- startofpacket
			source_endofpacket   : out std_logic;                                       -- endofpacket
			source_data          : out std_logic_vector(7 downto 0);                    -- data
			source_ready         : in  std_logic                    := 'X'              -- ready
		);
	end component fluid_board_soc_sld_hub_controller_system_0_hub_controller;

	component fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter is
		generic (
			inBitsPerSymbol : integer := 8;
			inUsePackets    : integer := 0;
			inDataWidth     : integer := 8;
			inChannelWidth  : integer := 3;
			inErrorWidth    : integer := 2;
			inUseEmptyPort  : integer := 0;
			inUseValid      : integer := 1;
			inUseReady      : integer := 1;
			inReadyLatency  : integer := 0;
			outDataWidth    : integer := 32;
			outChannelWidth : integer := 3;
			outErrorWidth   : integer := 2;
			outUseEmptyPort : integer := 0;
			outUseValid     : integer := 1;
			outUseReady     : integer := 1;
			outReadyLatency : integer := 0
		);
		port (
			in_clk_0_clk   : in  std_logic                    := 'X';             -- clk
			in_rst_0_reset : in  std_logic                    := 'X';             -- reset
			in_0_data      : in  std_logic                    := 'X';             -- data
			in_0_valid     : in  std_logic                    := 'X';             -- valid
			in_0_channel   : in  std_logic_vector(7 downto 0) := (others => 'X'); -- channel
			out_0_data     : out std_logic;                                       -- data
			out_0_valid    : out std_logic;                                       -- valid
			out_0_channel  : out std_logic                                        -- channel
		);
	end component fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter;

	signal link_h2t_endofpacket                : std_logic;                    -- link:h2t_endofpacket -> fabric:h2t_endofpacket
	signal link_h2t_valid                      : std_logic;                    -- link:h2t_valid -> fabric:h2t_valid
	signal link_h2t_startofpacket              : std_logic;                    -- link:h2t_startofpacket -> fabric:h2t_startofpacket
	signal link_h2t_data                       : std_logic_vector(7 downto 0); -- link:h2t_data -> fabric:h2t_data
	signal link_h2t_channel                    : std_logic;                    -- link:h2t_channel -> fabric:h2t_channel
	signal link_h2t_ready                      : std_logic;                    -- fabric:h2t_ready -> link:h2t_ready
	signal fabric_t2h_endofpacket              : std_logic;                    -- fabric:t2h_endofpacket -> link:t2h_endofpacket
	signal fabric_t2h_valid                    : std_logic;                    -- fabric:t2h_valid -> link:t2h_valid
	signal fabric_t2h_startofpacket            : std_logic;                    -- fabric:t2h_startofpacket -> link:t2h_startofpacket
	signal fabric_t2h_data                     : std_logic_vector(7 downto 0); -- fabric:t2h_data -> link:t2h_data
	signal fabric_t2h_channel                  : std_logic_vector(0 downto 0); -- fabric:t2h_channel -> link:t2h_channel
	signal fabric_t2h_ready                    : std_logic;                    -- link:t2h_ready -> fabric:t2h_ready
	signal fabric_h2t_0_endofpacket            : std_logic;                    -- fabric:h2t_0_endofpacket -> hub_controller:sink_endofpacket
	signal fabric_h2t_0_valid                  : std_logic;                    -- fabric:h2t_0_valid -> hub_controller:sink_valid
	signal fabric_h2t_0_startofpacket          : std_logic;                    -- fabric:h2t_0_startofpacket -> hub_controller:sink_startofpacket
	signal fabric_h2t_0_data                   : std_logic_vector(7 downto 0); -- fabric:h2t_0_data -> hub_controller:sink_data
	signal fabric_h2t_0_ready                  : std_logic;                    -- hub_controller:sink_ready -> fabric:h2t_0_ready
	signal hub_controller_source_endofpacket   : std_logic;                    -- hub_controller:source_endofpacket -> fabric:t2h_0_endofpacket
	signal hub_controller_source_valid         : std_logic;                    -- hub_controller:source_valid -> fabric:t2h_0_valid
	signal hub_controller_source_startofpacket : std_logic;                    -- hub_controller:source_startofpacket -> fabric:t2h_0_startofpacket
	signal hub_controller_source_data          : std_logic_vector(7 downto 0); -- hub_controller:source_data -> fabric:t2h_0_data
	signal hub_controller_source_ready         : std_logic;                    -- fabric:t2h_0_ready -> hub_controller:source_ready
	signal link_mgmt_valid                     : std_logic;                    -- link:mgmt_valid -> avalon_st_adapter:in_0_valid
	signal link_mgmt_data                      : std_logic;                    -- link:mgmt_data -> avalon_st_adapter:in_0_data
	signal link_mgmt_channel                   : std_logic_vector(7 downto 0); -- link:mgmt_channel -> avalon_st_adapter:in_0_channel
	signal avalon_st_adapter_out_0_valid       : std_logic;                    -- avalon_st_adapter:out_0_valid -> fabric:mgmt_valid
	signal avalon_st_adapter_out_0_data        : std_logic;                    -- avalon_st_adapter:out_0_data -> fabric:mgmt_data
	signal avalon_st_adapter_out_0_channel     : std_logic;                    -- avalon_st_adapter:out_0_channel -> fabric:mgmt_channel

begin

	enable_jtag_io_selection_check : if ENABLE_JTAG_IO_SELECTION /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	link : component fluid_board_soc_sld_hub_controller_system_0_link
		port map (
			clk_clk           => clk_clk,                  --   clk.clk
			reset_reset       => reset_reset,              -- reset.reset
			s0_waitrequest    => s0_waitrequest,           --    s0.waitrequest
			s0_readdata       => s0_readdata,              --      .readdata
			s0_readdatavalid  => s0_readdatavalid,         --      .readdatavalid
			s0_burstcount     => s0_burstcount,            --      .burstcount
			s0_writedata      => s0_writedata,             --      .writedata
			s0_address        => s0_address,               --      .address
			s0_write          => s0_write,                 --      .write
			s0_read           => s0_read,                  --      .read
			s0_byteenable     => s0_byteenable,            --      .byteenable
			s0_debugaccess    => s0_debugaccess,           --      .debugaccess
			h2t_data          => link_h2t_data,            --   h2t.data
			h2t_valid         => link_h2t_valid,           --      .valid
			h2t_ready         => link_h2t_ready,           --      .ready
			h2t_startofpacket => link_h2t_startofpacket,   --      .startofpacket
			h2t_endofpacket   => link_h2t_endofpacket,     --      .endofpacket
			h2t_channel       => link_h2t_channel,         --      .channel
			t2h_data          => fabric_t2h_data,          --   t2h.data
			t2h_valid         => fabric_t2h_valid,         --      .valid
			t2h_ready         => fabric_t2h_ready,         --      .ready
			t2h_startofpacket => fabric_t2h_startofpacket, --      .startofpacket
			t2h_endofpacket   => fabric_t2h_endofpacket,   --      .endofpacket
			t2h_channel       => fabric_t2h_channel(0),    --      .channel
			mgmt_valid        => link_mgmt_valid,          --  mgmt.valid
			mgmt_data         => link_mgmt_data,           --      .data
			mgmt_channel      => link_mgmt_channel         --      .channel
		);

	fabric : component fluid_board_soc_sld_hub_controller_system_0_fabric
		port map (
			clk_clk             => clk_clk,                             --     clk.clk
			reset_reset         => reset_reset,                         --   reset.reset
			h2t_ready           => link_h2t_ready,                      --     h2t.ready
			h2t_valid           => link_h2t_valid,                      --        .valid
			h2t_data            => link_h2t_data,                       --        .data
			h2t_startofpacket   => link_h2t_startofpacket,              --        .startofpacket
			h2t_endofpacket     => link_h2t_endofpacket,                --        .endofpacket
			h2t_channel(0)      => link_h2t_channel,                    --        .channel
			mgmt_valid          => avalon_st_adapter_out_0_valid,       --    mgmt.valid
			mgmt_data           => avalon_st_adapter_out_0_data,        --        .data
			mgmt_channel(0)     => avalon_st_adapter_out_0_channel,     --        .channel
			t2h_ready           => fabric_t2h_ready,                    --     t2h.ready
			t2h_valid           => fabric_t2h_valid,                    --        .valid
			t2h_data            => fabric_t2h_data,                     --        .data
			t2h_startofpacket   => fabric_t2h_startofpacket,            --        .startofpacket
			t2h_endofpacket     => fabric_t2h_endofpacket,              --        .endofpacket
			t2h_channel         => fabric_t2h_channel,                  --        .channel
			reset_0_reset       => open,                                -- reset_0.reset
			h2t_0_ready         => fabric_h2t_0_ready,                  --   h2t_0.ready
			h2t_0_valid         => fabric_h2t_0_valid,                  --        .valid
			h2t_0_data          => fabric_h2t_0_data,                   --        .data
			h2t_0_startofpacket => fabric_h2t_0_startofpacket,          --        .startofpacket
			h2t_0_endofpacket   => fabric_h2t_0_endofpacket,            --        .endofpacket
			t2h_0_ready         => hub_controller_source_ready,         --   t2h_0.ready
			t2h_0_valid         => hub_controller_source_valid,         --        .valid
			t2h_0_data          => hub_controller_source_data,          --        .data
			t2h_0_startofpacket => hub_controller_source_startofpacket, --        .startofpacket
			t2h_0_endofpacket   => hub_controller_source_endofpacket    --        .endofpacket
		);

	hub_controller : component fluid_board_soc_sld_hub_controller_system_0_hub_controller
		generic map (
			ENABLE_JTAG_IO_SELECTION => false
		)
		port map (
			clk_clk              => clk_clk,                             --    clk.clk
			reset_reset          => reset_reset,                         --  reset.reset
			sink_valid           => fabric_h2t_0_valid,                  --   sink.valid
			sink_startofpacket   => fabric_h2t_0_startofpacket,          --       .startofpacket
			sink_endofpacket     => fabric_h2t_0_endofpacket,            --       .endofpacket
			sink_data            => fabric_h2t_0_data,                   --       .data
			sink_ready           => fabric_h2t_0_ready,                  --       .ready
			source_valid         => hub_controller_source_valid,         -- source.valid
			source_startofpacket => hub_controller_source_startofpacket, --       .startofpacket
			source_endofpacket   => hub_controller_source_endofpacket,   --       .endofpacket
			source_data          => hub_controller_source_data,          --       .data
			source_ready         => hub_controller_source_ready          --       .ready
		);

	avalon_st_adapter : component fluid_board_soc_sld_hub_controller_system_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 1,
			inUsePackets    => 0,
			inDataWidth     => 1,
			inChannelWidth  => 8,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 0,
			inReadyLatency  => 0,
			outDataWidth    => 1,
			outChannelWidth => 1,
			outErrorWidth   => 0,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 0,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => clk_clk,                         -- in_clk_0.clk
			in_rst_0_reset => reset_reset,                     -- in_rst_0.reset
			in_0_data      => link_mgmt_data,                  --     in_0.data
			in_0_valid     => link_mgmt_valid,                 --         .valid
			in_0_channel   => link_mgmt_channel,               --         .channel
			out_0_data     => avalon_st_adapter_out_0_data,    --    out_0.data
			out_0_valid    => avalon_st_adapter_out_0_valid,   --         .valid
			out_0_channel  => avalon_st_adapter_out_0_channel  --         .channel
		);

end architecture rtl; -- of fluid_board_soc_sld_hub_controller_system_0
