/******************************************************************************/
/** power.c
 ** 
 ** uart functions to communicate between fpga and conditioner board
 **
 **	Copyright 2017 by radex AG, Switzerland. All rights reserved.
 **	Written by Marcel Galliker
 **
 ******************************************************************************/

/*****************************************************************************/
/* Include files                                                             */
/*****************************************************************************/
#include "system.h"
#include "io.h"
#include "altera_avalon_pio_regs.h"
#include "AMC7891.h"
#include "timer.h"
#include "trprintf.h"
#include "nios_def_head.h"
#include "watchdog.h"
#include "power.h"

/*****************************************************************************/
/* Defines                                                                   */
/*****************************************************************************/

static int _amplifier_on = TRUE;
static int _v3_3_on		 = TRUE;
static int _error_delay	 = 0;

static int _State;

#define ERROR_DELAY			100 // ms

#define STATE_OFF			0
#define STATE_WAIT_ALL_OFF	1
#define STATE_WAIT_AMP_ON	2
#define STATE_ALL_ON		3

#define STATE_SD			100
#define STATE_SD_AMP		101
#define STATE_DOWN			102


/*****************************************************************************/
/* Function prototype                                                        */
/*****************************************************************************/

static int _power_test(int _v3_3_on);
static int _power_test_v3_3(void);

//--- power_init -----------------------------------------
void power_init(void)
{
	_State = STATE_OFF;
	power_amplifier(FALSE);
	power_v3_3(FALSE);
	_error_delay  = ERROR_DELAY;
	_State = STATE_WAIT_ALL_OFF;
}

//--- power_tick_10ms --------------------------------
void power_tick_10ms(void)
{
	int cycle_time=10;

//	if (_amplifier_on) watchdog_toggle();

	if(pRX_Config->cmd.shutdown)
	{
		pRX_Config->cmd.shutdown 		= 0;
		_State = STATE_SD;
	}

	if (_error_delay>0) _error_delay-=cycle_time;

	trprintf("%d: STATE=%d, error_delay=%d\n", timer_getTick(), _State, _error_delay);

	switch(_State)
	{
	case STATE_OFF:				break;

	case STATE_WAIT_ALL_OFF:	if (!_power_test(_v3_3_on))
								{
									power_amplifier(TRUE);
									_error_delay  = ERROR_DELAY;
									_State = STATE_WAIT_AMP_ON;
								}
								break;

	case STATE_WAIT_AMP_ON:		if (_power_test(_v3_3_on))
								{
									power_v3_3(TRUE);
									_error_delay  = ERROR_DELAY;
									_State = STATE_ALL_ON;
								}
								break;

	case STATE_ALL_ON:			_power_test(_v3_3_on);
								break;

    // --- SHUT-DOWN ------------------------------------------------------
	case STATE_SD:				power_v3_3(FALSE);
								_error_delay  = ERROR_DELAY;
								_State = STATE_SD;
								break;

	case STATE_SD_AMP:			if (!_power_test_v3_3())
								{
									power_amplifier(FALSE);
									pRX_Status->info.is_shutdown = 1;
									_State = STATE_DOWN;
								}
								break;

	case STATE_DOWN:			break;
	}
}

//--- power_v3_3 ---------------------------------------------
void power_v3_3(int on)
{
	if (on!=_v3_3_on)
	{
		if (on)	IOWR_16DIRECT(AMC7891_0_BASE,AMC7891_GPIO_OUT,0x00FF);
		else	IOWR_16DIRECT(AMC7891_0_BASE,AMC7891_GPIO_OUT,0x0000);
		_v3_3_on 	= on;
	}
}

//--- power_amplifier --------------------------------
void power_amplifier(int on)
{
	if (on!=_amplifier_on)
	{
		if (on) watchdog_start_debug_mode();
		else 	watchdog_init();
		_amplifier_on = on;
	}
}

//--- _power_test_v3_3 -----------------------------------
static int _power_test_v3_3(void)
{
	int res = IORD_ALTERA_AVALON_PIO_DATA(HEAD_CON_ERR_IN_BASE);
	return res==0x0000000F;
}

//--- _power_test ------------------------------------------------
static int _power_test(int v_3_3_on)
{
	alt_u16 		val=0;
	int				dummy;
	int 			on;

	if (pRX_Status->error.amc7891)
	{
		pRX_Status->u_minus_36v 	= INVALID_VALUE;
		pRX_Status->u_minus_5v		= INVALID_VALUE;
		pRX_Status->u_plus_5v		= INVALID_VALUE;
		pRX_Status->u_plus_2v5		= INVALID_VALUE;
		pRX_Status->headcon_amc_temp= INVALID_VALUE;
		for(val=0; val>MAX_HEADS_BOARD; val++)
			pRX_Status->head_temp[val] = pRX_Config->cond[val].tempHead = INVALID_VALUE;
	}
	else
	{
		// start converting -36v
		dummy = IORD_16DIRECT(AMC7891_0_BASE,AMC7891_ADC0_DATA) & 0x3ff;
		dummy++;	// to ignore warning

		// result=36V / start converting -5V
		val = IORD_16DIRECT(AMC7891_0_BASE,AMC7891_ADC1_DATA) & 0x3ff;
		pRX_Status->u_minus_36v = -1*(1000 *(5120000 - 5235 * val)/48128);

		// result=-5V / start converting +5V
		val = IORD_16DIRECT(AMC7891_0_BASE,AMC7891_ADC2_DATA) & 0x3ff;
		pRX_Status->u_minus_5v		= -1*(1000* (10240 - 15*val)/1024);

		// result=+5V / start converting -2.5V
		val = IORD_16DIRECT(AMC7891_0_BASE,AMC7891_ADC3_DATA) & 0x3ff;
		pRX_Status->u_plus_5v			= val*5000/1024;

		val = IORD_16DIRECT(AMC7891_0_BASE,AMC7891_ADC4_DATA) & 0x3ff;
		pRX_Status->u_plus_2v5		= val*5000/1024;
	}

	trprintf("-5V:   %d err:%d\n",   pRX_Status->u_minus_5v, pRX_Status->error.u_minus_5v);
	trprintf("+5V:   %d err:%d\n",   pRX_Status->u_plus_5v,  pRX_Status->error.u_plus_5v);
	trprintf("+2.5V: %d err:%d\n",   pRX_Status->u_plus_2v5, pRX_Status->error.u_plus_2v5);
	trprintf("+3.3V:       err:%d\n",                        pRX_Status->error.u_plus_3v3);
	trprintf("-36V:  %d err:%d\n",   pRX_Status->u_minus_36v, pRX_Status->error.u_minus_36v);

	// trprintf("FlowCheck presure=%d resetcnt=%d error=%d\n" , pRX_Status->flow_check_pressure, pRX_Status->flow_check_pressure_reset_cnt, pRX_Status->error.flow_check);

	if(pRX_Status->u_plus_2v5 <=2000   || pRX_Status->u_plus_2v5 >=  3000) if (!_error_delay)pRX_Status->error.u_plus_2v5 =TRUE;

	if (v_3_3_on)
	{
		on = TRUE;
		if (!_power_test_v3_3()) {on=FALSE; if (!_error_delay)pRX_Status->error.u_plus_3v3=TRUE; }

		//--- check voltages and set Error flags ----------------------------------------
		if(pRX_Status->u_minus_36v>=-30000 || pRX_Status->u_minus_36v<=-40000) {on=FALSE; if (!_error_delay)pRX_Status->error.u_minus_36v=TRUE;}
		if(pRX_Status->u_minus_5v >= -4000 || pRX_Status->u_minus_5v <= -6000) {on=FALSE; if (!_error_delay)pRX_Status->error.u_minus_5v =TRUE;}
		if(pRX_Status->u_plus_5v  <=  4000 || pRX_Status->u_plus_5v  >=  6000) {on=FALSE; if (!_error_delay)pRX_Status->error.u_plus_5v  =TRUE;}
	}
	else
	{
		on  = FALSE;

		pRX_Status->head_con_3v3_error=IORD_ALTERA_AVALON_PIO_DATA(HEAD_CON_ERR_IN_BASE);
		if(pRX_Status->head_con_3v3_error!=0x00000000) {on=TRUE; if (!_error_delay) pRX_Status->error.watchdog=TRUE;}

		if(pRX_Status->u_minus_36v >  1000) {on=TRUE; if (!_error_delay) pRX_Status->error.watchdog=TRUE;}
		if(pRX_Status->u_minus_5v  < -1000) {on=TRUE; if (!_error_delay) pRX_Status->error.watchdog=TRUE;}
		if(pRX_Status->u_plus_5v   > 2000 ) {on=TRUE; if (!_error_delay) pRX_Status->error.watchdog=TRUE;}
	}
	trprintf("POWER ON:%d\n",   on);
	return on;
}

