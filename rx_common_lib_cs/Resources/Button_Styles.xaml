<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:igGrids="http://infragistics.com/DataPresenter"
    xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:AvalonLambdas="http://schemas.AvalonLambdas/AvalonLambdas"
    xmlns:common="clr-namespace:RX_Common"
    xmlns:ig="http://schemas.infragistics.com/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="RxBasics.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"             Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background"                   Value="{StaticResource RX.Static.Background}"/>
        <Setter Property="BorderBrush"                  Value="{StaticResource RX.Static.Border}"/>
        <Setter Property="Foreground"                   Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness"              Value="1"/>
        <Setter Property="HorizontalContentAlignment"   Value="Center"/>
        <Setter Property="VerticalContentAlignment"     Value="Center"/>
        <Setter Property="Padding"                      Value="1"/>
        <!--       
        <Setter Property="Width"                        Value="50"/>
        <Setter Property="Height"                       Value="32"/> 
        -->
        <Setter Property="Width"                        Value="80"/>
        <Setter Property="Height"                       Value="64"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <!--
                        <Ellipse x:Name="circle" Width="30" Height="30" Stroke="{StaticResource RX.Static.Border}" Fill="{TemplateBinding Background}"/>
                        -->
                        <Ellipse x:Name="circle" Width="60" Height="60" Stroke="{StaticResource RX.Static.Border}" Fill="{TemplateBinding Background}"/>
                        <ContentPresenter 
                                x:Name="contentPresenter" 
                                Focusable="False" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Padding}" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--
    					<Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="circle" Property="Stroke"   Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="circle" Property="Fill"     Value="{StaticResource RX.MouseOver.Background}"/>
                            <Setter TargetName="circle" Property="Stroke"   Value="{StaticResource RX.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="circle" Property="Fill"     Value="{StaticResource RX.Pressed.Background}"/>
                            <Setter TargetName="circle" Property="Stroke"   Value="{StaticResource RX.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--    <Setter TargetName="circle" Property="Fill"     Value="{StaticResource RX.Disabled.Background}"/> -->
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="circle" Property="Stroke"   Value="{StaticResource RX.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource RX.Disabled.Foreground}"/>
                        </Trigger>
                        <!--
                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1"/>
                        </Trigger>
                        -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="Margin" Value="2,5"/>
    </Style>

    <Style TargetType="{x:Type common:RxButton}">
        <Setter Property="FocusVisualStyle"             Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background"                   Value="{StaticResource RX.Static.Background}"/>
        <Setter Property="BorderBrush"                  Value="{StaticResource RX.Static.Border}"/>
        <Setter Property="Foreground"                   Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness"              Value="1"/>
        <Setter Property="HorizontalContentAlignment"   Value="Center"/>
        <Setter Property="VerticalContentAlignment"     Value="Center"/>
        <Setter Property="Padding"                      Value="1"/>
        <!--        <Setter Property="Width"                        Value=""/> -->
  <!--      <Setter Property="Height"                       Value="32"/> -->
        <Setter Property="Height"                       Value="64"/>
        <Setter Property="Margin"                       Value="10,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <!--
                        <Ellipse x:Name="circle" 
                                 Width ="{TemplateBinding Height}" 
                                 Height="{TemplateBinding Height}" 
                                 Stroke="{StaticResource RX.Static.Border}" 
                                 Fill="{TemplateBinding Background}"
                                 />
                        <Ellipse x:Name="busy"   
                                 Width="{TemplateBinding Height}" 
                                 Height="{TemplateBinding Height}"
                                 Fill="Transparent"
                                 Visibility="Hidden" 
                                 StrokeThickness="3" 
                                 RenderTransformOrigin="0.5,0.5"
                                 >
                            
                                <Ellipse.Stroke>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="White" Offset="1"/>
                                        <GradientStop Color="LightGreen" Offset="0.4"/>
                                    </LinearGradientBrush>
                                </Ellipse.Stroke>
                            
                                <Ellipse.RenderTransform>
                                    <RotateTransform Angle="0"/>
                                </Ellipse.RenderTransform>
                        </Ellipse>
                        -->
                        <Border Width ="{TemplateBinding Height}" 
                                Height="{TemplateBinding Height}"
                                Padding="2"
                                >
                            <Grid>
                                <Ellipse x:Name="circle"
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="Stretch"
                                 Stroke="{StaticResource RX.Static.Border}" 
                                 Fill="{TemplateBinding Background}"
                                 />

                                <Ellipse x:Name="busy"   
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="Stretch"
                                 Fill="Transparent"
                                 Visibility="Hidden" 
                                 RenderTransformOrigin="0.5,0.5"
                                 StrokeThickness="6" 
                                 Margin="-10"
                                 >

                                    <Ellipse.Stroke>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="White" Offset="1"/>
                                            <GradientStop Color="LightGreen" Offset="0.4"/>
                                        </LinearGradientBrush>
                                    </Ellipse.Stroke>

                                    <Ellipse.RenderTransform>
                                        <RotateTransform Angle="0"/>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Grid>
                        </Border>

                        <ContentPresenter 
                                x:Name="contentPresenter" 
                                Focusable="False" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Padding}" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                TextBlock.FontSize="{TemplateBinding FontSize}"
                                />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="circle" Property="Stroke"   Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <!-- does not work correctly on Surface touch
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="circle" Property="Fill"     Value="{StaticResource RX.MouseOver.Background}"/>
                            <Setter TargetName="circle" Property="Stroke"   Value="{StaticResource RX.MouseOver.Border}"/>
                        </Trigger>   
                        -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="circle" Property="Fill"     Value="{StaticResource RX.Pressed.Background}"/>
                            <Setter TargetName="circle" Property="Stroke"   Value="{StaticResource RX.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="circle" Property="Stroke"   Value="{StaticResource RX.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource RX.Disabled.Foreground}"/>
                        </Trigger>
                        <Trigger Property="common:RxButton.IsChecked" Value="true">
                            <Setter TargetName="circle" Property="Fill"     Value="{StaticResource RX.Checked.Background}"/>
                            <Setter TargetName="circle" Property="Stroke"   Value="{StaticResource RX.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="common:RxButton.IsBusy" Value="true">
                            <Setter TargetName="busy" Property="Visibility" Value="Visible"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="busy"
                                            Storyboard.TargetProperty="RenderTransform.Angle"
                                            From="0"
                                            To="360"
                                            Duration="0:0:1"
                                            RepeatBehavior="Forever" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/>

    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="2,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="Center">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{StaticResource RadioButton.Static.Glyph}" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RxRadioButton _____________________________________________________________________   
    <Style x:Key="RxRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="2,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Border x:Name="radioButtonBorder" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2" HorizontalAlignment="Stretch" Margin="1,1,2,1" VerticalAlignment="Stretch">
                            <Grid x:Name="markGrid" Margin="2" VerticalAlignment="Bottom">
                                <Rectangle x:Name="optionMark" Height="2" HorizontalAlignment="Stretch" Fill="Transparent"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="Center" Margin="5,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RX.Green}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RX.Green}"/>                            
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Fill" TargetName="optionMark" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    -->

    <!-- RxRadioButton ____________________________________________________-->
    <Style x:Key="{x:Type common:RxRadioButton}" TargetType="{x:Type common:RxRadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
        <!-- <Setter Property="Background" Value="Transparent"/> -->
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <!--  <Setter Property="Margin" Value="2,1"/> -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                        <!-- <Border x:Name="radioButtonBorder" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2" HorizontalAlignment="Stretch" Margin="8,1,5,1" VerticalAlignment="Stretch"> -->
                        <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2" HorizontalAlignment="Stretch" Margin="5,1" VerticalAlignment="Stretch">
                            <Rectangle x:Name="optionMark" Height="2" Margin="2" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fill="Transparent"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="Center" Margin="10,1"/>
                        <TextBlock x:Name="error"   Text="!" Foreground="Red"    FontFamily="Segoe" FontSize="{StaticResource FontSize}" FontWeight="ExtraBlack" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Hidden" Margin="2,0"/>
                        <TextBlock x:Name="warning" Text="!" Foreground="Orange" FontFamily="Segoe" FontSize="{StaticResource FontSize}" FontWeight="ExtraBlack" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Hidden" Margin="2,0"/>
                        <Rectangle x:Name="separator" HorizontalAlignment="Right" Fill="{StaticResource RX.Green}" Width="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <!--    <Setter Property="Padding" Value="4,-1,0,0"/> -->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RX.Green}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RX.Green}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Fill" TargetName="optionMark" Value="Transparent"/>
                        </Trigger>

                        <Trigger Property="common:RxRadioButton.Error" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="error"/>
                        </Trigger>
                        <Trigger Property="common:RxRadioButton.Error" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="error"/>
                        </Trigger>

                        <Trigger Property="common:RxRadioButton.Warning" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="warning"/>
                        </Trigger>
                        <Trigger Property="common:RxRadioButton.Warning" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="warning"/>
                        </Trigger>

                        <Trigger Property="common:RxRadioButton.Last" Value="true">
                            <Setter Property="Visibility" Value="Hidden" TargetName="separator"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RxCommandButton _____________________________________________________________________________-->
    <Style x:Key="RxCommandButton" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background"  Value="{StaticResource RX.LightGreen}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RX.Green}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="7,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                        <Border x:Name="border" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                CornerRadius="4"  
                                Margin="-5,-2" 
                                HorizontalAlignment="Stretch" 
                                VerticalAlignment="Stretch"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <Rectangle x:Name="optionMark" 
                                       Height="2" 
                                       HorizontalAlignment="Stretch" 
                                       VerticalAlignment="Bottom"                                        
                                       Fill="Transparent"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="Center" 
                                          Margin="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background"  TargetName="border" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.Disabled.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RX.Green}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Fill" TargetName="optionMark" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RxCommandButton _____________________________________________________________________________-->
    <Style x:Key="RxCommandButton2" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background"  Value="{StaticResource RX.LightGreen}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RX.Green}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="7,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                        <Border x:Name="border" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                CornerRadius="4"  
                                Margin="-5,-2" 
                                HorizontalAlignment="Stretch" 
                                VerticalAlignment="Stretch"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <Ellipse x:Name="optionMark" 
                                     Width="{DynamicResource FontSize}"
                                     Height="{DynamicResource FontSize}"
                                     Fill="Transparent"
                                     StrokeThickness="1"
                                     Stroke="{TemplateBinding BorderBrush}"
                                     HorizontalAlignment="Left" 
                                     VerticalAlignment="Stretch" 
                                     Margin="2"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="Center" 
                                          Margin="20,2,2,2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <!--
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background"  TargetName="border" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                        </Trigger>
                        -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.Disabled.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource RadioButton.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RX.Green}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Fill" TargetName="optionMark" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ButtonNoMouseOver" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <!--
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
            </Trigger>
            -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



</ResourceDictionary>
